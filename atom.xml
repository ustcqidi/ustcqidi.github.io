<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>祁迪的博客</title>
  
  <subtitle>企业级客户端技术探索：架构设计·性能优化·效能提升</subtitle>
  <link href="https://ustcqidi.github.io/atom.xml" rel="self"/>
  
  <link href="https://ustcqidi.github.io/"/>
  <updated>2025-01-24T10:05:47.278Z</updated>
  <id>https://ustcqidi.github.io/</id>
  
  <author>
    <name>祁迪</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>拥抱AI：从基础框架团队视角探索效率与挑战</title>
    <link href="https://ustcqidi.github.io/2025/01/24/ai-brainstorm/"/>
    <id>https://ustcqidi.github.io/2025/01/24/ai-brainstorm/</id>
    <published>2025-01-24T10:02:03.000Z</published>
    <updated>2025-01-24T10:05:47.278Z</updated>
    
    <content type="html"><![CDATA[<p>在这个 <strong>All in AI</strong> 的时代，无论是学习、工作、生活还是娱乐，AI 已经深刻融入了各种场景。大家利用 AI 来赋能，不仅解决问题，还能显著降低工作量、提升工作效率。</p><p>今天下午我们组织了一场非常有趣的 <strong>Brainstorm 会议</strong>，探讨了作为客户端基础框架团队，我们如何应对 AI 带来的变化与冲击，如何利用 AI 解决我们面临的问题，同时规避可能产生的负面影响。</p><span id="more"></span><h3 id="1-AI-对现有业务流程和生态的潜在冲击"><a href="#1-AI-对现有业务流程和生态的潜在冲击" class="headerlink" title="1. AI 对现有业务流程和生态的潜在冲击"></a><strong>1. AI 对现有业务流程和生态的潜在冲击</strong></h3><p>AI 模型及其应用场景是否会对我们现有的视频会议业务流程和生态系统带来颠覆性或破坏性的影响？<br>例如：  </p><ul><li><strong>频繁调用 API 的问题</strong><br>AI 助手可能频繁调用我们的接口，生成会议纪要、规划议程或实时生成摘要。这类新的 AI 驱动业务模式会对后台流量、代码框架乃至整体业务流程产生压力。</li><li><strong>业务场景的变化</strong><br>传统会议可能只涉及会议内容的简单记录，但随着 AI 自动生成摘要和行动项的普及，我们的系统是否能高效支持这种业务扩展？如何应对这些流量和性能冲击？</li></ul><h3 id="2-借助-AI-提升团队开发效率"><a href="#2-借助-AI-提升团队开发效率" class="headerlink" title="2. 借助 AI 提升团队开发效率"></a><strong>2. 借助 AI 提升团队开发效率</strong></h3><p>我们主要从以下几个方向进行探讨：  </p><h4 id="2-1-AI-驱动的问答机器人"><a href="#2-1-AI-驱动的问答机器人" class="headerlink" title="2.1 AI 驱动的问答机器人"></a><strong>2.1 AI 驱动的问答机器人</strong></h4><p>作为提供客户端基础服务和框架的团队，我们需要频繁解答业务团队的技术问题，例如 API 使用方法、技术支持，甚至客户问题的处理。这些内容虽然已有大量文档和知识沉淀（如文档目录、培训视频、PPT 等），但查找效率较低。<br>我们是否可以开发一个 <strong>面向基础组件的 AI 问答机器人</strong>，帮助团队成员通过对话快速获取答案，从而减轻技术支持的工作量？</p><h4 id="2-2-自动生成单元测试代码"><a href="#2-2-自动生成单元测试代码" class="headerlink" title="2.2 自动生成单元测试代码"></a><strong>2.2 自动生成单元测试代码</strong></h4><p>我们是否能借助 AI 模型自动生成 <strong>单元测试</strong> 或 <strong>TA 测试代码</strong>？<br>具体设想：  </p><ul><li>对于基础模块中的常用函数（如字符串操作、加解密方法等），通过提供函数原型，AI 模型可生成基于 GTest 的 C++ 测试代码，或提供测试建议。</li><li>对于端到端测试（E2E），我们目前基于 Lua 封装了接口驱动的测试框架。它支持多角色、多设备的复杂测试场景，但测试用例的设计、胶水代码的组织仍然高度依赖人工。<br>我们是否可以通过 AI 生成测试用例的建议、自动编排测试流程，甚至直接生成 Lua 脚本，从而减少人工投入？</li></ul><h4 id="2-3-AI-辅助日志分析"><a href="#2-3-AI-辅助日志分析" class="headerlink" title="2.3 AI 辅助日志分析"></a><strong>2.3 AI 辅助日志分析</strong></h4><p>目前我们的日志模式较为固定，错误模式和关键字有一定规律，但团队仍需投入大量时间查看日志、解决问题。如果能基于我们业务场景训练一个 <strong>定制化的日志分析模型</strong>，是否可以帮助我们快速定位常见问题、提高问题排查效率？</p><h4 id="2-4-代码审查与-Bug-检查"><a href="#2-4-代码审查与-Bug-检查" class="headerlink" title="2.4 代码审查与 Bug 检查"></a><strong>2.4 代码审查与 Bug 检查</strong></h4><p>现有 AI 模型在代码生成和错误修复方面已表现出强大的能力。我们是否可以利用 AI 帮助团队：  </p><ul><li>自动审查代码风格，确保一致性；  </li><li>查找常见错误并提供修改建议；  </li><li>提高代码质量和开发效率？</li></ul>]]></content>
    
    
    <summary type="html">&lt;p&gt;在这个 &lt;strong&gt;All in AI&lt;/strong&gt; 的时代，无论是学习、工作、生活还是娱乐，AI 已经深刻融入了各种场景。大家利用 AI 来赋能，不仅解决问题，还能显著降低工作量、提升工作效率。&lt;/p&gt;
&lt;p&gt;今天下午我们组织了一场非常有趣的 &lt;strong&gt;Brainstorm 会议&lt;/strong&gt;，探讨了作为客户端基础框架团队，我们如何应对 AI 带来的变化与冲击，如何利用 AI 解决我们面临的问题，同时规避可能产生的负面影响。&lt;/p&gt;</summary>
    
    
    
    
    <category term="AI赋能开发效能提升" scheme="https://ustcqidi.github.io/tags/AI%E8%B5%8B%E8%83%BD%E5%BC%80%E5%8F%91%E6%95%88%E8%83%BD%E6%8F%90%E5%8D%87/"/>
    
    <category term="问答机器人" scheme="https://ustcqidi.github.io/tags/%E9%97%AE%E7%AD%94%E6%9C%BA%E5%99%A8%E4%BA%BA/"/>
    
    <category term="日志分析" scheme="https://ustcqidi.github.io/tags/%E6%97%A5%E5%BF%97%E5%88%86%E6%9E%90/"/>
    
    <category term="技术支持效率" scheme="https://ustcqidi.github.io/tags/%E6%8A%80%E6%9C%AF%E6%94%AF%E6%8C%81%E6%95%88%E7%8E%87/"/>
    
    <category term="测试自动化与AI融合" scheme="https://ustcqidi.github.io/tags/%E6%B5%8B%E8%AF%95%E8%87%AA%E5%8A%A8%E5%8C%96%E4%B8%8EAI%E8%9E%8D%E5%90%88/"/>
    
  </entry>
  
  <entry>
    <title>构建高效的客户端 Rate Limit 框架：设计与应用场景</title>
    <link href="https://ustcqidi.github.io/2025/01/24/rate-limit/"/>
    <id>https://ustcqidi.github.io/2025/01/24/rate-limit/</id>
    <published>2025-01-24T05:26:47.000Z</published>
    <updated>2025-01-24T06:46:12.258Z</updated>
    
    <content type="html"><![CDATA[<p>本文介绍了一个用于客户端的通用限流框架设计与实践。该框架通过多种限流策略（计数器、滑动窗口、令牌桶）解决了HTTP请求并发、reCAPTCHA验证、日志写入等场景的限流需求。框架采用模块化设计，支持灵活配置和扩展，并集成了开发环境实时告警和生产环境Telemetry监控功能，有效提升了系统稳定性和用户体验。</p><span id="more"></span><h1 id="1-问题背景与需求"><a href="#1-问题背景与需求" class="headerlink" title="1. 问题背景与需求"></a><strong>1. 问题背景与需求</strong></h1><p>在现代客户端开发中，资源管理和系统稳定性至关重要。然而，在实际业务中，我们发现了以下问题：</p><ol><li><strong>HTTP 请求无约束</strong>：短时间内可能触发大量并发 HTTP 请求，缺乏全局限制，容易导致服务端压力激增。</li><li><strong>不合理的 reCaptcha 错误处理</strong>：当服务负载较高时，频繁弹出 reCaptcha 提示框，极大地影响用户体验。</li><li><strong>日志系统重复记录</strong>：大量重复 MemLog 日志可能掩盖关键问题，影响诊断效率。</li><li><strong>重复 Telemetry 数据</strong>：Telemetry 系统被重复数据淹没，导致分析困难。</li><li><strong>频繁文件操作</strong>：频繁打开文件可能导致系统资源耗尽。</li><li><strong>频繁数据库读写</strong>：短时间内的高频数据库操作影响性能并降低系统响应速度。</li></ol><p><strong>解决目标</strong>：<br>为了解决以上问题，我们设计了一个通用的 <strong>Rate Limit 框架</strong>，以实现以下目标：</p><ul><li>统一管理各类操作的限流规则（如 HTTP 请求、日志记录、文件操作等）。</li><li>提供灵活可配置的限流策略以适应不同业务场景。</li><li>优化用户体验，减少无效操作对用户的干扰。</li><li>提供扩展性，适配未来可能的需求变化。</li></ul><h1 id="2-框架设计思路"><a href="#2-框架设计思路" class="headerlink" title="2. 框架设计思路"></a><strong>2. 框架设计思路</strong></h1><p>根据需求，我们将 Rate Limit 框架的设计分为以下几个关键模块：</p><ol><li><strong>统一管理模块</strong>：提供统一的限流机制，支持跨业务模块的限流需求。</li><li><strong>策略定义与配置</strong>：允许开发者为不同场景灵活配置限流策略，包括阈值、时间窗口等。</li><li><strong>数据采集与监控</strong>：实时采集操作数据并监控限流执行状态。</li><li><strong>限流执行与反馈</strong>：根据策略结果进行限流操作，同时提供友好的反馈机制，如开发阶段的对话框提示和线上日志上报。</li></ol><h1 id="3-框架结构设计"><a href="#3-框架结构设计" class="headerlink" title="3. 框架结构设计"></a><strong>3. 框架结构设计</strong></h1><h2 id="3-1-核心组件"><a href="#3-1-核心组件" class="headerlink" title="3.1 核心组件"></a><strong>3.1 核心组件</strong></h2><ol><li><strong>RateLimiter</strong>：限流核心模块，负责执行限流策略。</li><li><strong>RateLimitStrategy</strong>：策略配置模块，用于定义场景的限流规则和算法。可以为不同的业务场景（如HTTP请求、文件操作、数据库操作）设置不同的限流策略和配置。</li><li><strong>DataCollector</strong>：数据采集模块，负责实时记录操作数据。通过DataCollector接口，可以实现自定义的数据收集逻辑，适应不同的监控需求。</li><li><strong>RateLimitHandler</strong>：限流处理模块，根据策略执行反馈操作（如弹窗或日志上报）。</li></ol><h2 id="3-2-架构图"><a href="#3-2-架构图" class="headerlink" title="3.2 架构图"></a><strong>3.2 架构图</strong></h2><p>以下是框架的核心架构图：</p><p><img src="/2025/01/24/rate-limit/arch.png" alt="image.png"></p><h2 id="3-3-核心类图"><a href="#3-3-核心类图" class="headerlink" title="3.3 核心类图"></a><strong>3.3 核心类图</strong></h2><p>以下是核心类的 UML 类图：</p><p><img src="/2025/01/24/rate-limit/class.png" alt="image.png"></p><h1 id="4-实现细节"><a href="#4-实现细节" class="headerlink" title="4. 实现细节"></a><strong>4. 实现细节</strong></h1><h2 id="4-1-核心模块代码"><a href="#4-1-核心模块代码" class="headerlink" title="4.1 核心模块代码"></a><strong>4.1 核心模块代码</strong></h2><h3 id="RateLimitTypes-h"><a href="#RateLimitTypes-h" class="headerlink" title="RateLimitTypes.h"></a><strong>RateLimitTypes.h</strong></h3><p>定义限流策略的核心数据结构：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// RateLimitTypes.h</span></span><br><span class="line"><span class="meta">#<span class="keyword">ifndef</span> RATE_LIMIT_TYPES_H</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> RATE_LIMIT_TYPES_H</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;chrono&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> RateLimitFramework &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">enum class</span> <span class="title class_">RateLimitAlgorithm</span> &#123;</span><br><span class="line">    SIMPLE_COUNTER,</span><br><span class="line">    SLIDING_WINDOW,</span><br><span class="line">    TOKEN_BUCKET</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">enum class</span> <span class="title class_">StrategyType</span> &#123;</span><br><span class="line">Request,</span><br><span class="line">    Recapcha,</span><br><span class="line">    MEMLOG,</span><br><span class="line">    DB_IO</span><br><span class="line"><span class="comment">// Add more strategy types as needed</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">RateLimitStrategy</span> &#123;</span><br><span class="line">    StrategyType strategyType;</span><br><span class="line"><span class="type">int</span> threshold;</span><br><span class="line">std::chrono::milliseconds timeWindow;</span><br><span class="line">RateLimitAlgorithm algorithm;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">&#125; <span class="comment">// namespace RateLimitFramework</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span> <span class="comment">// RATE_LIMIT_TYPES_H</span></span></span><br></pre></td></tr></table></figure><h3 id="DataCollector"><a href="#DataCollector" class="headerlink" title="DataCollector"></a><strong>DataCollector</strong></h3><p>负责记录和查询操作时间戳：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">ifndef</span> DATA_COLLECTOR_H</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> DATA_COLLECTOR_H</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;cmmlib/CmmBase.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;RateLimitTypes.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;chrono&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;deque&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std::chrono;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> RateLimitFramework &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">CMM_API</span> DataCollector &#123;</span><br><span class="line"><span class="keyword">protected</span>:</span><br><span class="line">    std::map&lt;std::string, std::deque&lt;std::chrono::steady_clock::time_point&gt;&gt; timestamps;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">record</span><span class="params">(<span class="type">const</span> std::string&amp; key, <span class="type">const</span> RateLimitStrategy&amp; strategy)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="type">int</span> <span class="title">getData</span><span class="params">(<span class="type">const</span> std::string&amp; key, <span class="type">const</span> RateLimitStrategy&amp; strategy)</span> <span class="type">const</span></span>;</span><br><span class="line">    <span class="keyword">virtual</span> ~<span class="built_in">DataCollector</span>() = <span class="keyword">default</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">&#125; <span class="comment">// namespace RateLimitFramework</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span> <span class="comment">// DATA_COLLECTOR_H</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;cmmlib/ratelimit/DataCollector.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std::chrono;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> RateLimitFramework;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">DataCollector::record</span><span class="params">(<span class="type">const</span> std::string&amp; key, <span class="type">const</span> RateLimitStrategy&amp; strategy)</span> </span>&#123;</span><br><span class="line"><span class="keyword">auto</span> now = std::chrono::steady_clock::<span class="built_in">now</span>();</span><br><span class="line"><span class="keyword">auto</span>&amp; timePoints = timestamps[key];</span><br><span class="line">timePoints.<span class="built_in">push_back</span>(now);</span><br><span class="line"></span><br><span class="line"><span class="keyword">auto</span> startTime = now - strategy.timeWindow;</span><br><span class="line"><span class="keyword">while</span> (!timePoints.<span class="built_in">empty</span>() &amp;&amp; timePoints.<span class="built_in">front</span>() &lt; startTime) &#123;</span><br><span class="line">timePoints.<span class="built_in">pop_front</span>();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">DataCollector::getData</span><span class="params">(<span class="type">const</span> std::string&amp; key, <span class="type">const</span> RateLimitStrategy&amp; strategy)</span> <span class="type">const</span> </span>&#123;</span><br><span class="line"><span class="keyword">auto</span> it = timestamps.<span class="built_in">find</span>(key);</span><br><span class="line"><span class="keyword">if</span> (it == timestamps.<span class="built_in">end</span>()) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">auto</span> now = std::chrono::steady_clock::<span class="built_in">now</span>();</span><br><span class="line"><span class="keyword">auto</span> startTime = now - strategy.timeWindow;</span><br><span class="line"><span class="keyword">return</span> std::<span class="built_in">count_if</span>(it-&gt;second.<span class="built_in">begin</span>(), it-&gt;second.<span class="built_in">end</span>(),</span><br><span class="line">[startTime](<span class="type">const</span> <span class="keyword">auto</span>&amp; tp) &#123; <span class="keyword">return</span> tp &gt;= startTime; &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="RateLimiter"><a href="#RateLimiter" class="headerlink" title="RateLimiter"></a><strong>RateLimiter</strong></h3><p>根据不同的限流算法执行限流逻辑：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">ifndef</span> RATE_LIMITER_H</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> RATE_LIMITER_H</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;DataCollector.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;cmmlib/CmmBase.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;memory&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;chrono&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> RateLimitFramework &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">CMM_API</span> RateLimitHandler &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">handle</span><span class="params">(<span class="type">const</span> std::string&amp; key, <span class="type">const</span> std::map&lt;std::string, std::string&gt;&amp; context)</span> </span>= <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">virtual</span> ~<span class="built_in">RateLimitHandler</span>() = <span class="keyword">default</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">CMM_API</span> RateLimiter &#123;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="keyword">struct</span> <span class="title class_">Strategy</span> &#123;</span><br><span class="line">        RateLimitStrategy config;</span><br><span class="line">        std::shared_ptr&lt;DataCollector&gt; dataCollector;</span><br><span class="line">        std::shared_ptr&lt;RateLimitHandler&gt; handler;</span><br><span class="line">        std::chrono::steady_clock::time_point lastExecutionTime;</span><br><span class="line">        <span class="type">double</span> tokens;</span><br><span class="line"></span><br><span class="line"><span class="built_in">Strategy</span>(<span class="type">const</span> RateLimitStrategy&amp; cfg, std::shared_ptr&lt;DataCollector&gt; dc, std::shared_ptr&lt;RateLimitHandler&gt; rh)</span><br><span class="line">: <span class="built_in">config</span>(cfg), <span class="built_in">dataCollector</span>(dc), <span class="built_in">handler</span>(rh), <span class="built_in">lastExecutionTime</span>(std::chrono::steady_clock::<span class="built_in">now</span>()), <span class="built_in">tokens</span>(cfg.threshold) &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">Strategy</span>()</span><br><span class="line">: config&#123;&#125;, <span class="built_in">dataCollector</span>(<span class="literal">nullptr</span>), <span class="built_in">handler</span>(<span class="literal">nullptr</span>), <span class="built_in">lastExecutionTime</span>(std::chrono::steady_clock::<span class="built_in">now</span>()), <span class="built_in">tokens</span>(<span class="number">0.0</span>) &#123;&#125;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    std::map&lt;StrategyType, Strategy&gt; strategies;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">addStrategy</span><span class="params">(<span class="type">const</span> RateLimitStrategy&amp; strategy, std::shared_ptr&lt;DataCollector&gt; dataCollector, std::shared_ptr&lt;RateLimitHandler&gt; handler)</span></span>;</span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">checkLimit</span><span class="params">(StrategyType strategyType, <span class="type">const</span> std::string&amp; key)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">checkSimpleCounter</span><span class="params">(<span class="type">const</span> Strategy&amp; strategy, <span class="type">const</span> std::string&amp; key)</span></span>;</span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">checkSlidingWindow</span><span class="params">(<span class="type">const</span> Strategy&amp; strategy, <span class="type">const</span> std::string&amp; key)</span></span>;</span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">checkTokenBucket</span><span class="params">(Strategy&amp; strategy, <span class="type">const</span> std::string&amp; key)</span></span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">&#125; <span class="comment">// namespace RateLimitFramework</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span> <span class="comment">// RATE_LIMITER_H</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;cmmlib/ratelimit/RateLimit.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std::chrono;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> RateLimitFramework;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> RateLimitFramework &#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">RateLimiter::addStrategy</span><span class="params">(<span class="type">const</span> RateLimitStrategy&amp; strategy, shared_ptr&lt;DataCollector&gt; dataCollector, shared_ptr&lt;RateLimitHandler&gt; handler)</span> </span>&#123;</span><br><span class="line">        strategies[strategy.strategyType] = <span class="built_in">Strategy</span>(strategy, dataCollector, handler);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">RateLimiter::checkLimit</span><span class="params">(StrategyType strategyType, <span class="type">const</span> std::string&amp; key)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">auto</span> strategyIt = strategies.<span class="built_in">find</span>(strategyType);</span><br><span class="line">        <span class="keyword">if</span> (strategyIt == strategies.<span class="built_in">end</span>()) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>; <span class="comment">// If strategy doesn&#x27;t exist, allow the request</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">auto</span>&amp; strategy = strategyIt-&gt;second;</span><br><span class="line">        strategy.dataCollector-&gt;<span class="built_in">record</span>(key, strategy.config);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">switch</span> (strategy.config.algorithm) &#123;</span><br><span class="line">        <span class="keyword">case</span> RateLimitAlgorithm::SIMPLE_COUNTER:</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">checkSimpleCounter</span>(strategy, key);</span><br><span class="line">        <span class="keyword">case</span> RateLimitAlgorithm::SLIDING_WINDOW:</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">checkSlidingWindow</span>(strategy, key);</span><br><span class="line">        <span class="keyword">case</span> RateLimitAlgorithm::TOKEN_BUCKET:</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">checkTokenBucket</span>(strategy, key);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">RateLimiter::checkSimpleCounter</span><span class="params">(<span class="type">const</span> Strategy&amp; strategy, <span class="type">const</span> std::string&amp; key)</span> </span>&#123;</span><br><span class="line"><span class="type">int</span> count = strategy.dataCollector-&gt;<span class="built_in">getData</span>(key, strategy.config);</span><br><span class="line"><span class="keyword">if</span> (count &gt; strategy.config.threshold) &#123;</span><br><span class="line">std::map&lt;std::string, std::string&gt; context;</span><br><span class="line">strategy.handler-&gt;<span class="built_in">handle</span>(key, context);</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">RateLimiter::checkSlidingWindow</span><span class="params">(<span class="type">const</span> Strategy&amp; strategy, <span class="type">const</span> std::string&amp; key)</span> </span>&#123;</span><br><span class="line"><span class="type">int</span> count = strategy.dataCollector-&gt;<span class="built_in">getData</span>(key, strategy.config);</span><br><span class="line"><span class="keyword">if</span> (count &gt; strategy.config.threshold) &#123;</span><br><span class="line">std::map&lt;std::string, std::string&gt; context;</span><br><span class="line">strategy.handler-&gt;<span class="built_in">handle</span>(key, context);</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">RateLimiter::checkTokenBucket</span><span class="params">(Strategy&amp; strategy, <span class="type">const</span> std::string&amp; key)</span> </span>&#123;</span><br><span class="line"><span class="keyword">auto</span> now = steady_clock::<span class="built_in">now</span>();</span><br><span class="line">        <span class="keyword">auto</span> timePassed = chrono::<span class="built_in">duration_cast</span>&lt;chrono::milliseconds&gt;(now - strategy.lastExecutionTime).<span class="built_in">count</span>();</span><br><span class="line">        strategy.tokens += timePassed * (strategy.config.threshold / <span class="built_in">static_cast</span>&lt;<span class="type">double</span>&gt;(strategy.config.timeWindow.<span class="built_in">count</span>()));</span><br><span class="line">        strategy.tokens = (std::min)(strategy.tokens, <span class="built_in">static_cast</span>&lt;<span class="type">double</span>&gt;(strategy.config.threshold));</span><br><span class="line">        strategy.lastExecutionTime = now;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (strategy.tokens &lt; <span class="number">1.0</span>) &#123;</span><br><span class="line">            std::map&lt;std::string, std::string&gt; context;</span><br><span class="line">            strategy.handler-&gt;<span class="built_in">handle</span>(key, context);</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            strategy.tokens -= <span class="number">1.0</span>;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="4-2-测试程序"><a href="#4-2-测试程序" class="headerlink" title="4.2 测试程序"></a><strong>4.2 测试程序</strong></h2><p>示例测试用例展示了简单计数限流算法的应用：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;cmmlib/ratelimit/RateLimit.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;cmmlib/ratelimit/DataCollector.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;ConsoleHandler.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;EmitRequestDataCollector.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;thread&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std::chrono;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> RateLimitFramework;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">RateLimitTest</span> : <span class="keyword">public</span> ::testing::Test &#123;</span><br><span class="line"><span class="keyword">protected</span>:</span><br><span class="line">RateLimiter rateLimit;</span><br><span class="line">shared_ptr&lt;DataCollector&gt; collector;</span><br><span class="line">shared_ptr&lt;RateLimitHandler&gt; handler;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">SetUp</span><span class="params">()</span> <span class="keyword">override</span> </span>&#123;</span><br><span class="line">collector = <span class="built_in">make_shared</span>&lt;EmitRequestDataCollector&gt;();</span><br><span class="line">handler = <span class="built_in">make_shared</span>&lt;ConsoleHandler&gt;();</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="built_in">TEST_F</span>(RateLimitTest, SimpleCounterTest) &#123;</span><br><span class="line">RateLimitStrategy strategy = &#123; StrategyType::Request, <span class="number">5</span>, <span class="built_in">milliseconds</span>(<span class="number">1000</span>), RateLimitAlgorithm::SIMPLE_COUNTER &#125;;</span><br><span class="line">rateLimit.<span class="built_in">addStrategy</span>(strategy, collector, handler);</span><br><span class="line"></span><br><span class="line">string key = <span class="string">&quot;example.com/api&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Test within limit</span></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</span><br><span class="line"><span class="built_in">EXPECT_TRUE</span>(rateLimit.<span class="built_in">checkLimit</span>(StrategyType::Request, key));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Test exceeding limit</span></span><br><span class="line"><span class="built_in">EXPECT_FALSE</span>(rateLimit.<span class="built_in">checkLimit</span>(StrategyType::Request, key));</span><br><span class="line"></span><br><span class="line"><span class="comment">// Wait for the window to pass</span></span><br><span class="line">this_thread::<span class="built_in">sleep_for</span>(<span class="built_in">milliseconds</span>(<span class="number">1100</span>));</span><br><span class="line"></span><br><span class="line"><span class="comment">// Test reset after window</span></span><br><span class="line"><span class="built_in">EXPECT_TRUE</span>(rateLimit.<span class="built_in">checkLimit</span>(StrategyType::Request, key));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">TEST_F</span>(RateLimitTest, DifferentKeysTest) &#123;</span><br><span class="line">RateLimitStrategy strategy = &#123; StrategyType::Request, <span class="number">3</span>, <span class="built_in">milliseconds</span>(<span class="number">1000</span>), RateLimitAlgorithm::SIMPLE_COUNTER &#125;;</span><br><span class="line">rateLimit.<span class="built_in">addStrategy</span>(strategy, collector, handler);</span><br><span class="line"></span><br><span class="line">string key1 = <span class="string">&quot;example.com/api1&quot;</span>;</span><br><span class="line">string key2 = <span class="string">&quot;example.com/api2&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Test key1</span></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">3</span>; i++) &#123;</span><br><span class="line"><span class="built_in">EXPECT_TRUE</span>(rateLimit.<span class="built_in">checkLimit</span>(StrategyType::Request, key1));</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">EXPECT_FALSE</span>(rateLimit.<span class="built_in">checkLimit</span>(StrategyType::Request, key1));</span><br><span class="line"></span><br><span class="line"><span class="comment">// Test key2 (should not be affected by key1&#x27;s limit)</span></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">3</span>; i++) &#123;</span><br><span class="line"><span class="built_in">EXPECT_TRUE</span>(rateLimit.<span class="built_in">checkLimit</span>(StrategyType::Request, key2));</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">EXPECT_FALSE</span>(rateLimit.<span class="built_in">checkLimit</span>(StrategyType::Request, key2));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">TEST_F</span>(RateLimitTest, NonExistentStrategyTest) &#123;</span><br><span class="line">string key = <span class="string">&quot;test&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Should allow requests for non-existent strategies</span></span><br><span class="line"><span class="built_in">EXPECT_TRUE</span>(rateLimit.<span class="built_in">checkLimit</span>(<span class="built_in">static_cast</span>&lt;StrategyType&gt;(<span class="number">999</span>), key));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">TEST_F</span>(RateLimitTest, MultipleStrategiesTest) &#123;</span><br><span class="line">RateLimitStrategy apiStrategy = &#123; StrategyType::Request, <span class="number">5</span>, <span class="built_in">milliseconds</span>(<span class="number">1000</span>), RateLimitAlgorithm::SIMPLE_COUNTER &#125;;</span><br><span class="line">RateLimitStrategy recapchaStrategy = &#123; StrategyType::Recapcha, <span class="number">3</span>, <span class="built_in">milliseconds</span>(<span class="number">2000</span>), RateLimitAlgorithm::SLIDING_WINDOW &#125;;</span><br><span class="line"></span><br><span class="line">rateLimit.<span class="built_in">addStrategy</span>(apiStrategy, <span class="built_in">make_shared</span>&lt;EmitRequestDataCollector&gt;(), handler);</span><br><span class="line">rateLimit.<span class="built_in">addStrategy</span>(recapchaStrategy, <span class="built_in">make_shared</span>&lt;EmitRequestDataCollector&gt;(), handler);</span><br><span class="line"></span><br><span class="line">string request_url = <span class="string">&quot;example.com/api&quot;</span>;</span><br><span class="line">string recapcha_url = <span class="string">&quot;user123&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Test Request strategy</span></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</span><br><span class="line"><span class="built_in">EXPECT_TRUE</span>(rateLimit.<span class="built_in">checkLimit</span>(StrategyType::Request, request_url));</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">EXPECT_FALSE</span>(rateLimit.<span class="built_in">checkLimit</span>(StrategyType::Request, request_url));</span><br><span class="line"></span><br><span class="line"><span class="comment">// Test Recapcha strategy</span></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">3</span>; i++) &#123;</span><br><span class="line"><span class="built_in">EXPECT_TRUE</span>(rateLimit.<span class="built_in">checkLimit</span>(StrategyType::Recapcha, recapcha_url));</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">EXPECT_FALSE</span>(rateLimit.<span class="built_in">checkLimit</span>(StrategyType::Recapcha, recapcha_url));</span><br><span class="line"></span><br><span class="line"><span class="comment">// Wait for API strategy to reset</span></span><br><span class="line">this_thread::<span class="built_in">sleep_for</span>(<span class="built_in">milliseconds</span>(<span class="number">1100</span>));</span><br><span class="line"></span><br><span class="line"><span class="built_in">EXPECT_TRUE</span>(rateLimit.<span class="built_in">checkLimit</span>(StrategyType::Request, request_url));</span><br><span class="line"><span class="built_in">EXPECT_FALSE</span>(rateLimit.<span class="built_in">checkLimit</span>(StrategyType::Recapcha, recapcha_url));  <span class="comment">// Login strategy should still be blocked</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Wait for Login strategy to reset</span></span><br><span class="line">this_thread::<span class="built_in">sleep_for</span>(<span class="built_in">milliseconds</span>(<span class="number">1000</span>));</span><br><span class="line"></span><br><span class="line"><span class="built_in">EXPECT_TRUE</span>(rateLimit.<span class="built_in">checkLimit</span>(StrategyType::Recapcha, recapcha_url));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="5-实际应用场景"><a href="#5-实际应用场景" class="headerlink" title="5. 实际应用场景"></a><strong>5. 实际应用场景</strong></h1><h2 id="开发环境集成"><a href="#开发环境集成" class="headerlink" title="开发环境集成"></a>开发环境集成</h2><p>在开发阶段,我们实现了实时告警机制:</p><ul><li>当检测到限流事件时,立即弹出对话框提醒开发者</li><li>包含具体的限流原因和相关上下文信息</li><li>帮助开发者及早发现和解决潜在问题</li></ul><p>比如下面的截图就是某个 HTTP Request 触发了 Ratelimit 规则的 Warning 提示</p><p><img src="/2025/01/24/rate-limit/warning.png" alt="image.png"></p><h2 id="生产环境监控"><a href="#生产环境监控" class="headerlink" title="生产环境监控"></a>生产环境监控</h2><p>在生产环境中:</p><ul><li>通过Telemetry系统上报限流事件</li><li>收集用户行为数据进行分析</li><li>持续优化限流策略和阈值</li></ul><p>下图是线上触发 Ratelimit 规则的数据情况</p><p><img src="/2025/01/24/rate-limit/telemetry.png" alt="image.png"></p><h1 id="6-总结"><a href="#6-总结" class="headerlink" title="6. 总结"></a><strong>6. 总结</strong></h1><p>Rate Limit 框架的设计与实现为客户端提供了统一、灵活、可扩展的限流解决方案，不仅提升了系统稳定性，还优化了用户体验。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;本文介绍了一个用于客户端的通用限流框架设计与实践。该框架通过多种限流策略（计数器、滑动窗口、令牌桶）解决了HTTP请求并发、reCAPTCHA验证、日志写入等场景的限流需求。框架采用模块化设计，支持灵活配置和扩展，并集成了开发环境实时告警和生产环境Telemetry监控功能，有效提升了系统稳定性和用户体验。&lt;/p&gt;</summary>
    
    
    
    
    <category term="Rate Limit" scheme="https://ustcqidi.github.io/tags/Rate-Limit/"/>
    
    <category term="Telemetry 监控" scheme="https://ustcqidi.github.io/tags/Telemetry-%E7%9B%91%E6%8E%A7/"/>
    
    <category term="实时告警" scheme="https://ustcqidi.github.io/tags/%E5%AE%9E%E6%97%B6%E5%91%8A%E8%AD%A6/"/>
    
  </entry>
  
  <entry>
    <title>WebSocket 数据传输中的大数据帧发送问题</title>
    <link href="https://ustcqidi.github.io/2025/01/04/websocket-bigframe/"/>
    <id>https://ustcqidi.github.io/2025/01/04/websocket-bigframe/</id>
    <published>2025-01-04T04:03:30.000Z</published>
    <updated>2025-01-04T04:46:08.244Z</updated>
    
    <content type="html"><![CDATA[<p>详细记录了一个WebSocket发送大数据包被截断的问题排查过程</p><span id="more"></span><h1 id="问题背景"><a href="#问题背景" class="headerlink" title="问题背景"></a>问题背景</h1><h2 id="需求背景"><a href="#需求背景" class="headerlink" title="需求背景"></a>需求背景</h2><p>我们有个业务场景，需要通过 WebSocket 发送图片，根据同事反馈，目前发送一个image数据大概140kb，会出现发送的数据被截断的情况，连接也会被断开</p><h2 id="初步猜测：数据帧过大导致发送失败"><a href="#初步猜测：数据帧过大导致发送失败" class="headerlink" title="初步猜测：数据帧过大导致发送失败"></a>初步猜测：数据帧过大导致发送失败</h2><p>看了一下代码，我们没有对发送数据包的大小做限制。但是从实际的测试表现来看，发送数据大小超过 140kb 的包，就很容易出现这个问题，初步猜测跟包大小有关。还需要进一步通过 Log 或者抓包确定。</p><h2 id="问题复现与初步分析"><a href="#问题复现与初步分析" class="headerlink" title="问题复现与初步分析"></a>问题复现与初步分析</h2><p>这个问题很容易复现，这个对我们 troubleshooting 是很好的事情。我们用 mitmproxy 开启了一个代理服务器，然后在测试机器上配置这个代理服务器复现这个问题，这样做的目的是我们可以在 mitmproxy 上看到完整的 WebSocket 包，便于定位问题。mitmproxy 的 UI 交互有终端和 Web 两种形式，我更习惯使用 Web 方式，只需要在执行 mitmweb 命令，就可以启动服务。</p><p>交互界面如下：</p><p><img src="/2025/01/04/websocket-bigframe/general.jpg" alt></p><p>初步分析验证后，我们确定就是数据帧过大导致的发送失败，具体错误信息从 Log 中可以获取到。基于 Log 的错误信息，我们可以进一步分析 Root Cause。</p><h1 id="分析-Root-Cause"><a href="#分析-Root-Cause" class="headerlink" title="分析 Root Cause"></a>分析 Root Cause</h1><p>以下是我们在 Log 中发现的错误信息</p><h2 id="Socket-not-ready-for-send-recv"><a href="#Socket-not-ready-for-send-recv" class="headerlink" title="Socket not ready for send/recv"></a>Socket not ready for send/recv</h2><p><code>[10164:18664:12-20/17:43:51.370:DEBUG:SBCUrlRequest_WebSocket.cc(480)] [CSBCUrlRequest::WebSocket_CheckSendRecvData] End to post data, size:106830 Sent:0 Return:81 Curl Error String:Socket not ready for send/recv</code></p><p>这里的 <code>Return:81</code> 表示错误码是 81</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">CURLE_AGAIN</span> (<span class="number">81</span>)</span><br><span class="line"></span><br><span class="line"><span class="title class_">Socket</span> is not ready <span class="keyword">for</span> send/recv wait till it<span class="string">&#x27;s ready and try again. This return code is only returned from curl_easy_recv and curl_easy_send (Added in 7.18.2)</span></span><br></pre></td></tr></table></figure><p>这个部分的错误信息表示套接字（Socket）没有准备好进行发送或接收操作。具体的错误代码是 <strong><code>CURLE_AGAIN (81)</code></strong>，这表示需要等待，直到套接字准备好，然后再次尝试。这通常是由于非阻塞套接字的操作，需要等待套接字变得可用才能进行进一步的发送或接收。</p><h2 id="SSL-routines-bad-length"><a href="#SSL-routines-bad-length" class="headerlink" title="SSL routines::bad length"></a>SSL routines::bad length</h2><p>我们在日志中还观察到以下错误，这些错误出现在发生 <code>CURLE_AGAIN</code> 之后。</p><p><code>[10164:18664:12-20/17:43:51.520:INFO:SBCUrlRequest.cc(415)] [my_curl_debug_callback] This: 100664864 TEXT :SSL_write() error: error:0A00010F:SSL routines::bad length</code></p><p>我们当前是没有处理 <code>CURLE_AGAIN</code> ，出现 CURLE_AGAIN 时也会直接给业务层 <code>OnDataSent</code> callback。所以业务层可能在 socket 没有就绪的状态下持续不断地发送数据。</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">size_t n_sent = <span class="number">0</span>;</span><br><span class="line"><span class="title class_">CURLcode</span> ret = <span class="title function_">curl_easy_send</span>(m_hCurl, <span class="title class_">GetBaseOf</span>(total_to_send),total_to_send.<span class="title function_">size</span>(),&amp;n_sent);</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="attr">std</span>::vector&lt;<span class="title class_">CAString</span>*&gt;::iterator it = bytes_sent.<span class="title function_">begin</span>(); it != bytes_sent.<span class="title function_">end</span>(); ++it)</span><br><span class="line">&#123;</span><br><span class="line">m_webSocketState.<span class="title function_">doCallback</span>([it,ret](<span class="title class_">IWebSocketConnectionCallback</span> * callback)&#123;</span><br><span class="line">            callback-&gt;<span class="title class_">OnDataSent</span>(*it,ret);</span><br><span class="line">&#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">ZLOG</span>(<span class="variable constant_">DBG</span>,<span class="string">&quot;[CSBCUrlRequest::WebSocket_CheckSendRecvData] End to post data, size:&quot;</span>&lt;&lt;total_to_send.<span class="title function_">size</span>()</span><br><span class="line">&lt;&lt;<span class="string">&quot; Sent:&quot;</span>&lt;&lt;n_sent</span><br><span class="line">&lt;&lt;<span class="string">&quot; Return:&quot;</span>&lt;&lt;ret</span><br><span class="line">&lt;&lt;<span class="string">&quot; Curl Error String:&quot;</span>&lt;&lt;<span class="title function_">curl_easy_strerror</span>(ret));</span><br></pre></td></tr></table></figure><h3 id="为何会出现-SSL-routines-bad-length-错误呢-？"><a href="#为何会出现-SSL-routines-bad-length-错误呢-？" class="headerlink" title="为何会出现 SSL routines::bad length 错误呢 ？"></a><strong>为何会出现 <code>SSL routines::bad length</code> 错误呢 ？</strong></h3><p>如果在套接字不可用的情况下进行 <code>SSL_write</code>，可能会引发 <code>SSL_write()</code> 错误，如 “bad length”。</p><p>SSL/TLS是一个状态机,涉及了复杂的握手/协商、加密/解密等过程。这些状态需要持续地保持同步。具体来说,SSL连接建立时,客户端和服务器端会协商生成“会话密钥”、初始化变量等。这构成了一个持续的SSL “会话”。如果在“会话”过程中,由于套接字不可用中断了通信,那么客户端和服务器端的SSL状态就失去了同步。之后在套接字不可用时强行调用SSL_write写入数据,那么参与后续加密和传输的数据长度,就很可能和服务器端持有的会话状态不匹配,导致解密或者长度校验失败,出现“bad length”错误。</p><h1 id="问题修复与验证"><a href="#问题修复与验证" class="headerlink" title="问题修复与验证"></a>问题修复与验证</h1><h2 id="测试环境"><a href="#测试环境" class="headerlink" title="测试环境"></a>测试环境</h2><p>为了快速验证问题，我尝试搭建一个 WebSocket 测试服务器，在 github 中找到了一个 go 语言的版本的 WebSocket 服务器。但是我们的 WebSocket Client 实现有点问题，连接这个测试服务器时遇到了一些问题。</p><h3 id="Sec-WebSocket-Key-不合法"><a href="#Sec-WebSocket-Key-不合法" class="headerlink" title="Sec-WebSocket-Key 不合法"></a>Sec-WebSocket-Key 不合法</h3><p>Sec-WebSocket-Key是WebSocket协议中的一个重要字段,它用于WebSocket连接的握手过程中。</p><p>其规则及用途可以总结如下:</p><ol><li>格式:Sec-WebSocket-Key字段的值是一个base64编码的随机字符串。</li><li>长度:随机字符串的长度必须是16个字节,即24个base64编码后的字符。所以服务端要验证长度是否合法。</li><li>用途:用于计算Sec-WebSocket-Accept的值,这个值会在服务器端响应首部中返回,这样可以完成WebSocket握手。计算方式是:将Sec-WebSocket-Key的值与一个特定的字符串“258EAFA5-E914-47DA-95CA-C5AB0DC85B11”连接起来,取SHA-1哈希值,然后base64编码。</li><li>目的:这一握手机制的目的是为了防止误连接,确认这确实是一个要升级为WebSocket的HTTP请求,避免被非法连接利用。</li></ol><p>但是我们的 WebSocket Client 格式不规范，所以连接测试服务器时报错。</p><p>以下是具体的错误信息：</p><p><strong>客户端 Log</strong></p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">[<span class="number">46528</span>:<span class="number">41076</span>:<span class="number">12</span>-<span class="number">21</span>/<span class="number">10</span>:<span class="number">29</span>:<span class="number">59.773</span>:<span class="attr">INFO</span>:<span class="title class_">SBCUrlRequest</span>_WebSocket.<span class="title function_">cc</span>(<span class="number">326</span>)] [<span class="title class_">CSBCUrlRequest</span>::<span class="title class_">WebSocket</span>_NotifyConnectionGood] <span class="title class_">End</span> to post data, <span class="attr">head</span>:</span><br><span class="line"><span class="variable constant_">GET</span> /f <span class="variable constant_">HTTP</span>/<span class="number">1.1</span></span><br><span class="line"><span class="title class_">Host</span>: <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span></span><br><span class="line"><span class="title class_">Upgrade</span>: websocket</span><br><span class="line"><span class="title class_">Connection</span>: <span class="title class_">Upgrade</span></span><br><span class="line">**<span class="title class_">Sec</span>-<span class="title class_">WebSocket</span>-<span class="title class_">Key</span>: **&#123;15E21AB6-6AE4-<span class="number">4</span>****</span><br><span class="line"><span class="title class_">Sec</span>-<span class="title class_">WebSocket</span>-<span class="title class_">Version</span>: <span class="number">13</span></span><br><span class="line"><span class="variable constant_">ZM</span>-<span class="attr">CAP</span>: <span class="number">8300567970761955255</span>,<span class="number">6445493618999263140</span>,<span class="number">7795585261064146175</span>,<span class="number">7998097959182395391</span>,<span class="number">18587783470514173</span></span><br><span class="line"><span class="variable constant_">ZM</span>-<span class="attr">PROP</span>: <span class="title class_">Win</span>.<span class="property">Zoom</span></span><br><span class="line">X-<span class="title class_">Zoom</span>-<span class="title class_">AccountId</span>: </span><br><span class="line"></span><br><span class="line"> <span class="title class_">Sent</span>:<span class="number">287</span> <span class="title class_">Return</span>:<span class="number">0</span> <span class="title class_">Curl</span> <span class="title class_">Error</span> <span class="title class_">String</span>:<span class="title class_">No</span> error </span><br><span class="line">[<span class="number">46528</span>:<span class="number">41076</span>:<span class="number">12</span>-<span class="number">21</span>/<span class="number">10</span>:<span class="number">29</span>:<span class="number">59.788</span>:<span class="attr">INFO</span>:<span class="title class_">SBCUrlRequest</span>_WebSocket.<span class="title function_">cc</span>(<span class="number">207</span>)] [<span class="title class_">CSBCUrlRequest</span>::<span class="title class_">WebSocket</span>_ParseHeadResponse] <span class="title class_">Heads</span>:</span><br><span class="line">**<span class="variable constant_">HTTP</span>/<span class="number">1.1</span> <span class="number">400</span> <span class="title class_">Bad</span> <span class="title class_">Request</span>**</span><br><span class="line"><span class="title class_">Content</span>-<span class="title class_">Type</span>: text/plain; charset=utf-<span class="number">8</span></span><br><span class="line"><span class="title class_">Sec</span>-<span class="title class_">Websocket</span>-<span class="title class_">Version</span>: <span class="number">13</span></span><br><span class="line">X-<span class="title class_">Content</span>-<span class="title class_">Type</span>-<span class="title class_">Options</span>: nosniff</span><br><span class="line"><span class="title class_">Date</span>: <span class="title class_">Thu</span>, <span class="number">21</span> <span class="title class_">Dec</span> <span class="number">2023</span> <span class="number">02</span>:<span class="number">29</span>:<span class="number">59</span> <span class="variable constant_">GMT</span></span><br><span class="line"><span class="title class_">Content</span>-<span class="title class_">Length</span>: <span class="number">12</span></span><br><span class="line"></span><br><span class="line"><span class="title class_">Bad</span> <span class="title class_">Request</span></span><br></pre></td></tr></table></figure><p><strong>服务端 Log</strong></p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">Upgrade</span>: <span class="attr">websocket</span>: not a websocket <span class="attr">handshake</span>: <span class="string">&#x27;Sec-WebSocket-Key&#x27;</span> header must be <span class="title class_">Base64</span> encoded value <span class="keyword">of</span> <span class="number">16</span>-byte <span class="keyword">in</span> length</span><br></pre></td></tr></table></figure><p><strong>修复代码</strong></p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*Upgrade: websocket: not a websocket handshake: &#x27;Sec-WebSocket-Key&#x27;</span></span><br><span class="line"><span class="comment">header must be Base64 encoded value of 16-byte in length*/</span></span><br><span class="line"></span><br><span class="line"><span class="title class_">CAString</span> trimed_client_guild = <span class="title function_">CMM_T2UTF</span>(<span class="title class_">CString</span>(m_clientGUID, <span class="number">16</span>));</span><br><span class="line"></span><br><span class="line"><span class="title class_">CAString</span> secKey = <span class="title function_">base64EncodeA</span>((<span class="title class_">CmmUInt8</span>*)trimed_client_guild.<span class="title function_">c_str</span>(), trimed_client_guild.<span class="title function_">size</span>());</span><br></pre></td></tr></table></figure><h2 id="测试用例"><a href="#测试用例" class="headerlink" title="测试用例"></a>测试用例</h2><p>模拟发送大数据帧，期望能否复现 <code>CURLE_AGAIN</code> 错误，这样就能验证我们是否修复这个问题。</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">TEST</span>(<span class="params">WebSocketServiceTest, SendBigData</span>)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="title class_">CSBWebService</span> *ws = <span class="title class_">CWebServiceTestInstManager</span>::<span class="title class_">GetInstance</span>().<span class="title class_">SetUp</span>(<span class="title class_">Env</span>_Dev);</span><br><span class="line"><span class="title class_">Cmm</span>::<span class="title class_">CFileName</span> fn;</span><br><span class="line">fn.<span class="title class_">GetModuleFilePath</span>();</span><br><span class="line">fn += <span class="title function_">_T</span>(<span class="string">&quot;\\big_size_file.log&quot;</span>);</span><br><span class="line"><span class="attr">std</span>::ifstream <span class="title function_">file</span>(fn.<span class="title function_">c_str</span>());</span><br><span class="line"><span class="attr">std</span>::stringstream buffer;</span><br><span class="line">buffer &lt;&lt; file.<span class="title function_">rdbuf</span>();</span><br><span class="line"><span class="attr">std</span>::string longString = buffer.<span class="title function_">str</span>();</span><br><span class="line"></span><br><span class="line"><span class="title class_">WebSocketTestApp</span> app;</span><br><span class="line"><span class="title class_">CString</span> channel_id;</span><br><span class="line"><span class="title function_">EXPECT_TRUE</span>(app.<span class="title class_">ConnectTo</span>(<span class="title class_">GetTestWebSocketHost</span>(), channel_id));</span><br><span class="line"><span class="title class_">CmmUInt32</span> result = -<span class="number">1</span>;</span><br><span class="line">app.<span class="title class_">CheckConnectState</span>(channel_id, result);</span><br><span class="line"><span class="comment">//EXPECT_EQ(result, SB_ERROR_SUCCESS);</span></span><br><span class="line"></span><br><span class="line"><span class="title class_">CAString</span> <span class="title function_">test_str</span>(longString);</span><br><span class="line">    <span class="keyword">for</span> (int i = <span class="number">0</span>; i &lt; <span class="number">100</span>; i++) &#123;</span><br><span class="line">        <span class="title function_">ZLOG</span>(<span class="variable constant_">INFO</span>, <span class="string">&quot;WebSocketServiceTest SendData test_str length: &quot;</span> &lt;&lt; longString.<span class="title function_">size</span>());</span><br><span class="line">        <span class="title function_">EXPECT_TRUE</span>(app.<span class="title class_">SendDataEx</span>(<span class="number">0x2</span>, channel_id, test_str));</span><br><span class="line">        app.<span class="title class_">CheckSendDataEvent</span>(channel_id, result);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">app.<span class="title class_">Close</span>(channel_id);</span><br><span class="line">app.<span class="title class_">CheckCloseEvent</span>(channel_id, result);</span><br><span class="line"><span class="title function_">EXPECT_EQ</span>(result, <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">    <span class="title class_">CWebServiceTestInstManager</span>::<span class="title class_">GetInstance</span>().<span class="title class_">TearDown</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="CURLE-AGAIN-处理和重试逻辑"><a href="#CURLE-AGAIN-处理和重试逻辑" class="headerlink" title="CURLE_AGAIN 处理和重试逻辑"></a><code>CURLE_AGAIN</code> 处理和重试逻辑</h2><p>需要增加 <code>CURLE_AGAIN</code> 等待逻辑，等待 socket 就绪时，再重发数据。</p><p>以下是基于 poll 事件驱动的伪代码：</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;curl/curl.<span class="property">h</span>&gt;</span><br><span class="line">#include &lt;string&gt;</span><br><span class="line">#include &lt;poll.<span class="property">h</span>&gt;</span><br><span class="line"></span><br><span class="line"><span class="attr">std</span>::string curle_again_cache; </span><br><span class="line"></span><br><span class="line">struct pollfd poll_fd;</span><br><span class="line"></span><br><span class="line"><span class="title class_">CURLcode</span> <span class="title function_">try_send_data</span>(<span class="params">CURL* curl, <span class="keyword">const</span> std::string&amp; data</span>) &#123;</span><br><span class="line"></span><br><span class="line">  <span class="title class_">CURLcode</span> res;</span><br><span class="line">  size_t sent = <span class="number">0</span>;  </span><br><span class="line"></span><br><span class="line">  res = <span class="title function_">curl_easy_send</span>(curl, data.<span class="title function_">c_str</span>(), data.<span class="title function_">size</span>(), &amp;sent);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span>(res == <span class="variable constant_">CURLE_AGAIN</span>) &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 缓存数据 </span></span><br><span class="line">    curle_again_cache = data;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 注册curl socket</span></span><br><span class="line">    poll_fd.<span class="property">fd</span> = <span class="title function_">curl_easy_getfd</span>(curl);</span><br><span class="line">    poll_fd.<span class="property">events</span> = <span class="variable constant_">POLLOUT</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 等待socket就绪</span></span><br><span class="line">    <span class="title function_">poll</span>(&amp;poll_fd, <span class="number">1</span>, -<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 重试发送</span></span><br><span class="line">    <span class="keyword">return</span> <span class="title function_">try_send_data</span>(curl, curle_again_cache);</span><br><span class="line">  </span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">int <span class="title function_">main</span>(<span class="params"></span>) &#123;</span><br><span class="line"></span><br><span class="line">  <span class="variable constant_">CURL</span>* curl = <span class="title function_">curl_easy_init</span>();</span><br><span class="line">  <span class="attr">std</span>::string data = <span class="string">&quot;123&quot;</span>; </span><br><span class="line"></span><br><span class="line">  <span class="title class_">CURLcode</span> ret = <span class="title function_">try_send_data</span>(curl, data);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span>(ret != <span class="variable constant_">CURLE_OK</span>) &#123;</span><br><span class="line">    <span class="comment">// 错误处理</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">curl_easy_cleanup</span>(curl);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><h2 id="troubleshooting-过程回顾"><a href="#troubleshooting-过程回顾" class="headerlink" title="troubleshooting 过程回顾"></a>troubleshooting 过程回顾</h2><ol><li>收到问题反馈后，我们随即启动 mitmproxy 代理，让同事连接这个服务器复现问题。期间准备验证所需的 build 折腾了大半天。</li><li>通过 Log 定位到具体的错误原因，Review 分析代码以后确定 Root Cause 是，我们的 WebSocket 发送数据没有处理 again 错误</li><li>讨论了大体的解决方案</li><li>分工并行: 着手修改代码，搭建测试服务器，写测试 Case，模拟复现验证问题</li><li>Fix Patch 基于测试代码联调、优化、验证，单元测试通过</li><li>给业务方提供 Fix Patch 验证，end to end case 验证通过</li><li>19/12/2023 5:10 PM 同事反馈问题，21/12/2023 6:45 PM  end to end 解决，耗时 2 天</li></ol><h2 id="两点启发"><a href="#两点启发" class="headerlink" title="两点启发"></a>两点启发</h2><p>可以复现问题，并且能 Debug，基本上离找到 Root Cause 并且解决问题不远了。我们面临的很多问题都有类似的困惑，要么很难复现，要不测试环境非常复杂。有时候解决问题的关键就是能否找到复现问题的路径并模拟出测试环境。这个 Case 中，我们自己搭建了一个测试服务器，模拟发送大文件失败的 Case，我跟同事通过修改 test case 反复修改验证我们的代码，确保没问题以后交给使用方在真是业务场景下验证。</p><p>给我的启发有两个：</p><ol><li>首先无论多么简单的代码调整都需要配上相应的测试代码，这个测试代码有助于我们在后续 toubleshooting 时快速调试、定位以及验证问题。</li><li>其次，测试环境对与模拟和复现问题非常关键，这个测试环境包括了诸如 NTLM &amp; Kerberos 等复杂的认证流程，也包括了测试路径很复杂的业务流程，比如 SSO 登录，IPD，飞机模式代理域名登录等，我们无法保证每次 Regression 测试都能 Cover 所有的点，但是可以通过代码方式模拟测试验证。</li></ol><h2 id="三个收获"><a href="#三个收获" class="headerlink" title="三个收获"></a>三个收获</h2><ol><li>我们一直没有 WebSocket 的测试服务器，虽然有单元测试代码，但也是连接产线的一个数据推送服务器，现有的测试代码只是验证了 WebSocket 的连接建立、数据收发以及连接关闭，无法根据测试需求定制 Case，为了验证解决这个问题，我们也搭建了测试服务器，优化了测试代码，这个对后续验证 WebSocket 的问题提供了便利。</li><li>优化了对 WebSocket 发送大数据的处理，增强了 WebSocket 连接的鲁棒性</li><li>搭建 WebSocket 测试服务器的过程中，我们参考了一些开源项目。在这个过程中，我们了解到了 autobahn test-suite，这是一个专用于验证 WebSocket 实现是否符合规范的测试工具。autobahn test-suite 提供了丰富的测试用例，覆盖了 WebSocket 协议的多个边界情况。通过测试，我们发现了我们的 WebSocket 客户端存在许多不符合规范的地方。因此，我们计划基于这个 test-suite 对我们的 WebSocket 客户端进行进一步的测试和改进。</li></ol>]]></content>
    
    
    <summary type="html">&lt;p&gt;详细记录了一个WebSocket发送大数据包被截断的问题排查过程&lt;/p&gt;</summary>
    
    
    
    
    <category term="网络" scheme="https://ustcqidi.github.io/tags/%E7%BD%91%E7%BB%9C/"/>
    
    <category term="WebSocket" scheme="https://ustcqidi.github.io/tags/WebSocket/"/>
    
    <category term="企业级应用程序网络问题" scheme="https://ustcqidi.github.io/tags/%E4%BC%81%E4%B8%9A%E7%BA%A7%E5%BA%94%E7%94%A8%E7%A8%8B%E5%BA%8F%E7%BD%91%E7%BB%9C%E9%97%AE%E9%A2%98/"/>
    
  </entry>
  
  <entry>
    <title>2024 年度总结</title>
    <link href="https://ustcqidi.github.io/2025/01/01/summary-2024/"/>
    <id>https://ustcqidi.github.io/2025/01/01/summary-2024/</id>
    <published>2025-01-01T09:27:25.000Z</published>
    <updated>2025-01-05T09:38:16.745Z</updated>
    
    <content type="html"><![CDATA[<p>2024总结与2025规划</p><span id="more"></span><h2 id="2024年总结"><a href="#2024年总结" class="headerlink" title="2024年总结"></a><strong>2024年总结</strong></h2><h3 id="个人成长与健身"><a href="#个人成长与健身" class="headerlink" title="个人成长与健身"></a><strong>个人成长与健身</strong></h3><p>今年是我的本命年，经历了许多值得记录的事情，其中最显著的变化来自健身。从年初开始，我正式走进健身房，每周坚持三次左右的训练。从三大项的入门阶段逐步找到训练节奏，同时尝试了跑步和羽毛球。通过这一年的坚持，我的体检指标得到了明显改善，体脂率和饮食相关的指标趋于正常。</p><p>健身不仅带来了身体上的改变，也让我内心更加平静，杂念减少，整个人的状态变得更加积极从容。</p><h3 id="工作与团队"><a href="#工作与团队" class="headerlink" title="工作与团队"></a><strong>工作与团队</strong></h3><p>今年工作上的收获也颇丰：</p><ol><li><strong>专利成果</strong>：成功通过了5项专利，进一步巩固了我的技术积累。</li><li><strong>团队发展</strong>：团队规模和工作范围扩大了近一倍。我的角色更多地转向团队目标与方向的思考，同时关注项目状态。虽然写代码的时间减少，但在团队管理和战略规划方面收获颇多。</li></ol><h3 id="生活与家庭"><a href="#生活与家庭" class="headerlink" title="生活与家庭"></a><strong>生活与家庭</strong></h3><p>生活逐渐变得简单，家庭分工也更加明确。孩子的学习状态步入正轨，周末陪伴他上羽毛球课成为一大乐事。但在家庭生活中，我对孩子和家人的投入仍显不足，精力大多集中在工作上。</p><h3 id="不足与反思"><a href="#不足与反思" class="headerlink" title="不足与反思"></a><strong>不足与反思</strong></h3><ul><li><strong>时间管理</strong>：基础技能的提升时间过少，仍需优化时间分配。</li><li><strong>情绪管理</strong>：今年情绪波动较大，多次因压力过度饮酒，情绪控制有待加强。</li></ul><hr><h2 id="2025年计划"><a href="#2025年计划" class="headerlink" title="2025年计划"></a><strong>2025年计划</strong></h2><h3 id="核心目标"><a href="#核心目标" class="headerlink" title="核心目标"></a><strong>核心目标</strong></h3><ol><li><strong>构建被动收入</strong>：增强抗风险能力，提高财务自由度。</li><li><strong>沉淀知识资产</strong>：将日常工作和技术积累系统化，形成知识库。通过博客总结经验，实现价值最大化。</li></ol><h3 id="具体行动计划"><a href="#具体行动计划" class="headerlink" title="具体行动计划"></a><strong>具体行动计划</strong></h3><ol><li><strong>财务与生活</strong><ul><li>制定系统的财务规划，优化理财方式，减少不必要的开支。</li><li>养成节俭的生活习惯，聚焦必要消费，远离浪费。</li><li>增强抗风险能力，通过投资被动收入来源确保长远的生活稳定。</li></ul></li><li><strong>工作优化</strong><ul><li>减少琐碎事务，将精力集中于关键节点、核心项目和技术决策。</li><li>定期知识分享，参与行业调研，提升个人影响力。</li><li>避免过度情绪投入，聚焦目标与效率，保持专业性。</li></ul></li><li><strong>个人提升</strong><ul><li><strong>健身</strong>：继续保持每周3次以上的锻炼频率，探索更多健身方式，增强体能与健康。</li><li><strong>知识管理</strong>：完善知识资产，记录、总结并分享工作中的经验与教训。</li><li><strong>情绪管理</strong>：控制情绪波动，避免因外界影响而分散注意力，保持内心平衡。</li></ul></li></ol><h3 id="长远愿景"><a href="#长远愿景" class="headerlink" title="长远愿景"></a><strong>长远愿景</strong></h3><p>2025年，我将以降低系统性风险为核心，确保家庭、工作和个人发展方向的平衡：</p><ul><li><strong>工作上</strong>：以提高能力为目标，确保技术深度与管理能力同步发展。</li><li><strong>生活上</strong>：通过有效规划和行动，为家庭创造更稳定的环境。</li><li><strong>个人成长</strong>：专注自我完善，实现从内而外的全面提升。</li></ul>]]></content>
    
    
    <summary type="html">&lt;p&gt;2024总结与2025规划&lt;/p&gt;</summary>
    
    
    
    
    <category term="年度总结" scheme="https://ustcqidi.github.io/tags/%E5%B9%B4%E5%BA%A6%E6%80%BB%E7%BB%93/"/>
    
  </entry>
  
  <entry>
    <title>2022 年度总结</title>
    <link href="https://ustcqidi.github.io/2023/01/02/summary-2022/"/>
    <id>https://ustcqidi.github.io/2023/01/02/summary-2022/</id>
    <published>2023-01-02T09:35:56.000Z</published>
    <updated>2025-01-05T09:37:41.705Z</updated>
    
    <content type="html"><![CDATA[<p>2022 像是被偷走的一年，整年浑浑噩噩，不知道时间用在了哪里。焦虑、憋屈、愤怒、小心翼翼，各种各样的情绪夹杂在一起。</p><span id="more"></span><p>2022 没有跑步、没有读书、没有娱乐、没有学习、没有旅行、没有去过电影院，工作上也没有啥亮眼的成绩。</p><p>2022 是疫情防控最严格的一年，也是对普通人生活影响最大的一年。孩子从幼儿园升到小学，每天的健康打卡雷打不动。手机相册中，绝大多数都行程码、安康码、核酸截图。</p><p>2022 也是疫情结束的一年。12 月份，疫情防疫政策全面放开，1-2周内全国人民都在躺在家里吃布洛芬。</p><p> 2022 也有一些值得开心的事情：</p><ol><li>家人、朋友都健康平安；</li><li>拔了智齿，以后再也不用担心牙齿疼了；</li><li>搬进新家，住宿条件极大改善；</li><li>升为 Manager，职业生涯有了新的挑战。</li></ol><p>2023 我不再制定虚无缥缈的愿景和目标，所有计划都量化成具体的数字。希望今年能珍惜时间，创造更多精彩的瞬间。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;2022 像是被偷走的一年，整年浑浑噩噩，不知道时间用在了哪里。焦虑、憋屈、愤怒、小心翼翼，各种各样的情绪夹杂在一起。&lt;/p&gt;</summary>
    
    
    
    
    <category term="年度总结" scheme="https://ustcqidi.github.io/tags/%E5%B9%B4%E5%BA%A6%E6%80%BB%E7%BB%93/"/>
    
  </entry>
  
  <entry>
    <title>2021 年度总结</title>
    <link href="https://ustcqidi.github.io/2021/12/27/summary-2021/"/>
    <id>https://ustcqidi.github.io/2021/12/27/summary-2021/</id>
    <published>2021-12-27T02:34:28.000Z</published>
    <updated>2025-01-05T09:28:57.733Z</updated>
    
    <content type="html"><![CDATA[<p>先看看去年立的 flag 的完成情况</p><span id="more"></span><h2 id="2021-年-flag"><a href="#2021-年-flag" class="headerlink" title="2021 年 flag"></a><strong>2021 年 flag</strong></h2><h3 id="理财-（基金定投）"><a href="#理财-（基金定投）" class="headerlink" title="理财 （基金定投）"></a><strong>理财 （基金定投）</strong></h3><ul><li>计划投入 50W</li><li>预期收益率 20%</li></ul><aside><br>💡 负收益，只能说是一塌糊涂 ！保持定投就可以了，不要瞎操作 ！！！<br><br></aside><h3 id="装修"><a href="#装修" class="headerlink" title="装修"></a><strong>装修</strong></h3><aside><br>💡 如期按照计划正常进行<br><br></aside><h3 id="跑步，控制体重在-60kg-以内"><a href="#跑步，控制体重在-60kg-以内" class="headerlink" title="跑步，控制体重在 60kg 以内"></a><strong>跑步，控制体重在 60kg 以内</strong></h3><aside><br>💡 跑步次数并不是很多，需要更加自律<br><br></aside><h3 id="减少体检异常指标"><a href="#减少体检异常指标" class="headerlink" title="减少体检异常指标"></a><strong>减少体检异常指标</strong></h3><aside><br>💡 喝酒太多<br>焦虑情绪太多<br>饮食结构 需要优化<br><br></aside><h3 id="陪儿子一起学习钢琴课程"><a href="#陪儿子一起学习钢琴课程" class="headerlink" title="陪儿子一起学习钢琴课程"></a><strong><del>陪儿子一起学习钢琴课程</del></strong></h3><aside><br>💡 儿子实在不喜欢钢琴，计划已经放弃<br><br></aside><h3 id="学完英语流利说：商务英语"><a href="#学完英语流利说：商务英语" class="headerlink" title="学完英语流利说：商务英语"></a><strong><del>学完英语流利说：商务英语</del></strong></h3><aside><br>💡 改成看 Youtube 技术 Channel<br><br></aside><h3 id="学完-CS155"><a href="#学完-CS155" class="headerlink" title="学完 CS155"></a><strong><del>学完 CS155</del></strong></h3><aside><br>💡 Project / Problem Based Learning, 没有完整地跟着课程学习<br><br></aside><h3 id="使用日程管理-App，做好任务清单、计划管理"><a href="#使用日程管理-App，做好任务清单、计划管理" class="headerlink" title="使用日程管理 App，做好任务清单、计划管理"></a><strong>使用日程管理 App，做好任务清单、计划管理</strong></h3><aside><br>💡 用 Notion 做 Worksapce，今年最大的收获<br><br></aside><h3 id="每个月看完两本书"><a href="#每个月看完两本书" class="headerlink" title="每个月看完两本书"></a><strong>每个月看完两本书</strong></h3><ul><li>用思维导图整理读书心得</li></ul><aside><br>💡 用微信读书读了 15 本，整体还是比较满意，开始把微信读书笔记整合同步到 Notion，学习卡片笔记等方法论，专业书籍读的偏少。<br><br></aside><h3 id="每周-每月总结复盘"><a href="#每周-每月总结复盘" class="headerlink" title="每周/每月总结复盘"></a><strong>每周/每月总结复盘</strong></h3><ul><li>计划完成情况</li><li>思考总结</li><li>输出 PPT</li></ul><aside><br>💡 Weekly Review 做的还比较满意<br><br></aside><hr><h2 id="2021-年回顾盘点"><a href="#2021-年回顾盘点" class="headerlink" title="2021 年回顾盘点"></a><strong>2021 年回顾盘点</strong></h2><h3 id="读了-15-本书"><a href="#读了-15-本书" class="headerlink" title="读了 15 本书"></a>读了 15 本书</h3><h3 id="跑步-200-多公里"><a href="#跑步-200-多公里" class="headerlink" title="跑步 200 多公里"></a>跑步 200 多公里</h3><h3 id="每周陪儿子打羽毛球，下象棋，教他用-Scratch-编程"><a href="#每周陪儿子打羽毛球，下象棋，教他用-Scratch-编程" class="headerlink" title="每周陪儿子打羽毛球，下象棋，教他用 Scratch 编程"></a>每周陪儿子打羽毛球，下象棋，教他用 Scratch 编程</h3><h3 id="用-Notion-做日程管理、文档、计划，整合-amp-优化了-Workflow"><a href="#用-Notion-做日程管理、文档、计划，整合-amp-优化了-Workflow" class="headerlink" title="用 Notion 做日程管理、文档、计划，整合 &amp; 优化了 Workflow"></a>用 Notion 做日程管理、文档、计划，整合 &amp; 优化了 Workflow</h3><h3 id="装修-1"><a href="#装修-1" class="headerlink" title="装修"></a>装修</h3><h3 id="924-剁手"><a href="#924-剁手" class="headerlink" title="924 剁手"></a>924 剁手</h3><p>太轻易相信别人，血的教训</p><h3 id="身体健康"><a href="#身体健康" class="headerlink" title="身体健康"></a><strong>身体健康</strong></h3><ul><li>体检情况比 2020 年严重，各种亚健康问题凸显</li></ul><h3 id="家庭关系"><a href="#家庭关系" class="headerlink" title="家庭关系"></a>家庭关系</h3><ul><li>跟父母关系处理的比较糟糕，沟通太少</li><li>更多的亲子陪伴时间</li><li>跟老婆的沟通太少</li></ul><h3 id="Side-Project"><a href="#Side-Project" class="headerlink" title="Side Project"></a>Side Project</h3><ul><li>完整上线了 Google Slide 插件</li></ul><hr><h2 id="2022-年度目标"><a href="#2022-年度目标" class="headerlink" title="2022 年度目标"></a>2022 年度目标</h2><h3 id="保持健康"><a href="#保持健康" class="headerlink" title="保持健康"></a>保持健康</h3><ul><li>不酗酒、少熬夜</li><li>午休</li><li>保持积极、愉悦的心情</li><li>少吃腌制食品，减少外出就餐</li><li>保持运动</li></ul><h3 id="家庭关系-1"><a href="#家庭关系-1" class="headerlink" title="家庭关系"></a>家庭关系</h3><ul><li>多跟家人聊天、沟通</li><li>保持和谐的家庭氛围，减少抱怨，不要轻易发脾气</li><li>亲子陪伴：羽毛球、象棋、Scratch 编程</li></ul><h3 id="个人成长"><a href="#个人成长" class="headerlink" title="个人成长"></a>个人成长</h3><ul><li>学习提高认知以及专业能力<ul><li>Blog</li><li>YouTube Channel</li></ul></li><li>戒骄戒躁，每天晚上读读书</li><li>戒掉不良习惯，争取摆脱最近几年的 “魔咒”</li><li>高质量完成工作</li><li>控制情绪，减少内耗</li></ul><h3 id="财务"><a href="#财务" class="headerlink" title="财务"></a>财务</h3><ul><li>保持定投，不要瞎操作。尽量不亏钱。</li></ul>]]></content>
    
    
    <summary type="html">&lt;p&gt;先看看去年立的 flag 的完成情况&lt;/p&gt;</summary>
    
    
    
    
    <category term="年度总结" scheme="https://ustcqidi.github.io/tags/%E5%B9%B4%E5%BA%A6%E6%80%BB%E7%BB%93/"/>
    
  </entry>
  
  <entry>
    <title>TUN &amp; TAP</title>
    <link href="https://ustcqidi.github.io/2021/05/24/tun-tap/"/>
    <id>https://ustcqidi.github.io/2021/05/24/tun-tap/</id>
    <published>2021-05-24T15:04:02.000Z</published>
    <updated>2025-01-04T02:21:58.770Z</updated>
    
    <content type="html"><![CDATA[<p>最近在看 “Let’s Code Your own TCP/IP Stack” 系列文章，有点类似 “自己动手写 TCP/IP” 协议栈之类的。乍一看貌似一个不可能完成的任务，但是作者通过 5 篇文章逐步讲解，我居然看懂了。</p><span id="more"></span><p>这其中大多数都是介绍网络协议的实现细节，比如 ARP 的 Header 格式、解析，TCP 的三次握手细节，重传算法，拥塞控制机制的实现等。我个人比较感兴趣的是，应用层如何拿到原始的网络数据包？</p><p>作者开篇就介绍了，使用 TUN &amp; TAP 即可。晚上查阅了一些资料，真是打开了一扇门的感觉。原来我们平时使用的 VPN, 虚拟化技术之类的都得依赖 TUN &amp; TAP。</p><p>这篇文章零散记录了 TAP 和 TUN 的一些资料。</p><h2 id="什么是-TUN-TAP"><a href="#什么是-TUN-TAP" class="headerlink" title="什么是 TUN/TAP"></a>什么是 TUN/TAP</h2><blockquote><p>TUN/TAP provides packet reception and transmission for user space programs.</p></blockquote><p>TUN 和 TAP Linux 内核的虚拟网络设备 </p><ul><li>TUN 是 network tunnel driver 的缩写</li><li>TAP 是 <strong><em>Test Anything Protocol</em></strong> 的缩写</li></ul><p>TUN 和 TAP 在网络栈中的关系如图：</p><p><img src="https://s3.us-west-2.amazonaws.com/secure.notion-static.com/418ae0e8-cf80-4cbc-8c5f-df72fe6f2ef2/Untitled.png?X-Amz-Algorithm=AWS4-HMAC-SHA256&amp;X-Amz-Credential=AKIAT73L2G45O3KS52Y5%2F20210524%2Fus-west-2%2Fs3%2Faws4_request&amp;X-Amz-Date=20210524T151315Z&amp;X-Amz-Expires=86400&amp;X-Amz-Signature=951d7993e5024d3c045da9b1c3b6ed6fa891cdcadd7acff1efbf76d7444c610c&amp;X-Amz-SignedHeaders=host&amp;response-content-disposition=filename%20%3D%22Untitled.png%22" alt></p><h2 id="TUN-和-TAP-的应用场景"><a href="#TUN-和-TAP-的应用场景" class="headerlink" title="TUN 和 TAP 的应用场景"></a>TUN 和 TAP 的应用场景</h2><ul><li>The first one is <strong>VPN</strong> software (such as OpenVPN). In this scenario, the kernel sends its network packets to the tun or tap devices. The VPN software will then encrypt and forward them to the other side of the VPN tunnel where they get decrypted and delivered to their destination.</li><li>The second area in which tun and tap devices are popular are system virtualization/emulation packages.</li><li>NAT</li></ul><h2 id="实验"><a href="#实验" class="headerlink" title="实验"></a>实验</h2><ul><li>OpenVPN 创建 tun</li><li>代码读取 tun 数据</li></ul><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul><li><a href="https://backreference.org/2010/03/26/tuntap-interface-tutorial/">tuntap-interface-tutorial</a></li><li>虚拟化技术：libvirt &amp; QEMU &amp; KVM</li></ul>]]></content>
    
    
    <summary type="html">&lt;p&gt;最近在看 “Let’s Code Your own TCP/IP Stack” 系列文章，有点类似 “自己动手写 TCP/IP” 协议栈之类的。乍一看貌似一个不可能完成的任务，但是作者通过 5 篇文章逐步讲解，我居然看懂了。&lt;/p&gt;</summary>
    
    
    
    
    <category term="网络" scheme="https://ustcqidi.github.io/tags/%E7%BD%91%E7%BB%9C/"/>
    
  </entry>
  
  <entry>
    <title>几个好习惯</title>
    <link href="https://ustcqidi.github.io/2021/03/28/2021-habit/"/>
    <id>https://ustcqidi.github.io/2021/03/28/2021-habit/</id>
    <published>2021-03-28T14:00:08.000Z</published>
    <updated>2025-01-04T02:21:58.654Z</updated>
    
    <content type="html"><![CDATA[<p>最近养成了几个很不错的习惯。</p><h3 id="更高效的笔记系统和事务管理"><a href="#更高效的笔记系统和事务管理" class="headerlink" title="更高效的笔记系统和事务管理"></a>更高效的笔记系统和事务管理</h3><p>学会使用 Notion 打造自己的知识体系和工作笔记，利用 Dashboard 管理日常事务。在 <a href="https://ustcqidi.github.io/2020/02/11/note">关于工作笔记</a> 这篇文章中，描述了我是如何一步一步优化我的笔记系统。</p><span id="more"></span><p>Notion 是目前我接触到的最优秀的笔记系统，相比 git 托管笔记，有以下优势：</p><ul><li>全端自动同步，不需要反复 push &amp; pull</li><li>并且支持模板导入，可以参考一些大佬的模板做自己的知识体系搭建、日常事务管理</li><li>功能特别丰富，社区比较完善</li><li>自带日程管理功能，不需要额外下载日程管理软件</li><li>比较丰富的排版方式，支持代码块、pdf、图片、dashboard、list、图表等等</li><li>支持一键导出为 html，markdown 方便入库备份</li><li>使用浏览器插件一键导入正在浏览的网页，便于引用外部资料</li><li>网页端使用体验很棒，不需要下载 app 也可以高效完成笔记，手机端可以直接访问网页书签，快速查看个人笔记</li><li>所见即所得的编辑效果，默认排版也很美观</li><li>核心功能全部免费</li></ul><p>目前我正在逐步把我工作笔记迁移到 Notion。</p><p>另外，也优化了工作笔记结构：</p><ul><li>Daily Work Memo: 记录每天的工作计划、问题细节等等，有点流水账的意思</li><li>Weekly Review: 每周的总结反思，包括工作周报、个人成长以及家庭生活等各方面的反思</li><li>Upcoming Release: 使用 JIRA Filter 方式自动生成每个 Release Task 表格，高效方便</li><li>Research &amp; Enhancement: 记录一些需有优化但是不紧急的调研任务</li><li>Pending Tickets: 记录一些正在处理的 tickets，也是使用 JIRA Filter 管理的</li></ul><h3 id="关注优秀的-Youtube-Channel"><a href="#关注优秀的-Youtube-Channel" class="headerlink" title="关注优秀的 Youtube Channel"></a>关注优秀的 Youtube Channel</h3><p>特别提一下，我是在 Youtube 看了 “老石谈芯” 的这期 <a href="https://www.youtube.com/watch?v=NHTMs1z88uA&amp;list=PLZbVf-X2rhjYnNwWZRb4wIgBjiyAsGKTL&amp;index=8">这就是最棒的效率软件！如果不是，我倒想试试你的 | Notion使用技巧分享</a> 开始种草 Notion 的。尽管我不是做芯片的，但是这个 Channel 的视频让我受益匪浅。</p><p>我以前也关注过不少技术相关 Channel, 但其实没有仔细利用好这些资源。Youtube 上有海量优质的技术视频，对提高自己的技术视野还有英语听力非常有帮助。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;最近养成了几个很不错的习惯。&lt;/p&gt;
&lt;h3 id=&quot;更高效的笔记系统和事务管理&quot;&gt;&lt;a href=&quot;#更高效的笔记系统和事务管理&quot; class=&quot;headerlink&quot; title=&quot;更高效的笔记系统和事务管理&quot;&gt;&lt;/a&gt;更高效的笔记系统和事务管理&lt;/h3&gt;&lt;p&gt;学会使用 Notion 打造自己的知识体系和工作笔记，利用 Dashboard 管理日常事务。在 &lt;a href=&quot;https://ustcqidi.github.io/2020/02/11/note&quot;&gt;关于工作笔记&lt;/a&gt; 这篇文章中，描述了我是如何一步一步优化我的笔记系统。&lt;/p&gt;</summary>
    
    
    
    
    <category term="杂记" scheme="https://ustcqidi.github.io/tags/%E6%9D%82%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>2020 年度总结</title>
    <link href="https://ustcqidi.github.io/2020/12/27/summary-2020/"/>
    <id>https://ustcqidi.github.io/2020/12/27/summary-2020/</id>
    <published>2020-12-27T13:29:49.000Z</published>
    <updated>2025-01-04T02:21:58.747Z</updated>
    
    <content type="html"><![CDATA[<p>先看看去年立的 flag 的完成情况</p><h3 id="2019年-flag"><a href="#2019年-flag" class="headerlink" title="2019年 flag"></a>2019年 flag</h3><ul><li>看 2-3 部高分纪录片<ul><li>零散地看了《一本好书》、李永乐老师、PaperClip、一席演讲 等</li><li>需要明确要看什么纪录片，并且很好利用碎片化时间<span id="more"></span></li></ul></li><li>读书/听书，电台<ul><li>每天上下班基本都会听书，今年听了这些：<ul><li>聊斋志异</li><li>红楼梦</li><li>鬼吹灯</li><li>美的沉思</li><li>价值投资</li><li>童林传</li><li>大唐惊雷</li><li>四世同堂</li></ul></li><li>三好坏男孩</li><li>故事 FM</li></ul></li><li>1-2 周写一篇博客，书写有助于思考<ul><li>全年写了 13 篇 blog，主要是工作中遇到的问题沉淀，比如 网络、security、libcurl 等</li></ul></li><li>每晚坐在书桌前至少半小时<ul><li>喝酒+晃晃悠悠频率有高</li></ul></li><li>尽量控制情绪，不要乱发脾气<ul><li>继续加油</li></ul></li><li>买改善房<ul><li>完成</li></ul></li><li>带老婆孩子去一次日本<ul><li>疫情原因今年一年基本都没出门，只去了一次九华山</li></ul></li><li>工作日保证 7点左右起床</li></ul><h3 id="理财计划"><a href="#理财计划" class="headerlink" title="理财计划"></a>理财计划</h3><ol><li>资金计划 10w+</li><li>周期1年</li><li>期望收益 10%+</li></ol><p>基本完成，今天收益 1w 左右，年中买房清仓一次。不然会赚的更多，今年计划基本完成。</p><h3 id="身体健康"><a href="#身体健康" class="headerlink" title="身体健康"></a>身体健康</h3><ul><li>少喝酒、保持身体健康、体检一次<ul><li>跟同事酒局有点多，要控制频率</li></ul></li><li>改善饮食结构，少油腻，少盐<ul><li>少吃了不少腌制类食物，经常吃公司的酸奶水果捞和减肥餐，还需要减少聚餐频率</li></ul></li><li>坚持定期跑步<ul><li>天气冷的时候没有跑</li></ul></li><li>争取每天午睡，晚上 11:00 左右睡觉，最晚不要超过 11:30 <ul><li>工作日的时候能做到早睡早起</li></ul></li></ul><hr><h2 id="2020-年回顾盘点"><a href="#2020-年回顾盘点" class="headerlink" title="2020 年回顾盘点"></a>2020 年回顾盘点</h2><h3 id="买房"><a href="#买房" class="headerlink" title="买房"></a>买房</h3><h3 id="兵棋推演项目"><a href="#兵棋推演项目" class="headerlink" title="兵棋推演项目"></a>兵棋推演项目</h3><p>赚了 10w 块，吸取了很多教训。</p><ol><li>极其耗费时间和精力，性价比极地。应该多思考如何增加被动收入。</li><li>不能轻易相信任何人，无脑地跟任何人掏心掏肺，会被别有用心的人利用。</li></ol><h3 id="libcurl-patch"><a href="#libcurl-patch" class="headerlink" title="libcurl patch"></a>libcurl patch</h3><p>提交了一个 patch 给 libcurl</p><p><a href="https://github.com/curl/curl/pull/5914">https://github.com/curl/curl/pull/5914</a></p><h3 id="917-学习小组"><a href="#917-学习小组" class="headerlink" title="917 学习小组"></a>917 学习小组</h3><p>难忘的封闭学习体验</p><h3 id="跑步"><a href="#跑步" class="headerlink" title="跑步"></a>跑步</h3><h3 id="身体健康-1"><a href="#身体健康-1" class="headerlink" title="身体健康"></a>身体健康</h3><p>一堆亚健康问题：轻度脂肪肝、尿酸高、高血压等等。急需调整饮食结构、生活方式。</p><h2 id="2021-年-flag"><a href="#2021-年-flag" class="headerlink" title="2021 年 flag"></a>2021 年 flag</h2><h3 id="理财-（基金定投）"><a href="#理财-（基金定投）" class="headerlink" title="理财 （基金定投）"></a>理财 （基金定投）</h3><ul><li>计划投入 50W</li><li>预期收益率 20%</li></ul><h3 id="装修"><a href="#装修" class="headerlink" title="装修"></a>装修</h3><h3 id="跑步，控制体重在-60kg-以内"><a href="#跑步，控制体重在-60kg-以内" class="headerlink" title="跑步，控制体重在 60kg 以内"></a>跑步，控制体重在 60kg 以内</h3><h3 id="减少体检异常指标"><a href="#减少体检异常指标" class="headerlink" title="减少体检异常指标"></a>减少体检异常指标</h3><h3 id="陪儿子一起学习钢琴课程"><a href="#陪儿子一起学习钢琴课程" class="headerlink" title="陪儿子一起学习钢琴课程"></a>陪儿子一起学习钢琴课程</h3><h3 id="学完英语流利说：商务英语"><a href="#学完英语流利说：商务英语" class="headerlink" title="学完英语流利说：商务英语"></a>学完英语流利说：商务英语</h3><h3 id="学完-CS155"><a href="#学完-CS155" class="headerlink" title="学完 CS155"></a>学完 CS155</h3><h3 id="使用日程管理-App，做好任务清单、计划管理"><a href="#使用日程管理-App，做好任务清单、计划管理" class="headerlink" title="使用日程管理 App，做好任务清单、计划管理"></a>使用日程管理 App，做好任务清单、计划管理</h3><h3 id="每个月看完两本书"><a href="#每个月看完两本书" class="headerlink" title="每个月看完两本书"></a>每个月看完两本书</h3><ul><li>用思维导图整理读书心得</li></ul><h3 id="每周-每月总结复盘"><a href="#每周-每月总结复盘" class="headerlink" title="每周/每月总结复盘"></a>每周/每月总结复盘</h3><ul><li>计划完成情况</li><li>思考总结</li><li>输出 PPT</li></ul><hr><h2 id="常用-App-年度总结"><a href="#常用-App-年度总结" class="headerlink" title="常用 App 年度总结"></a>常用 App 年度总结</h2><h3 id="音乐"><a href="#音乐" class="headerlink" title="音乐"></a>音乐</h3><p><img src="/2020/12/27/summary-2020/neteasy_music.jpeg" alt></p><h3 id="豆瓣"><a href="#豆瓣" class="headerlink" title="豆瓣"></a>豆瓣</h3><p><img src="/2020/12/27/summary-2020/douban.jpg" alt></p><h3 id="微信读书"><a href="#微信读书" class="headerlink" title="微信读书"></a>微信读书</h3><p><img src="/2020/12/27/summary-2020/weread.png" alt></p><h3 id="理财"><a href="#理财" class="headerlink" title="理财"></a>理财</h3><p><img src="/2020/12/27/summary-2020/alipay.png" alt></p><h3 id="bilibili"><a href="#bilibili" class="headerlink" title="bilibili"></a>bilibili</h3><p><img src="/2020/12/27/summary-2020/bilibili.png" alt></p><h3 id="跑步-1"><a href="#跑步-1" class="headerlink" title="跑步"></a>跑步</h3><p><img src="/2020/12/27/summary-2020/joyrun.png" alt></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;先看看去年立的 flag 的完成情况&lt;/p&gt;
&lt;h3 id=&quot;2019年-flag&quot;&gt;&lt;a href=&quot;#2019年-flag&quot; class=&quot;headerlink&quot; title=&quot;2019年 flag&quot;&gt;&lt;/a&gt;2019年 flag&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;看 2-3 部高分纪录片&lt;ul&gt;
&lt;li&gt;零散地看了《一本好书》、李永乐老师、PaperClip、一席演讲 等&lt;/li&gt;
&lt;li&gt;需要明确要看什么纪录片，并且很好利用碎片化时间&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;/ul&gt;</summary>
    
    
    
    
    <category term="年度总结" scheme="https://ustcqidi.github.io/tags/%E5%B9%B4%E5%BA%A6%E6%80%BB%E7%BB%93/"/>
    
  </entry>
  
  <entry>
    <title>发出一个网络请求有多难</title>
    <link href="https://ustcqidi.github.io/2020/10/18/network-issue/"/>
    <id>https://ustcqidi.github.io/2020/10/18/network-issue/</id>
    <published>2020-10-18T12:51:04.000Z</published>
    <updated>2025-01-04T02:21:58.733Z</updated>
    
    <content type="html"><![CDATA[<p>我们已经习惯各种 App 带来的便利：聊天、订外卖、叫车、刷抖音。其实看是简单的操作比如打开一个网站，发送一个表情，都涉及大量网络请求。完成一次网络请求其实也挺难的，我相信所有用户量大的 App 一定都做了很多应用层面的网络优化。</p><span id="more"></span><h2 id="网络请求流程"><a href="#网络请求流程" class="headerlink" title="网络请求流程"></a>网络请求流程</h2><p>先看一下一个网络请求需要经历哪些流程，现在绝大多数的网站 / App 都是 https, 所以这里只描述 https 请求的流程。</p><p>首先是域名解析，通过域名查询对应的 host IP 地址；然后就是 TCP 连接这个 IP 地址；最后是 TLS 握手建立安全的数据通道，而后就可以收发数据了。</p><p>看上去整个流通也挺简单的，但是这里面每一步都有可能出现问题。</p><h3 id="DNS"><a href="#DNS" class="headerlink" title="DNS"></a>DNS</h3><ul><li>运营商劫持</li><li>域名污染</li><li>本地配置 host</li><li>DNS 服务配置有问题</li></ul><h3 id="TCP"><a href="#TCP" class="headerlink" title="TCP"></a>TCP</h3><ul><li>防火墙限制</li></ul><h3 id="TLS"><a href="#TLS" class="headerlink" title="TLS"></a>TLS</h3><ul><li>SSL Inspector</li><li>自签名证书</li><li>抓包工具</li><li>代理服务器</li></ul><h2 id="Proxy"><a href="#Proxy" class="headerlink" title="Proxy"></a>Proxy</h2><h3 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h3><ul><li>PAC</li></ul><h3 id="认证"><a href="#认证" class="headerlink" title="认证"></a>认证</h3><ul><li>BASIC</li><li>Digest</li><li>NTLM</li><li>Kerbose</li></ul>]]></content>
    
    
    <summary type="html">&lt;p&gt;我们已经习惯各种 App 带来的便利：聊天、订外卖、叫车、刷抖音。其实看是简单的操作比如打开一个网站，发送一个表情，都涉及大量网络请求。完成一次网络请求其实也挺难的，我相信所有用户量大的 App 一定都做了很多应用层面的网络优化。&lt;/p&gt;</summary>
    
    
    
    
    <category term="网络" scheme="https://ustcqidi.github.io/tags/%E7%BD%91%E7%BB%9C/"/>
    
  </entry>
  
  <entry>
    <title>给 curl 提了一个 patch</title>
    <link href="https://ustcqidi.github.io/2020/10/18/curl-patch/"/>
    <id>https://ustcqidi.github.io/2020/10/18/curl-patch/</id>
    <published>2020-10-18T12:16:23.000Z</published>
    <updated>2025-01-04T02:21:58.692Z</updated>
    
    <content type="html"><![CDATA[<p>最近把 curl 升级到了 7.71.1 版本，然后 NTLM 认证又又又又出问题了。问题表现是开启了抓包工具后 NTLM 认证就一直失败，给官方报了一个 Issue，<a href="https://github.com/curl/curl/issues/5911">NTLM authentication fails when using proxy without username and password</a></p><p>然后尝试给官方提了一个 Pull Request，最终被合到 master 分支。<a href="https://github.com/curl/curl/pull/5914">Pull Request</a></p><p>这是我第一次给开源社区贡献代码，还是挺激动的。</p><p>有几点收获这里记录一下：</p><ul><li>发现开源项目问题，主动分析原因，思考解决方法</li><li>如果解决了问题，思考一下能否回馈开源社区，尽量找到 Root Cause，不要用 Workaround</li><li>通常开源项目都有自己的代码风格，提交 Pull Request 时要遵守项目的代码风格、通过各种静态检查。</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;最近把 curl 升级到了 7.71.1 版本，然后 NTLM 认证又又又又出问题了。问题表现是开启了抓包工具后 NTLM 认证就一直失败，给官方报了一个 Issue，&lt;a href=&quot;https://github.com/curl/curl/issues/5911&quot;&gt;NT</summary>
      
    
    
    
    
    <category term="网络" scheme="https://ustcqidi.github.io/tags/%E7%BD%91%E7%BB%9C/"/>
    
    <category term="cURL" scheme="https://ustcqidi.github.io/tags/cURL/"/>
    
  </entry>
  
  <entry>
    <title>libcurl 考古</title>
    <link href="https://ustcqidi.github.io/2020/08/08/curl-history/"/>
    <id>https://ustcqidi.github.io/2020/08/08/curl-history/</id>
    <published>2020-08-08T14:08:49.000Z</published>
    <updated>2025-01-04T02:21:58.688Z</updated>
    
    <content type="html"><![CDATA[<p>晚上在浏览 curl github 上的 tag, 好奇心驱使。我翻到了 curl 的第一个 release tag: curl-6_5</p><span id="more"></span><p><img src="/2020/08/08/curl-history/tag.png" alt></p><p>tag 的创建日期是 2000年5月14日，至今已经20余年了，当时我才读小学，有种穿越时空的奇妙感觉。</p><p>一直想学习一些 curl 的源码，可惜最新版本的代码量太大了，数据结构和调用关系错综复杂无从入手。第一版本应该是只支持了最基础的功能，果断下载。</p><p>相比之下，代码量少了很多。结构也简单明了不少。</p><p>对照着官方的release note，以及commit id，学习大佬怎么一步一步把 curl 做成今天的样子，真有挖到宝藏的感觉。</p><p>这是官方 doc. 里最早的几个版本的 release note</p><p><img src="/2020/08/08/curl-history/releasenote.png" alt></p><h2 id="附录"><a href="#附录" class="headerlink" title="附录"></a>附录</h2><h3 id="RESOURCES-文件记录了一些-RFC-文档"><a href="#RESOURCES-文件记录了一些-RFC-文档" class="headerlink" title="RESOURCES 文件记录了一些 RFC 文档"></a>RESOURCES 文件记录了一些 RFC 文档</h3><ul><li>RFC 959  - Defines how FTP works</li><li>RFC 1738 - Uniform Resource Locators</li><li>RFC 1777 - defines the LDAP protocol</li><li>RFC 1808 - Relative Uniform Resource Locators</li><li><p>RFC 1867 - Form-based File Upload in HTML</p></li><li><p>RFC 1950 - ZLIB Compressed Data Format Specification</p></li><li>RFC 1951 - DEFLATE Compressed Data Format Specification</li><li><p>RFC 1952 - gzip compression format</p></li><li><p>RFC 1959 - LDAP URL syntax</p></li><li>RFC 2045-2049 - Everything you need to know about MIME! (needed for form based upload)</li><li>RFC 2068 - HTTP 1.1 (obsoleted by RFC 2616)</li><li>RFC 2109 - HTTP State Management Mechanism (cookie stuff)</li><li>Netscape’s specification at <a href="http://www.netscape.com/newsref/std/cookie_spec.html">http://www.netscape.com/newsref/std/cookie_spec.html</a></li><li>RFC 2183 - “The Content-Disposition Header Field”</li><li>RFC 2229 - “A Dictionary Server Protocol”</li><li>RFC 2231 - “MIME Parameter Value and Encoded Word Extensions: Character Sets, Languages, and Continuations”</li><li>RFC 2388 - “Returning Values from Forms: multipart/form-data” Use this as an addition to the 1867 </li><li>RFC 2396 - “Uniform Resource Identifiers: Generic Syntax and Semantics” </li><li>RFC 2428 - “FTP Extensions for IPv6 and NATs”</li><li>RFC 2616 - HTTP 1.1</li><li>RFC 2617 - HTTP Authentication</li></ul><h3 id="FEATURES-文件记录了支持的-feature"><a href="#FEATURES-文件记录了支持的-feature" class="headerlink" title="FEATURES 文件记录了支持的 feature"></a>FEATURES 文件记录了支持的 feature</h3><ol><li><p>Misc</p><ul><li>full URL syntax</li><li>custom maximum download time</li><li>custom least download speed acceptable</li><li>multiple URLs</li><li>guesses protocol from host name unless specified</li><li>uses .netrc</li><li>progress bar/time specs while downloading</li><li>PROXY environment variables support</li><li>config file support</li><li>compiles on win32</li></ul></li><li><p>HTTP</p><ul><li>GET</li><li>PUT</li><li>HEAD</li><li>POST</li><li>multipart POST</li><li>authentication</li><li>resume</li><li>follow redirects</li><li>custom HTTP request</li><li>cookie get/send</li><li>custom headers (that can replace internally generated headers)</li><li>custom user-agent string</li><li>custom referer string</li><li>range</li><li>proxy authentication</li><li>time conditions</li><li>via http-proxy</li></ul></li><li><p>HTTPS (*1)</p><ul><li>(all the HTTP features)</li><li>using certificates</li><li>via http-proxy</li></ul></li><li><p>FTP</p><ul><li>download</li><li>authentication</li><li>PORT or PASV</li><li>single file size information (compare to HTTP HEAD)</li><li>‘type=’ URL support</li><li>dir listing</li><li>dir listing names-only</li><li>upload</li><li>upload append</li><li>upload via http-proxy as HTTP PUT</li><li>download resume</li><li>upload resume</li><li>QUOT commands (before and/or after the transfer)</li><li>simple “range” support</li><li>via http-proxy</li></ul></li><li><p>TELNET</p><ul><li>connection negotiation</li><li>stdin/stdout I/O</li></ul></li><li><p>LDAP (*2)</p><ul><li>full LDAP URL support</li></ul></li><li><p>DICT</p><ul><li>extended DICT URL support</li></ul></li><li><p>GOPHER</p><ul><li>GET</li><li>via http-proxy</li></ul></li><li><p>FILE</p><ul><li><p>URL support</p><p>  <em>1 = requires OpenSSL  </em>2 = requires OpenLDAP</p></li></ul></li></ol>]]></content>
    
    
    <summary type="html">&lt;p&gt;晚上在浏览 curl github 上的 tag, 好奇心驱使。我翻到了 curl 的第一个 release tag: curl-6_5&lt;/p&gt;</summary>
    
    
    
    
    <category term="网络" scheme="https://ustcqidi.github.io/tags/%E7%BD%91%E7%BB%9C/"/>
    
    <category term="cURL" scheme="https://ustcqidi.github.io/tags/cURL/"/>
    
  </entry>
  
  <entry>
    <title>我的时间和精力管理</title>
    <link href="https://ustcqidi.github.io/2020/07/09/time-mgr/"/>
    <id>https://ustcqidi.github.io/2020/07/09/time-mgr/</id>
    <published>2020-07-08T23:08:49.000Z</published>
    <updated>2025-01-04T02:21:58.770Z</updated>
    
    <content type="html"><![CDATA[<p>早上跑步时在思考一个问题：如何合理地分配时间和精力，才能高效地完成工作、平衡家庭生活、个人娱乐、健身以及学习。</p><p>其实从考研时开始我就一直在关注时间分配，尝试过各种大家耳熟能详的方法：番茄工作法、四象限管理。</p><span id="more"></span><p>但是简单盘点回顾一下，其实我做的不够好，至少效果不够好：</p><ul><li>工作上每个项目基本是被 push 着走，虽然近期有一些客观原因，但本质上是我自己做的不够好。</li><li>工作上非常缺乏定期思考、总结！目前我的“总结”停留在记录工作事务流水账的层面上。严重缺乏思考，包括专业和业务方面。</li></ul><p>究其原因，可能跟我平时工作习惯很大。合理分配管理精力非常重要，这篇文章盘点总结了一下我工作和生活的时间分配原则，按照计划执行一段时间再看看效果。</p><h3 id="工作事务类型盘点及时间分配"><a href="#工作事务类型盘点及时间分配" class="headerlink" title="工作事务类型盘点及时间分配"></a>工作事务类型盘点及时间分配</h3><h4 id="事务类型"><a href="#事务类型" class="headerlink" title="事务类型"></a>事务类型</h4><ul><li>各种会议，比如项目讨论、技术方案讨论、公共模块日常答疑、troubleshooting 会议</li><li>Ticket</li><li>线上 Crash</li><li>项目日常事务</li><li>总结与学习</li></ul><h4 id="时间分配原则"><a href="#时间分配原则" class="headerlink" title="时间分配原则"></a>时间分配原则</h4><ul><li>上午处理邮件、回复 ticket、开会、技术调研</li><li>下午3点以后IM设置成请勿打扰、非紧急会议不参加</li><li>下午3点以后专注 coding、技术调研</li><li>如没有紧急问题，每周5下午用来学习+总结</li><li>每天安排一个最高优先级事务</li></ul><h3 id="个人娱乐、健身、学习"><a href="#个人娱乐、健身、学习" class="headerlink" title="个人娱乐、健身、学习"></a>个人娱乐、健身、学习</h3><ul><li>每周六打一次羽毛球/游泳</li><li>微信读书 (午休时)</li><li>公开课、演讲 (午休时)</li><li>脱口秀电台 (午休时)</li><li>音乐 (工作背景音乐)</li><li>热剧、电影 (午休时)</li><li>蜻蜓FM听书 (上下班通勤、洗碗时)</li><li>保持早起跑步习惯</li></ul><h3 id="家庭生活"><a href="#家庭生活" class="headerlink" title="家庭生活"></a>家庭生活</h3><ul><li>每晚陪儿子读书</li><li>周六陪儿子上英语课</li><li>周六陪父母吃饭</li></ul>]]></content>
    
    
    <summary type="html">&lt;p&gt;早上跑步时在思考一个问题：如何合理地分配时间和精力，才能高效地完成工作、平衡家庭生活、个人娱乐、健身以及学习。&lt;/p&gt;
&lt;p&gt;其实从考研时开始我就一直在关注时间分配，尝试过各种大家耳熟能详的方法：番茄工作法、四象限管理。&lt;/p&gt;</summary>
    
    
    
    
    <category term="杂记" scheme="https://ustcqidi.github.io/tags/%E6%9D%82%E8%AE%B0/"/>
    
    <category term="工作效率" scheme="https://ustcqidi.github.io/tags/%E5%B7%A5%E4%BD%9C%E6%95%88%E7%8E%87/"/>
    
  </entry>
  
  <entry>
    <title>最近的几件大事</title>
    <link href="https://ustcqidi.github.io/2020/07/07/diary-7-7/"/>
    <id>https://ustcqidi.github.io/2020/07/07/diary-7-7/</id>
    <published>2020-07-07T00:55:43.000Z</published>
    <updated>2025-01-04T02:21:58.692Z</updated>
    
    <content type="html"><![CDATA[<ol><li><p>交首付，办贷款<br>希望股票行权收益能及时到账</p></li><li><p>处理 12 分交通违章<br>花钱真的可使鬼推磨</p></li><li><p>体检<br>2-3 年没体检了，希望一切顺利</p></li></ol><p>PS: 早睡早起、坚持跑步、定期盘点总结工作生活。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;ol&gt;
&lt;li&gt;&lt;p&gt;交首付，办贷款&lt;br&gt;希望股票行权收益能及时到账&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;处理 12 分交通违章&lt;br&gt;花钱真的可使鬼推磨&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;体检&lt;br&gt;2-3 年没体检了，希望一切顺利&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;PS</summary>
      
    
    
    
    
    <category term="杂记" scheme="https://ustcqidi.github.io/tags/%E6%9D%82%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>Security</title>
    <link href="https://ustcqidi.github.io/2020/06/03/security/"/>
    <id>https://ustcqidi.github.io/2020/06/03/security/</id>
    <published>2020-06-03T14:05:11.000Z</published>
    <updated>2025-01-04T02:21:58.743Z</updated>
    
    <content type="html"><![CDATA[<p>最近整个公司是谈 “Security” 色变，每周一个 Release 也折腾的我们够呛。这个期间我们修复了无数个安全漏洞，这里简单总结一下，细节就不描述了。</p><span id="more"></span><h3 id="缓冲区溢出"><a href="#缓冲区溢出" class="headerlink" title="缓冲区溢出"></a>缓冲区溢出</h3><h3 id="SQL-注入"><a href="#SQL-注入" class="headerlink" title="SQL 注入"></a>SQL 注入</h3><h3 id="敏感信息泄漏-（PII-Cookie-Token）"><a href="#敏感信息泄漏-（PII-Cookie-Token）" class="headerlink" title="敏感信息泄漏 （PII/Cookie/Token）"></a>敏感信息泄漏 （PII/Cookie/Token）</h3><h3 id="Remote-Code-Execution"><a href="#Remote-Code-Execution" class="headerlink" title="Remote Code Execution"></a>Remote Code Execution</h3><h3 id="各种第三方库升级"><a href="#各种第三方库升级" class="headerlink" title="各种第三方库升级"></a>各种第三方库升级</h3><h3 id="加密-哈希算法升级"><a href="#加密-哈希算法升级" class="headerlink" title="加密/哈希算法升级"></a>加密/哈希算法升级</h3><h3 id="第三方开源库-License-审核"><a href="#第三方开源库-License-审核" class="headerlink" title="第三方开源库 License 审核"></a>第三方开源库 License 审核</h3><h3 id="政策法规方面"><a href="#政策法规方面" class="headerlink" title="政策法规方面"></a>政策法规方面</h3><h3 id="代码缺陷"><a href="#代码缺陷" class="headerlink" title="代码缺陷"></a>代码缺陷</h3><h4 id="Buffer-Overflow"><a href="#Buffer-Overflow" class="headerlink" title="Buffer Overflow"></a>Buffer Overflow</h4><h4 id="User-after-free"><a href="#User-after-free" class="headerlink" title="User after free"></a>User after free</h4><h4 id="Double-free"><a href="#Double-free" class="headerlink" title="Double free"></a>Double free</h4>]]></content>
    
    
    <summary type="html">&lt;p&gt;最近整个公司是谈 “Security” 色变，每周一个 Release 也折腾的我们够呛。这个期间我们修复了无数个安全漏洞，这里简单总结一下，细节就不描述了。&lt;/p&gt;</summary>
    
    
    
    
    <category term="安全" scheme="https://ustcqidi.github.io/tags/%E5%AE%89%E5%85%A8/"/>
    
  </entry>
  
  <entry>
    <title>开发基础库需要注意什么</title>
    <link href="https://ustcqidi.github.io/2020/05/01/basic-func-test/"/>
    <id>https://ustcqidi.github.io/2020/05/01/basic-func-test/</id>
    <published>2020-05-01T12:21:56.000Z</published>
    <updated>2025-01-04T02:21:58.664Z</updated>
    
    <content type="html"><![CDATA[<p>最新公司产品需要全面优化加密算法，使用 AES-GCM 代替原来的 AES-CBC，我需要实现封装这个新的加解密接口。</p><span id="more"></span><p>实现这个基础方法，其实需要考虑的 case 还是挺多的，比如是否有多余的内存拷贝，针对无效输入做 buffer 越界保护，大小端以及各种异常情况下是否有内存泄漏等等。</p><p>这个基础方法并不复杂，但是考虑到所有产品线，所有客户端，甚至服务端都会调用这个接口做加解密，所以我们还是做了很多测试，以保证万无一失。</p><h3 id="文档文档文档"><a href="#文档文档文档" class="headerlink" title="文档文档文档"></a>文档文档文档</h3><p>文档非常非常重要，否则你每次都需要跟你的用户（基础库使用方）解释细节，直至暴走，怀疑人生。</p><h3 id="代码-Review"><a href="#代码-Review" class="headerlink" title="代码 Review"></a>代码 Review</h3><p>代码 Review 常常能发现一些低级手抖错误，我实现这个方法时没有仔细考虑内存拷贝的开销，Review 代码时同事指出来了，后来想了一下，大量数据加解密调用时，频繁地内存拷贝可能会导致内存碎片，影响性能。</p><h3 id="单元测试"><a href="#单元测试" class="headerlink" title="单元测试"></a>单元测试</h3><p>单元测试简直是 Common SDK 开发者的保命法宝。我在 <a href="https://ustcqidi.github.io/2019/01/14/chromium-testing/">Chromium 工程源码是如何测试的</a> 中提到过，Chromium 中所有基础库的代码都有大量的单元测试和性能测试。实现这个加解密方法时我写了大量的测试用例，测试了几波以后基本胸有成竹了。另外，如果产品源码编译时间很久的话，使用单元测试工程来开发会极大地提高效率。 </p><p>Daniel Stenberg 大哥有一个 <a href="https://www.youtube.com/watch?v=U572Hq8LiWw">curl development with Daniel</a> 系列，直播撸 curl 的 feature。围观了后，发现大哥也是写完代码后，用 testing 工程验证。</p><h3 id="Fuzzing-测试"><a href="#Fuzzing-测试" class="headerlink" title="Fuzzing 测试"></a>Fuzzing 测试</h3><p>Fuzzing 测试就是传入各种无效、随机、操蛋的参数，测试方法是否有异常，比如 Crash, 内存泄漏等等。通常需要写一些脚本随机生成脏数据，然后频繁地调用目标方法。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;最新公司产品需要全面优化加密算法，使用 AES-GCM 代替原来的 AES-CBC，我需要实现封装这个新的加解密接口。&lt;/p&gt;</summary>
    
    
    
    
    <category term="基础库" scheme="https://ustcqidi.github.io/tags/%E5%9F%BA%E7%A1%80%E5%BA%93/"/>
    
    <category term="单元测试" scheme="https://ustcqidi.github.io/tags/%E5%8D%95%E5%85%83%E6%B5%8B%E8%AF%95/"/>
    
    <category term="性能测试" scheme="https://ustcqidi.github.io/tags/%E6%80%A7%E8%83%BD%E6%B5%8B%E8%AF%95/"/>
    
    <category term="Fuzzing 测试" scheme="https://ustcqidi.github.io/tags/Fuzzing-%E6%B5%8B%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>libcurl 陷阱</title>
    <link href="https://ustcqidi.github.io/2020/03/27/libcurl-pits/"/>
    <id>https://ustcqidi.github.io/2020/03/27/libcurl-pits/</id>
    <published>2020-03-27T15:09:58.000Z</published>
    <updated>2025-01-04T02:21:58.732Z</updated>
    
    <content type="html"><![CDATA[<p>记录项目使用 libcurl 时遇到的一些坑，持续更新！</p><span id="more"></span><h2 id="动态库卸载-Crash"><a href="#动态库卸载-Crash" class="headerlink" title="动态库卸载 Crash"></a>动态库卸载 Crash</h2><p>libcurl 作为动态库一部分，在动态库卸载时如果有 pending 的 dns 解析请求可能会导致 Crash。</p><ul><li><a href="https://github.com/curl/curl/issues/997">相关issue</a></li><li><a href="https://curl.haxx.se/libcurl/c/curl_global_cleanup.html">官方文档说明</a></li></ul><blockquote><p>curl_global_cleanup does not block waiting for any libcurl-created threads to terminate (such as threads used for name resolving). If a module containing libcurl is dynamically unloaded while libcurl-created threads are still running then your program may crash or other corruption may occur. We recommend you do not run libcurl from any module that may be unloaded dynamically. This behavior may be addressed in the future.</p></blockquote><h2 id="Connection-Cache-复用问题"><a href="#Connection-Cache-复用问题" class="headerlink" title="Connection Cache 复用问题"></a>Connection Cache 复用问题</h2><p>网络切换/中断、App前后台切换，可能会导致 Connection Cache 的 socket 连接实例失效，但是 libcurl 没有针对这种情况做 Connection Cache 的及时清理，导致连接复用时可能会出现连接失败。这个问题在 iOS, Mac 平台上很容易出现。</p><ul><li><a href="https://curl.haxx.se/mail/lib-2016-07/0032.html">相关讨论</a></li></ul><blockquote><p>I’ve got a situation where connection cache is kept through internet connection change (Wifi -&gt; 3G for example). After network change cURL will try to reuse the connection from cache and will fail and open a new connection. The problem is that it takes ~20 seconds to understand that the connection was dead.</p></blockquote><h2 id="WebSocket-支持"><a href="#WebSocket-支持" class="headerlink" title="WebSocket 支持"></a>WebSocket 支持</h2><p>主要思路是使用 libcurl 作 https 通信，具体的 websocket 协议解析与封装需要自己实现。但是有个问题，libcurl 官方是不支持 websocket，因此 websocket 请求实例拿到 response 以后。这个实例可能会被 re-use。当然，民间也有一些基于 libcurl 支持 websocket 的讨论。</p><ul><li><a href="https://curl.haxx.se/video/curlup-2017/2017-03-19_05_Michael_Kaufmann_Websocket_support_for_curl.mp4">https://curl.haxx.se/video/curlup-2017/2017-03-19_05_Michael_Kaufmann_Websocket_support_for_curl.mp4</a></li><li><a href="https://github.com/bagder/curl/pull/86">https://github.com/bagder/curl/pull/86</a></li><li><a href="https://gist.github.com/mkauf/5ce3574ce821b2cf02986d4d701bfa86">https://gist.github.com/mkauf/5ce3574ce821b2cf02986d4d701bfa86</a></li></ul><h2 id="NTLM-认证"><a href="#NTLM-认证" class="headerlink" title="NTLM 认证"></a>NTLM 认证</h2><p>这次升级 libcurl 到 7.71.1 版本后，NTLM 认证在 Android 和 iOS 上认证都会失败。之前升级 libcurl 到 7.55.1 时也遇到过 NTLM 认证的问题。</p><p>相比其他认证方式，NTLM 认证过程更为复杂，整体流程如下图：</p><p><img src="/2020/03/27/libcurl-pits/ntlm.png" alt></p><p>Client 和 Server 需要几次“握手”交换认证信息，并且要求这几次“握手”的连接实例是同一个。http(s) 是无状态连接，libcurl 本身也有 connection reuse 机制，所以可能有各种原因会导致，交换 NTLM 认证信息的几次连接可能使用的不是同一个实例，这就会导致认证失败。</p><p>我提交过几个 issue 给 libcurl，5911 这个 issue 是官方其中一个版本引入的 regression，我提了一个 PR Fix 了</p><p>Issues:</p><ul><li><a href="https://github.com/curl/curl/issues/3647">https://github.com/curl/curl/issues/3647</a></li><li><a href="https://github.com/curl/curl/issues/5693">https://github.com/curl/curl/issues/5693</a></li><li><a href="https://github.com/curl/curl/issues/5911">https://github.com/curl/curl/issues/5911</a></li></ul><p>Pull Request: </p><ul><li><a href="https://github.com/curl/curl/pull/5914">https://github.com/curl/curl/pull/5914</a></li></ul><p>这些使用上的坑也具有指导意义。</p><h3 id="Could-not-re-use-the-connection-for-NTLM-challenge-and-always-create-a-new-connection"><a href="#Could-not-re-use-the-connection-for-NTLM-challenge-and-always-create-a-new-connection" class="headerlink" title="Could not re-use the connection for NTLM challenge, and always create a new connection"></a>Could not re-use the connection for NTLM challenge, and always create a new connection</h3><h4 id="Root-Cause"><a href="#Root-Cause" class="headerlink" title="Root Cause"></a>Root Cause</h4><p>Connection 42 is still name resolving, can’t reuse. So create a new connection 43, which cause NTLM challenge failed, and cause once more redirect. It’s very wired because Connection 42 have left intact just now.</p><h4 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h4><p>define the macro HAVE_GETPEERNAME</p><h4 id="abnormal-logs"><a href="#abnormal-logs" class="headerlink" title="abnormal logs"></a>abnormal logs</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">[my_curl_debug_callback] This: 525811577016 TEXT :Connection #42 to host exchange2016.com left intact</span><br><span class="line">[my_curl_debug_callback] This: 525811577016 TEXT :Issue another request to this URL: &#x27;https://exchange2016.com/EWS/Exchange.asmx&#x27;</span><br><span class="line">[my_curl_debug_callback] This: 525811577016 TEXT :Found bundle for host exchange2016.com: 0x7a72130c30 [serially]</span><br><span class="line">[my_curl_debug_callback] This: 525811577016 TEXT :Connection #11 is still name resolving, can&#x27;t reuse</span><br><span class="line">[my_curl_debug_callback] This: 525811577016 TEXT :Connection #23 is still name resolving, can&#x27;t reuse</span><br><span class="line">[my_curl_debug_callback] This: 525811577016 TEXT :Connection #24 is still name resolving, can&#x27;t reuse</span><br><span class="line">[my_curl_debug_callback] This: 525811577016 TEXT :Connection #25 is still name resolving, can&#x27;t reuse</span><br><span class="line">[my_curl_debug_callback] This: 525811577016 TEXT :Connection #26 is still name resolving, can&#x27;t reuse</span><br><span class="line">[my_curl_debug_callback] This: 525811577016 TEXT :Connection #29 is still name resolving, can&#x27;t reuse</span><br><span class="line">[my_curl_debug_callback] This: 525811577016 TEXT :Connection #31 is still name resolving, can&#x27;t reuse</span><br><span class="line">[my_curl_debug_callback] This: 525811577016 TEXT :Connection #42 is still name resolving, can&#x27;t reuse</span><br><span class="line">[my_curl_debug_callback] This: 525811577016 TEXT :Hostname exchange2016.com was found in DNS cache</span><br><span class="line">[my_curl_debug_callback] This: 525811577016 TEXT :  Trying 10.100.87.8:443...</span><br><span class="line">[my_curl_debug_callback] This: 525811577016 TEXT :Connected to exchange2016.com () port 443 (#43)</span><br></pre></td></tr></table></figure><h4 id="normal-logs"><a href="#normal-logs" class="headerlink" title="normal logs"></a>normal logs</h4><p>Re-using existing connection! (43) for NTLM challenge</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[my_curl_debug_callback] This: 5412312248 TEXT :Connection #43 to host exchange2013.com left intact</span><br><span class="line">[my_curl_debug_callback] This: 5412312248 TEXT :Issue another request to this URL: &#x27;https://exchange2013.com/EWS/Exchange.asmx&#x27;</span><br><span class="line">[my_curl_debug_callback] This: 5412312248 TEXT :Found bundle for host exchange2013.com: 0x2823928e0 [serially]</span><br><span class="line">[my_curl_debug_callback] This: 5412312248 TEXT :Re-using existing connection! (#43) with host exchange2013.com</span><br><span class="line">[my_curl_debug_callback] This: 5412312248 TEXT :Connected to exchange2013.com () port 443 (#43)</span><br></pre></td></tr></table></figure><h3 id="Connection-cache-is-full-closing-the-oldest-one-Which-cause-could-not-re-use-the-connection-for-NTLM-challenge"><a href="#Connection-cache-is-full-closing-the-oldest-one-Which-cause-could-not-re-use-the-connection-for-NTLM-challenge" class="headerlink" title="Connection cache is full, closing the oldest one. Which cause could not re-use the connection for NTLM challenge"></a>Connection cache is full, closing the oldest one. Which cause could not re-use the connection for NTLM challenge</h3><h4 id="Root-Cause-1"><a href="#Root-Cause-1" class="headerlink" title="Root Cause"></a>Root Cause</h4><ul><li><p>Connection cache is full, closing the oldest one. So create a new connection 50, which cause NTLM challenge failed, and cause once more redirect. But why Closing connection 49, it seems to the latest one not oldest one.</p></li><li><p>websocket connections make the connection cache full, and can not be closed</p></li></ul><p>As following code snippet, for websocket connection we will set the connect_only as true, which will never be candidate connection for close.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">// conncache.c</span><br><span class="line">struct connectdata *</span><br><span class="line">Curl_conncache_extract_oldest(struct Curl_easy *data) &#123;</span><br><span class="line">    </span><br><span class="line">    ....</span><br><span class="line">    </span><br><span class="line">    while(curr) &#123;</span><br><span class="line">      conn = curr-&gt;ptr;</span><br><span class="line"></span><br><span class="line">      if(!CONN_INUSE(conn) &amp;&amp; !conn-&gt;data &amp;&amp; !conn-&gt;bits.close &amp;&amp;</span><br><span class="line">         !conn-&gt;bits.connect_only) &#123;</span><br><span class="line">        /* Set higher score for the age passed since the connection was used */</span><br><span class="line">        score = Curl_timediff(now, conn-&gt;lastused);</span><br><span class="line"></span><br><span class="line">        if(score &gt; highscore) &#123;</span><br><span class="line">          highscore = score;</span><br><span class="line">          conn_candidate = conn;</span><br><span class="line">          bundle_candidate = bundle;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      curr = curr-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    ....</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="abnormal-logs-1"><a href="#abnormal-logs-1" class="headerlink" title="abnormal logs"></a>abnormal logs</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">[my_curl_debug_callback] This: 5412314808 TEXT :Connected to exchange2013.com () port 443 (#49)</span><br><span class="line">[my_curl_debug_callback] This: 5412314808 TEXT :ALPN, offering http/1.1</span><br><span class="line">[my_curl_debug_callback] This: 5412314808 TEXT :TLSv1.3 (OUT), TLS handshake, Client hello (1):</span><br><span class="line">[my_curl_debug_callback] This: 5412314808 TEXT :TLSv1.3 (IN), TLS handshake, Server hello (2):</span><br><span class="line">[my_curl_debug_callback] This: 5412314808 TEXT :TLSv1.2 (IN), TLS handshake, Certificate (11):</span><br><span class="line">[my_curl_debug_callback] This: 5412314808 TEXT :TLSv1.2 (IN), TLS handshake, Server key exchange (12):</span><br><span class="line">[my_curl_debug_callback] This: 5412314808 TEXT :TLSv1.2 (IN), TLS handshake, Server finished (14):</span><br><span class="line">[my_curl_debug_callback] This: 5412314808 TEXT :TLSv1.2 (OUT), TLS handshake, Client key exchange (16):</span><br><span class="line">[my_curl_debug_callback] This: 5412314808 TEXT :TLSv1.2 (OUT), TLS change cipher, Change cipher spec (1):</span><br><span class="line">[my_curl_debug_callback] This: 5412314808 TEXT :TLSv1.2 (OUT), TLS handshake, Finished (20):</span><br><span class="line">[my_curl_debug_callback] This: 5412314808 TEXT :TLSv1.2 (IN), TLS handshake, Finished (20):</span><br><span class="line">[my_curl_debug_callback] This: 5412314808 TEXT :SSL connection using TLSv1.2 / ECDHE-RSA-AES256-SHA384</span><br><span class="line">[my_curl_debug_callback] This: 5412314808 TEXT :ALPN, server did not agree to a protocol</span><br><span class="line">[my_curl_debug_callback] This: 5412314808 TEXT :Server certificate:</span><br><span class="line">[my_curl_debug_callback] This: 5412314808 TEXT : subject: CN=*.com</span><br><span class="line">[my_curl_debug_callback] This: 5412314808 TEXT : start date: Apr 22 00:00:00 2020 GMT</span><br><span class="line">[my_curl_debug_callback] This: 5412314808 TEXT : expire date: Apr 22 23:59:59 2022 GMT</span><br><span class="line">[my_curl_debug_callback] This: 5412314808 TEXT : subjectAltName: host &quot;exchange2013.com&quot; matched cert&#x27;s &quot;*.com&quot;</span><br><span class="line">[my_curl_debug_callback] This: 5412314808 TEXT : issuer: C=GB; ST=Greater Manchester; L=Salford; O=Sectigo Limited; CN=Sectigo RSA Domain Validation Secure Server CA</span><br><span class="line">[my_curl_debug_callback] This: 5412314808 TEXT : SSL certificate verify ok.</span><br><span class="line">[my_curl_debug_callback] This: 5412314808 TEXT :Server auth using NTLM with user &#x27;foo-bar&#x27;</span><br><span class="line">[my_curl_debug_callback] This: 5412314808 HEADER_OUT :POST /EWS/Exchange.asmx HTTP/1.1</span><br><span class="line">[my_curl_debug_callback] This: 5412314808 TEXT :Mark bundle as not supporting multiuse</span><br><span class="line">[my_curl_debug_callback] This: 5412314808 HEADER_IN :HTTP/1.1 401 Unauthorized</span><br><span class="line">[my_curl_debug_callback] This: 5412314808 HEADER_IN :Server: Microsoft-IIS/7.5</span><br><span class="line">[my_curl_debug_callback] This: 5412314808 HEADER_IN :request-id: 9811034b-32e4-45e5-b300-5be1efb8d8f3</span><br><span class="line">[my_curl_debug_callback] This: 5412314808 HEADER_IN :WWW-Authenticate: balabalabalabalabalabalabalabalabalabala</span><br><span class="line">[my_curl_debug_callback] This: 5412314808 HEADER_IN :WWW-Authenticate: Negotiate</span><br><span class="line">[my_curl_debug_callback] This: 5412314808 HEADER_IN :X-Powered-By: ASP.NET</span><br><span class="line">my_curl_debug_callback] This: 5412314808 HEADER_IN :X-FEServer: WIN-1TRC9B5MS6A</span><br><span class="line">[my_curl_debug_callback] This: 5412314808 HEADER_IN :Date: Thu, 16 Jul 2020 19:02:54 GMT</span><br><span class="line">[my_curl_debug_callback] This: 5412314808 HEADER_IN :Content-Length: 0</span><br><span class="line">[my_curl_debug_callback] This: 5412314808 HEADER_IN :</span><br><span class="line">[my_curl_debug_callback] This: 5412314808 TEXT :Connection cache is full, closing the oldest one.</span><br><span class="line">[my_curl_debug_callback] This: 5412314808 TEXT :Closing connection 49</span><br><span class="line">[my_curl_debug_callback] This: 5412314808 TEXT :TLSv1.2 (OUT), TLS alert, close notify (256):</span><br><span class="line">[my_curl_debug_callback] This: 5412314808 TEXT :Issue another request to this URL: &#x27;https://exchange2013.com/EWS/Exchange.asmx&#x27;</span><br><span class="line">[my_curl_debug_callback] This: 5412314808 TEXT :Found bundle for host exchange2013.com: 0x2823b9680 [serially]</span><br><span class="line">[my_curl_debug_callback] This: 5412314808 TEXT :Hostname exchange2013.com was found in DNS cache</span><br><span class="line">[my_curl_debug_callback] This: 5412314808 TEXT :  Trying 10.100.87.7:443...</span><br><span class="line">[my_curl_debug_callback] This: 5412314808 TEXT :Connected to exchange2013.com () port 443 (#50)</span><br></pre></td></tr></table></figure><h3 id="NTLM-Authenticate-always-failed-in-curl-7-71-1-if-Use-proxy-without-username-and-password"><a href="#NTLM-Authenticate-always-failed-in-curl-7-71-1-if-Use-proxy-without-username-and-password" class="headerlink" title="NTLM Authenticate always failed in curl 7.71.1 if Use proxy without username and password"></a>NTLM Authenticate always failed in curl 7.71.1 if Use proxy without username and password</h3><p>开启抓包工具使用没有用户名或密码的代理服务器，NTLM 就认证就会失败。</p><p>分析如下：</p><p>this code snippet seems to the condition alway as true if i have config proxy server without password, which maybe cause failed to reuse the connections for NTLM challenge.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">#ifndef CURL_DISABLE_PROXY</span><br><span class="line">        /* Same for Proxy NTLM authentication */</span><br><span class="line">        if(wantProxyNTLMhttp) &#123;</span><br><span class="line">          /* Both check-&gt;http_proxy.user and check-&gt;http_proxy.passwd can be</span><br><span class="line">           * NULL */</span><br><span class="line">          if(!check-&gt;http_proxy.user || !check-&gt;http_proxy.passwd)</span><br><span class="line">            continue;</span><br><span class="line"></span><br><span class="line">          if(strcmp(needle-&gt;http_proxy.user, check-&gt;http_proxy.user) ||</span><br><span class="line">             strcmp(needle-&gt;http_proxy.passwd, check-&gt;http_proxy.passwd))</span><br><span class="line">            continue;</span><br><span class="line">        &#125;</span><br><span class="line">        else if(check-&gt;proxy_ntlm_state != NTLMSTATE_NONE) &#123;</span><br><span class="line">          /* Proxy connection is using NTLM auth but we don&#x27;t want NTLM */</span><br><span class="line">          continue;</span><br><span class="line">        &#125;</span><br><span class="line">#endif</span><br></pre></td></tr></table></figure><h4 id="abnormal-logs-2"><a href="#abnormal-logs-2" class="headerlink" title="abnormal logs"></a>abnormal logs</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">Line 6374: [18048:16268:09-04/10:49:34.941:INFO:(389)]TEXT :Found bundle for host xxx.com: 0xf781740 [serially]</span><br><span class="line">Line 6376: [18048:16268:09-04/10:49:34.941:INFO:(389)]TEXT :Re-using existing connection! (#8) with proxy 127.0.0.1</span><br><span class="line">Line 6378: [18048:16268:09-04/10:49:34.941:INFO:(389)]TEXT :Connected to 127.0.0.1 (127.0.0.1) port 8888 (#8)</span><br><span class="line">Line 6380: [18048:16268:09-04/10:49:34.941:INFO:(389)]TEXT :Server auth using NTLM with user &#x27;balabala&#x27;</span><br><span class="line">Line 6382: [18048:16268:09-04/10:49:34.941:INFO:(389)]HEADER_OUT :POST /EWS/Exchange.asmx HTTP/1.1</span><br><span class="line">Line 6385: [18048:16268:09-04/10:49:35.018:INFO:(389)]TEXT :Mark bundle as not supporting multiuse</span><br><span class="line">Line 6387: [18048:16268:09-04/10:49:35.018:DEBUG:(362)]HEADER_IN :HTTP/1.1 401 Unauthorized</span><br><span class="line">Line 6391: [18048:16268:09-04/10:49:35.018:DEBUG:(362)]HEADER_IN :Server: Microsoft-IIS/8.5</span><br><span class="line">Line 6395: [18048:16268:09-04/10:49:35.018:DEBUG:(362)]HEADER_IN :request-id: 8ae68c1b-25f1-449f-b911-0808b135cb44</span><br><span class="line">Line 6399: [18048:16268:09-04/10:49:35.018:DEBUG:(362)]HEADER_IN :WWW-Authenticate: NTLM TlRMTVNTUAACAAAAGAAYADgAAAAFgomiPXW5AdNSBywAAAAAAAAAAAoBCgFQAAAABgOAJQAAAA9FAFgAQwBIAEEATgBHAEUAMgAwADEANgACABgARQBYAEMASABBAE4ARwBFADIAMAAxADYAAQAeAFcASQBOAC0ARgA2AEYAMgBOAEkATQBOAFMASABNAAQAMABlAHgAYwBoAGEAbgBnAGUAMgAwADEANgAuAHMAdQB6AGgAbwB1AC4AegBvAG8AbQADAFAAVwBJAE4ALQBGADYARgAyAE4ASQBNAE4AUwBIAE0ALgBlAHgAYwBoAGEAbgBnAGUAMgAwADEANgAuAHMAdQB6AGgAbwB1AC4AegBvAG8AbQAFADAAZQB4AGMAaABhAG4AZwBlADIAMAAxADYALgBzAHUAegBoAG8AdQAuAHoAbwBvAG0ABwAIAEvkOQZmgtYBAAAAAA==</span><br><span class="line">Line 6403: [18048:16268:09-04/10:49:35.018:DEBUG:(362)]HEADER_IN :WWW-Authenticate: Negotiate</span><br><span class="line">Line 6407: [18048:16268:09-04/10:49:35.018:DEBUG:(362)]HEADER_IN :X-Powered-By: ASP.NET</span><br><span class="line">Line 6411: [18048:16268:09-04/10:49:35.018:DEBUG:(362)]HEADER_IN :X-FEServer: WIN-F6F2NIMNSHM</span><br><span class="line">Line 6415: [18048:16268:09-04/10:49:35.018:DEBUG:(362)]HEADER_IN :Date: Fri, 04 Sep 2020 02:49:35 GMT</span><br><span class="line">Line 6419: [18048:16268:09-04/10:49:35.018:DEBUG:(362)]HEADER_IN :Content-Length: 0</span><br><span class="line">Line 6423: [18048:16268:09-04/10:49:35.018:DEBUG:(362)]HEADER_IN :Proxy-Support: Session-Based-Authentication</span><br><span class="line">Line 6427: [18048:16268:09-04/10:49:35.018:DEBUG:(362)]HEADER_IN :</span><br><span class="line">Line 6429: [18048:16268:09-04/10:49:35.018:INFO:(389)]HEADER_IN :</span><br><span class="line">Line 6431: [18048:16268:09-04/10:49:35.018:INFO:(389)]TEXT :Connection #8 to host 127.0.0.1 left intact</span><br><span class="line">Line 6433: [18048:16268:09-04/10:49:35.018:INFO:(389)]TEXT :Issue another request to this URL: &#x27;https://xxx.com/EWS/Exchange.asmx&#x27;</span><br><span class="line">Line 6435: [18048:16268:09-04/10:49:35.018:INFO:(389)]TEXT :Found bundle for host xxx.com: 0xf781740 [serially]</span><br><span class="line">Line 6437: [18048:16268:09-04/10:49:35.018:INFO:(389)]TEXT :NTLM-proxy picked AND auth done set, clear picked!</span><br><span class="line">Line 6439: [18048:16268:09-04/10:49:35.018:INFO:(389)]TEXT :Hostname 127.0.0.1 was found in DNS cache</span><br><span class="line">Line 6441: [18048:16268:09-04/10:49:35.018:INFO:(389)]TEXT :  Trying 127.0.0.1:8888...</span><br><span class="line">Line 6445: [18048:16268:09-04/10:49:35.029:INFO:(389)]TEXT :Connected to 127.0.0.1 (127.0.0.1) port 8888 (#13)</span><br><span class="line">Line 6447: [18048:16268:09-04/10:49:35.029:INFO:(389)]TEXT :allocate connect buffer!</span><br><span class="line">Line 6449: [18048:16268:09-04/10:49:35.029:INFO:(389)]TEXT :Establish HTTP proxy tunnel to xxx.com:443</span><br></pre></td></tr></table></figure><p>出来混早晚是要还的，技术债务也是如此。少一些 Workaround，多一点 Root Cause。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;记录项目使用 libcurl 时遇到的一些坑，持续更新！&lt;/p&gt;</summary>
    
    
    
    
    <category term="网络" scheme="https://ustcqidi.github.io/tags/%E7%BD%91%E7%BB%9C/"/>
    
    <category term="cURL" scheme="https://ustcqidi.github.io/tags/cURL/"/>
    
  </entry>
  
  <entry>
    <title>提高效率的工具集</title>
    <link href="https://ustcqidi.github.io/2020/03/27/work-perf-tools/"/>
    <id>https://ustcqidi.github.io/2020/03/27/work-perf-tools/</id>
    <published>2020-03-27T12:29:59.000Z</published>
    <updated>2025-01-04T02:21:58.771Z</updated>
    
    <content type="html"><![CDATA[<p>工欲善其事，必先利其器。有效地使用工具能帮助我们快速定位、解决问题，提高工作效率。<a href="https://ustcqidi.github.io/2020/03/14/work-perf/">用脚本把繁杂、重复的工作自动化</a> 记录了我工作中写的一些提高工作效率的脚本。这篇文章主要记录一些我平时常用的工具。这两篇文章都会持续更新！</p><span id="more"></span><h2 id="XMind"><a href="#XMind" class="headerlink" title="XMind"></a>XMind</h2><p>思维导图工具，在我遇到一个没有头绪的问题、读比较复杂的代码或者文章时，会用思维导图工具整理思路。</p><h2 id="WebSequenceDiagrams"><a href="#WebSequenceDiagrams" class="headerlink" title="WebSequenceDiagrams"></a><a href="https://www.websequencediagrams.com/">WebSequenceDiagrams</a></h2><p>在线时序图编辑器，整理业务流程、代码逻辑神器</p><h2 id="mermaid"><a href="#mermaid" class="headerlink" title="mermaid"></a><a href="https://github.com/mjbvz/vscode-markdown-mermaid">mermaid</a></h2><p>VSCode 插件，可以在 markdown 文档中直接编辑时序图，替代在线时序图编辑器</p><h2 id="draw-io"><a href="#draw-io" class="headerlink" title="draw.io"></a><a href="https://draw.io">draw.io</a></h2><p>在线绘图工具，我通常用来绘制业务架构图</p><h2 id="gitee-私人仓库"><a href="#gitee-私人仓库" class="headerlink" title="gitee 私人仓库"></a>gitee 私人仓库</h2><p>存放、同步各种资料：工作笔记、重要文件、读书笔记、学习笔记等</p><h2 id="IDA"><a href="#IDA" class="headerlink" title="IDA"></a>IDA</h2><p>反汇编神器，准确定位具体 Crash 指令，解决 Crash 神器</p><h2 id="Wireshark"><a href="#Wireshark" class="headerlink" title="Wireshark"></a>Wireshark</h2><p>网络抓包/分析工具，需要加强学习</p><h2 id="Win-Notepad"><a href="#Win-Notepad" class="headerlink" title="[Win] Notepad++"></a>[Win] Notepad++</h2><p>看日志神器</p><h2 id="Win-Everything"><a href="#Win-Everything" class="headerlink" title="[Win] Everything"></a>[Win] Everything</h2><p>全盘文件搜索神器，方便查找各种文件，必不可少的工具之一</p><h2 id="Win-Total-Commander"><a href="#Win-Total-Commander" class="headerlink" title="[Win] Total Commander"></a>[Win] Total Commander</h2><p>骨灰级文件管理器，自定义快捷键高效跳转到高频使用的文件夹位置，一键在当前目录下打开 git bash 提交代码特别方便。另外还有双窗口视图，再也不用打开一堆文件管理器窗口了。更多强大功能还在挖掘中</p><h2 id="Win-WinDbg"><a href="#Win-WinDbg" class="headerlink" title="[Win] WinDbg"></a>[Win] WinDbg</h2><p>Win 调试工具，各种调试技巧挖掘中，需要加强学习</p><h2 id="Mac-iTerm-oh-my-zsh"><a href="#Mac-iTerm-oh-my-zsh" class="headerlink" title="[Mac] iTerm/oh-my-zsh"></a>[Mac] iTerm/oh-my-zsh</h2><p>Mac 命令行神器</p><h2 id="Mac-Alfred"><a href="#Mac-Alfred" class="headerlink" title="[Mac] Alfred"></a>[Mac] Alfred</h2><p>效率神器，但是我用的并不多，需要加强学习</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;工欲善其事，必先利其器。有效地使用工具能帮助我们快速定位、解决问题，提高工作效率。&lt;a href=&quot;https://ustcqidi.github.io/2020/03/14/work-perf/&quot;&gt;用脚本把繁杂、重复的工作自动化&lt;/a&gt; 记录了我工作中写的一些提高工作效率的脚本。这篇文章主要记录一些我平时常用的工具。这两篇文章都会持续更新！&lt;/p&gt;</summary>
    
    
    
    
    <category term="工作效率" scheme="https://ustcqidi.github.io/tags/%E5%B7%A5%E4%BD%9C%E6%95%88%E7%8E%87/"/>
    
    <category term="工具" scheme="https://ustcqidi.github.io/tags/%E5%B7%A5%E5%85%B7/"/>
    
  </entry>
  
  <entry>
    <title>用脚本把繁杂、重复的工作自动化</title>
    <link href="https://ustcqidi.github.io/2020/03/14/work-perf/"/>
    <id>https://ustcqidi.github.io/2020/03/14/work-perf/</id>
    <published>2020-03-14T12:29:59.000Z</published>
    <updated>2025-01-04T02:21:58.772Z</updated>
    
    <content type="html"><![CDATA[<p>用脚本把所有繁杂、重复的工作自动化，是提升工作效率和身心愉悦感的很棒的方法。还能大幅度地降低人为操作的失误。</p><span id="more"></span><h2 id="JNIGenerator"><a href="#JNIGenerator" class="headerlink" title="JNIGenerator"></a>JNIGenerator</h2><p>Chromium 项目中大量地用 Python 脚步实现了各种工作的自动化，比如自动生成 JNI 接口。人肉写 JNI 接口很容易出错，需要记大量的 JNI 数据类型，非常痛苦。我把 Chromium 中的 JNI 接口生成以及相关基础 JNI 封装抽出来了。参考 <a href="https://github.com/ustcqidi/JNIGenerator">JNIGenerator</a></p><h2 id="ZMBuildDownloader"><a href="#ZMBuildDownloader" class="headerlink" title="ZMBuildDownloader"></a>ZMBuildDownloader</h2><p>平时工作中每次更新项目代码，都要从4个仓库拉一遍，还得从我们的 Build FTP 上，取最新的 Binary 替换本地的。这个工作用脚本实现自动化最合适不过了。 除了更新代码，我还经常需要从 FTP 上取最新的 build 测试，或者取某个 build 的符号文件来分析一些 Crash 问题。</p><p>大体分析了一下需求以后，我写了一个简单的脚本，可以从 FTP 上获取最新或者指定版本的 build/bianry/symbols 文件，顺便写了个自动更新代码的脚本，两个脚本一搭配效率迅速提升。再也不用蛋疼地打开 FileZilla 眯着眼找 build 了。</p><h2 id="批量删除-git-仓库本地分支"><a href="#批量删除-git-仓库本地分支" class="headerlink" title="批量删除 git 仓库本地分支"></a>批量删除 git 仓库本地分支</h2><h3 id="删除所有包含-trunk的本地分支"><a href="#删除所有包含-trunk的本地分支" class="headerlink" title="删除所有包含_trunk的本地分支"></a>删除所有包含_trunk的本地分支</h3><p>git branch | grep “_trunk” | xargs git branch -D</p><h3 id="删除所有不包含trunk的本地分支"><a href="#删除所有不包含trunk的本地分支" class="headerlink" title="删除所有不包含trunk的本地分支"></a>删除所有不包含trunk的本地分支</h3><p>git branch | grep -v “trunk” | xargs git branch -D</p><h2 id="日志清理脚本"><a href="#日志清理脚本" class="headerlink" title="日志清理脚本"></a>日志清理脚本</h2><p>一键清理垃圾日志文件，释放磁盘空间</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;用脚本把所有繁杂、重复的工作自动化，是提升工作效率和身心愉悦感的很棒的方法。还能大幅度地降低人为操作的失误。&lt;/p&gt;</summary>
    
    
    
    
    <category term="工作效率" scheme="https://ustcqidi.github.io/tags/%E5%B7%A5%E4%BD%9C%E6%95%88%E7%8E%87/"/>
    
    <category term="Python" scheme="https://ustcqidi.github.io/tags/Python/"/>
    
    <category term="自动化" scheme="https://ustcqidi.github.io/tags/%E8%87%AA%E5%8A%A8%E5%8C%96/"/>
    
  </entry>
  
  <entry>
    <title>关于工作笔记</title>
    <link href="https://ustcqidi.github.io/2020/02/11/note/"/>
    <id>https://ustcqidi.github.io/2020/02/11/note/</id>
    <published>2020-02-11T09:10:39.000Z</published>
    <updated>2025-01-04T02:21:58.733Z</updated>
    
    <content type="html"><![CDATA[<p>我一直有记笔记的习惯，但是回头看来大多数情况下我的笔记质量很一般。</p><span id="more"></span><h2 id="手写"><a href="#手写" class="headerlink" title="手写"></a>手写</h2><p>刚开始实习时，用最原始的办法记笔记：手写。主要目的是整理思路、记下每周要做的事情等等。这种方式大概持续了 2-3 年，用完了好几个笔记本，但是基本没有沉淀。毕业、搬家、换工作几次事件后，基本把笔记本都弄丢了。</p><h2 id="云笔记-豆瓣"><a href="#云笔记-豆瓣" class="headerlink" title="云笔记 + 豆瓣"></a>云笔记 + 豆瓣</h2><p>开始有意识用云笔记记笔记，用过印象笔记、豆瓣。便于多端同步，现在来看当年在豆瓣上的笔记，基本属于日常事务流水账，主要汇总了每周/月所做的工作；基本没有知识总结，沉淀。</p><p><img src="/2020/02/11/note/douban_note.png" alt></p><h2 id="Git-托管"><a href="#Git-托管" class="headerlink" title="Git 托管"></a>Git 托管</h2><p>各种云笔记产品其实挺好用的，但是我使用过各种记笔记方法后，还是最倾向于使用 Git 托管笔记。</p><p>原因有以下几点：</p><ol><li>记事本 + markdown 轻量简洁的体验</li><li>便于保存各种 PPT, PDF 等文档</li><li>有提交历史，方便回滚</li></ol><p>这个习惯是从爱奇艺移动架构组工作开始的，当时我们每周都需要 PPT 总结本周工作，那段时间我积累了大量知识沉淀。</p><p><img src="/2020/02/11/note/iqiyi.png" alt></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>来了 Zoom 以后，发现很多优秀的同事都有记笔记的习惯，我们每个 task 在具体写代码之前，都需要写 Design Doc., Test Case 等文档，这对我们思考非常有用。同时也可以沉淀大量文档，文档的重要性不言而喻，长远来看一些基础、重要的工作文档化以后，可以让我们工作的更轻松。</p><p>比如今天无意中看到一位技术支持同事的 Wiki Space 写了大量详尽的文档，包括常用工具用法、常见问题的分析、业务背景总结、技术沉淀等等；我相信这些文档一定有助于让他后面的工作更轻松高效。</p><p>我也梳理了一下我的工作文档目录：</p><p><img src="/2020/02/11/note/keynote2020.png" alt></p><p>财富是一点点积累出来的，知识也是，希望今年的工作过程中能注意多总结，多沉淀。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;我一直有记笔记的习惯，但是回头看来大多数情况下我的笔记质量很一般。&lt;/p&gt;</summary>
    
    
    
    
    <category term="个人成长、知识积累" scheme="https://ustcqidi.github.io/tags/%E4%B8%AA%E4%BA%BA%E6%88%90%E9%95%BF%E3%80%81%E7%9F%A5%E8%AF%86%E7%A7%AF%E7%B4%AF/"/>
    
  </entry>
  
</feed>
