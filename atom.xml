<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>祁迪的博客</title>
  
  <subtitle>企业级客户端技术探索：架构设计·性能优化·效能提升</subtitle>
  <link href="https://ustcqidi.github.io/atom.xml" rel="self"/>
  
  <link href="https://ustcqidi.github.io/"/>
  <updated>2025-02-06T13:53:02.731Z</updated>
  <id>https://ustcqidi.github.io/</id>
  
  <author>
    <name>祁迪</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>利用大语言模型分析 Wireshark 抓包数据</title>
    <link href="https://ustcqidi.github.io/2025/02/06/llm-pcap/"/>
    <id>https://ustcqidi.github.io/2025/02/06/llm-pcap/</id>
    <published>2025-02-06T12:29:34.000Z</published>
    <updated>2025-02-06T13:53:02.731Z</updated>
    
    <content type="html"><![CDATA[<p>利用大语言模型来辅助分析 Wireshark 网络数据包，从而加深对典型网络协议的理解，提升分析常见网络问题的能力，并进一步建立标准化的分析流程 Prompt，以提高问题排查的效率。</p><span id="more"></span><h1 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h1><p>Wireshark 作为一款功能强大的网络数据包捕获与分析工具，在实际问题分析过程中，我主要遇到两个挑战：一是对数据包中异常信息或特定字段的含义理解不够深入，二是对过滤器（filter）的使用不够熟练，导致难以快速定位关键数据。  </p><p>我希望能够利用大语言模型来辅助分析 Wireshark 网络数据包，从而加深对典型网络协议的理解，提升分析常见网络问题的能力，并进一步建立标准化的分析流程 Prompt，以提高问题排查的效率。</p><h1 id="如何开始"><a href="#如何开始" class="headerlink" title="如何开始"></a>如何开始</h1><p>Wireshark 导出的数据包格式是 .pcap，它是一种二进制格式，ChatGPT、Claude 和 DeepSeek 等大语言模型无法直接解析。但如果将 .pcap 转换为可读的结构化文本，它们就能进行分析并提供有价值的见解。</p><p>以下是 ChatGPT 给出的一些思路</p><blockquote><p>你想要 LLM 直接解析 Wireshark 捕获的 <code>.pcap</code> 文件，并提取有价值的信息，比如网络错误、丢包、时延等，然后结合 Prompt 进行总结，对吧？你打算怎么使用这个分析工具？是本地跑 LLM 解析，还是想要一个在线交互式的分析环境？  </p><p>从你的目标来看，可以有几种方式：  </p><ol><li><p><strong>自动化日志提取与分析</strong>：  </p><ul><li>解析 <code>.pcap</code> 文件，提取关键数据（如 TCP 三次握手失败、DNS 解析错误等）。  </li><li>生成结构化的日志，用 LLM 进行摘要和问题分析。  </li></ul></li><li><p><strong>沉淀 Prompt 以优化 LLM 分析能力</strong>：  </p><ul><li>针对不同的网络问题（丢包、高时延、握手失败），设计一系列 Prompt，引导 LLM 输出更准确的诊断。  </li><li>建立一个 Prompt 库，方便后续类似问题的分析。  </li></ul></li><li><p><strong>构建一个 Project（可能是 Python 脚本 + LLM）</strong>：  </p><ul><li>用 <code>pyshark</code> 解析 <code>.pcap</code> 文件，将流量数据转换成 LLM 适合处理的格式（比如 JSON）。  </li><li>结合 LLM 进行分析，并生成易读的报告。  </li></ul></li></ol><p>你倾向于哪种方式？或者你希望从哪一步开始？</p></blockquote><p>简单来说，有两种思路：  </p><ol><li>使用 <strong>pyshark</strong> 解析 <code>.pcap</code> 文件，直接提取关键数据。  </li><li>将 <code>.pcap</code> 转换为可读的结构化文本，再交给大语言模型进行分析。  </li></ol><p>我更倾向于第二种方式，这样可以提升数据的可读性，并更灵活地利用大语言模型进行问题诊断和总结。</p><h1 id="导出数据包解析结果"><a href="#导出数据包解析结果" class="headerlink" title="导出数据包解析结果"></a>导出数据包解析结果</h1><p>利用 Wireshark 的 “Export packet dissections” 功能，可以以结构化的方式导出解析后的数据包信息，便于后续分析、共享或存档。</p><p>常见的导出格式包括：</p><ul><li>Plain Text (.txt)：以纯文本形式呈现解析数据，适合快速浏览。</li><li>CSV (.csv)：以表格化方式组织数据，便于统计和筛选分析。</li><li>JSON (.json)：包含完整的层级结构，适合机器读取和进一步处理。</li><li>XML (.xml)：适用于结构化存储和解析。</li><li>PSML/PDML：Wireshark 专用的 XML 格式，提供详细的协议解析信息。</li></ul><p><img src="/2025/02/06/llm-pcap/export.jpg" alt="export"></p><p>我分别导出了 CSV 和 JSON 格式，并进行对比后发现：JSON 格式包含所有数据包的详细信息，更适合大语言模型进行深入分析。</p><p>以下是一个数据包的 JSON 样本，可以看出它完整记录了网络包的所有字段和细节。</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;_index&quot;</span><span class="punctuation">:</span> <span class="string">&quot;packets-2005-03-30&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;_type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;doc&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;_score&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">null</span></span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;_source&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;layers&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;frame&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;frame.encap_type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;1&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;frame.time&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Mar 30, 2005 16:52:17.755930000 CST&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;frame.time_utc&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Mar 30, 2005 08:52:17.755930000 UTC&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;frame.time_epoch&quot;</span><span class="punctuation">:</span> <span class="string">&quot;1112172737.755930000&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;frame.offset_shift&quot;</span><span class="punctuation">:</span> <span class="string">&quot;0.000000000&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;frame.time_delta&quot;</span><span class="punctuation">:</span> <span class="string">&quot;0.015764000&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;frame.time_delta_displayed&quot;</span><span class="punctuation">:</span> <span class="string">&quot;0.015764000&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;frame.time_relative&quot;</span><span class="punctuation">:</span> <span class="string">&quot;271.259884000&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;frame.number&quot;</span><span class="punctuation">:</span> <span class="string">&quot;28&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;frame.len&quot;</span><span class="punctuation">:</span> <span class="string">&quot;129&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;frame.cap_len&quot;</span><span class="punctuation">:</span> <span class="string">&quot;129&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;frame.marked&quot;</span><span class="punctuation">:</span> <span class="string">&quot;0&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;frame.ignored&quot;</span><span class="punctuation">:</span> <span class="string">&quot;0&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;frame.protocols&quot;</span><span class="punctuation">:</span> <span class="string">&quot;eth:ethertype:ip:udp:dns&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;frame.coloring_rule.name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;UDP&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;frame.coloring_rule.string&quot;</span><span class="punctuation">:</span> <span class="string">&quot;udp&quot;</span></span><br><span class="line">      <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;eth&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;eth.dst&quot;</span><span class="punctuation">:</span> <span class="string">&quot;00:12:a9:00:32:23&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;eth.dst_tree&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">          <span class="attr">&quot;eth.dst_resolved&quot;</span><span class="punctuation">:</span> <span class="string">&quot;3Com_00:32:23&quot;</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;eth.dst.oui&quot;</span><span class="punctuation">:</span> <span class="string">&quot;4777&quot;</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;eth.dst.oui_resolved&quot;</span><span class="punctuation">:</span> <span class="string">&quot;3Com Ltd&quot;</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;eth.dst.lg&quot;</span><span class="punctuation">:</span> <span class="string">&quot;0&quot;</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;eth.dst.ig&quot;</span><span class="punctuation">:</span> <span class="string">&quot;0&quot;</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;eth.addr&quot;</span><span class="punctuation">:</span> <span class="string">&quot;00:12:a9:00:32:23&quot;</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;eth.addr_resolved&quot;</span><span class="punctuation">:</span> <span class="string">&quot;3Com_00:32:23&quot;</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;eth.addr.oui&quot;</span><span class="punctuation">:</span> <span class="string">&quot;4777&quot;</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;eth.addr.oui_resolved&quot;</span><span class="punctuation">:</span> <span class="string">&quot;3Com Ltd&quot;</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;eth.lg&quot;</span><span class="punctuation">:</span> <span class="string">&quot;0&quot;</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;eth.ig&quot;</span><span class="punctuation">:</span> <span class="string">&quot;0&quot;</span></span><br><span class="line">        <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;eth.src&quot;</span><span class="punctuation">:</span> <span class="string">&quot;00:60:08:45:e4:55&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;eth.src_tree&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">          <span class="attr">&quot;eth.src_resolved&quot;</span><span class="punctuation">:</span> <span class="string">&quot;3Com_45:e4:55&quot;</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;eth.src.oui&quot;</span><span class="punctuation">:</span> <span class="string">&quot;24584&quot;</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;eth.src.oui_resolved&quot;</span><span class="punctuation">:</span> <span class="string">&quot;3Com&quot;</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;eth.src.lg&quot;</span><span class="punctuation">:</span> <span class="string">&quot;0&quot;</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;eth.src.ig&quot;</span><span class="punctuation">:</span> <span class="string">&quot;0&quot;</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;eth.addr&quot;</span><span class="punctuation">:</span> <span class="string">&quot;00:60:08:45:e4:55&quot;</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;eth.addr_resolved&quot;</span><span class="punctuation">:</span> <span class="string">&quot;3Com_45:e4:55&quot;</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;eth.addr.oui&quot;</span><span class="punctuation">:</span> <span class="string">&quot;24584&quot;</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;eth.addr.oui_resolved&quot;</span><span class="punctuation">:</span> <span class="string">&quot;3Com&quot;</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;eth.lg&quot;</span><span class="punctuation">:</span> <span class="string">&quot;0&quot;</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;eth.ig&quot;</span><span class="punctuation">:</span> <span class="string">&quot;0&quot;</span></span><br><span class="line">        <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;eth.type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;0x0800&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;eth.stream&quot;</span><span class="punctuation">:</span> <span class="string">&quot;1&quot;</span></span><br><span class="line">      <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;ip&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;ip.version&quot;</span><span class="punctuation">:</span> <span class="string">&quot;4&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;ip.hdr_len&quot;</span><span class="punctuation">:</span> <span class="string">&quot;20&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;ip.dsfield&quot;</span><span class="punctuation">:</span> <span class="string">&quot;0x00&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;ip.dsfield_tree&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">          <span class="attr">&quot;ip.dsfield.dscp&quot;</span><span class="punctuation">:</span> <span class="string">&quot;0&quot;</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;ip.dsfield.ecn&quot;</span><span class="punctuation">:</span> <span class="string">&quot;0&quot;</span></span><br><span class="line">        <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;ip.len&quot;</span><span class="punctuation">:</span> <span class="string">&quot;115&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;ip.id&quot;</span><span class="punctuation">:</span> <span class="string">&quot;0x87de&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;ip.flags&quot;</span><span class="punctuation">:</span> <span class="string">&quot;0x00&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;ip.flags_tree&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">          <span class="attr">&quot;ip.flags.rb&quot;</span><span class="punctuation">:</span> <span class="string">&quot;0&quot;</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;ip.flags.df&quot;</span><span class="punctuation">:</span> <span class="string">&quot;0&quot;</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;ip.flags.mf&quot;</span><span class="punctuation">:</span> <span class="string">&quot;0&quot;</span></span><br><span class="line">        <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;ip.frag_offset&quot;</span><span class="punctuation">:</span> <span class="string">&quot;0&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;ip.ttl&quot;</span><span class="punctuation">:</span> <span class="string">&quot;128&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;ip.proto&quot;</span><span class="punctuation">:</span> <span class="string">&quot;17&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;ip.checksum&quot;</span><span class="punctuation">:</span> <span class="string">&quot;0x6a95&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;ip.checksum.status&quot;</span><span class="punctuation">:</span> <span class="string">&quot;2&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;ip.src&quot;</span><span class="punctuation">:</span> <span class="string">&quot;192.168.170.56&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;ip.addr&quot;</span><span class="punctuation">:</span> <span class="string">&quot;192.168.170.56&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;ip.src_host&quot;</span><span class="punctuation">:</span> <span class="string">&quot;192.168.170.56&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;ip.host&quot;</span><span class="punctuation">:</span> <span class="string">&quot;192.168.170.56&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;ip.dst&quot;</span><span class="punctuation">:</span> <span class="string">&quot;217.13.4.24&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;ip.addr&quot;</span><span class="punctuation">:</span> <span class="string">&quot;217.13.4.24&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;ip.dst_host&quot;</span><span class="punctuation">:</span> <span class="string">&quot;217.13.4.24&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;ip.host&quot;</span><span class="punctuation">:</span> <span class="string">&quot;217.13.4.24&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;ip.stream&quot;</span><span class="punctuation">:</span> <span class="string">&quot;1&quot;</span></span><br><span class="line">      <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;udp&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;udp.srcport&quot;</span><span class="punctuation">:</span> <span class="string">&quot;1707&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;udp.dstport&quot;</span><span class="punctuation">:</span> <span class="string">&quot;53&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;udp.port&quot;</span><span class="punctuation">:</span> <span class="string">&quot;1707&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;udp.port&quot;</span><span class="punctuation">:</span> <span class="string">&quot;53&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;udp.length&quot;</span><span class="punctuation">:</span> <span class="string">&quot;95&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;udp.checksum&quot;</span><span class="punctuation">:</span> <span class="string">&quot;0x39f0&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;udp.checksum.status&quot;</span><span class="punctuation">:</span> <span class="string">&quot;2&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;udp.stream&quot;</span><span class="punctuation">:</span> <span class="string">&quot;3&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;udp.stream.pnum&quot;</span><span class="punctuation">:</span> <span class="string">&quot;1&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;Timestamps&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">          <span class="attr">&quot;udp.time_relative&quot;</span><span class="punctuation">:</span> <span class="string">&quot;0.000000000&quot;</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;udp.time_delta&quot;</span><span class="punctuation">:</span> <span class="string">&quot;0.000000000&quot;</span></span><br><span class="line">        <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;udp.payload&quot;</span><span class="punctuation">:</span> <span class="string">&quot;32:6e:01:00:00:01:00:00:00:00:00:00:05:5f:6c:64:61:70:04:5f:74:63:70:17:44:65:66:61:75:6c:74:2d:46:69:72:73:74:2d:53:69:74:65:2d:4e:61:6d:65:06:5f:73:69:74:65:73:02:64:63:06:5f:6d:73:64:63:73:0b:75:74:65:6c:73:79:73:74:65:6d:73:05:6c:6f:63:61:6c:00:00:21:00:01&quot;</span></span><br><span class="line">      <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;dns&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;dns.id&quot;</span><span class="punctuation">:</span> <span class="string">&quot;0x326e&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;dns.flags&quot;</span><span class="punctuation">:</span> <span class="string">&quot;0x0100&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;dns.flags_tree&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">          <span class="attr">&quot;dns.flags.response&quot;</span><span class="punctuation">:</span> <span class="string">&quot;0&quot;</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;dns.flags.opcode&quot;</span><span class="punctuation">:</span> <span class="string">&quot;0&quot;</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;dns.flags.truncated&quot;</span><span class="punctuation">:</span> <span class="string">&quot;0&quot;</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;dns.flags.recdesired&quot;</span><span class="punctuation">:</span> <span class="string">&quot;1&quot;</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;dns.flags.z&quot;</span><span class="punctuation">:</span> <span class="string">&quot;0&quot;</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;dns.flags.checkdisable&quot;</span><span class="punctuation">:</span> <span class="string">&quot;0&quot;</span></span><br><span class="line">        <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;dns.count.queries&quot;</span><span class="punctuation">:</span> <span class="string">&quot;1&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;dns.count.answers&quot;</span><span class="punctuation">:</span> <span class="string">&quot;0&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;dns.count.auth_rr&quot;</span><span class="punctuation">:</span> <span class="string">&quot;0&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;dns.count.add_rr&quot;</span><span class="punctuation">:</span> <span class="string">&quot;0&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;Queries&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">          <span class="attr">&quot;_ldap._tcp.Default-First-Site-Name._sites.dc._msdcs.utelsystems.local: type SRV, class IN&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;dns.qry.name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;_ldap._tcp.Default-First-Site-Name._sites.dc._msdcs.utelsystems.local&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;dns.qry.name.len&quot;</span><span class="punctuation">:</span> <span class="string">&quot;69&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;dns.count.labels&quot;</span><span class="punctuation">:</span> <span class="string">&quot;8&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;dns.qry.type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;33&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;dns.qry.class&quot;</span><span class="punctuation">:</span> <span class="string">&quot;0x0001&quot;</span></span><br><span class="line">          <span class="punctuation">&#125;</span></span><br><span class="line">        <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;dns.response_in&quot;</span><span class="punctuation">:</span> <span class="string">&quot;30&quot;</span></span><br><span class="line">      <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><h1 id="初步探索"><a href="#初步探索" class="headerlink" title="初步探索"></a>初步探索</h1><h2 id="抓包样本"><a href="#抓包样本" class="headerlink" title="抓包样本"></a>抓包样本</h2><p>网上有许多开源的 Wireshark 抓包样本可供学习，例如 <strong>Wireshark Sample Captures 官方库</strong>，该库收录了涵盖各种网络协议和应用场景的 <code>.pcap</code> 文件，便于研究和测试。地址：<a href="https://wiki.wireshark.org/SampleCaptures">Wireshark Sample Captures</a>。  </p><h2 id="实验"><a href="#实验" class="headerlink" title="实验"></a>实验</h2><p>我的目标是<strong>利用大语言模型分析和理解 Wireshark 抓取的网络数据包</strong>，主要聚焦于两个方向：  </p><ol><li><strong>学习典型的网络协议</strong>，加深对不同协议结构和行为的理解。  </li><li><strong>分析常见网络问题</strong>，并总结出一套标准化的 Prompt ，以提升问题排查效率。  </li></ol><p>在实际分析中，以下问题较为常见：  </p><ul><li><strong>TCP 连接问题</strong>（如三次握手失败、连接被重置）  </li><li><strong>HTTP/HTTPS 错误</strong>（如 4xx、5xx 状态码）  </li><li><strong>DNS 解析异常</strong>（如解析失败、响应超时）  </li><li><strong>网络延迟/性能问题</strong>（如高 RTT、丢包）  </li><li><strong>应用层协议异常</strong>（如 WebSocket 断连、TLS 握手失败）  </li></ul><p>作为初步探索，我选取了一个 <strong>DNS 查询包</strong> 作为示例，并尝试用大语言模型进行分析，以验证其对网络数据的理解和诊断能力。</p><h2 id="Prompt"><a href="#Prompt" class="headerlink" title="Prompt"></a>Prompt</h2><p>在使用大语言模型解析 Wireshark 抓包数据时，我设计了一系列 Prompt，以提取关键信息、诊断网络问题，并加深对协议的理解。</p><h3 id="基础信息提取"><a href="#基础信息提取" class="headerlink" title="基础信息提取"></a>基础信息提取</h3><p>用于获取抓包数据的基本概况，包括通信协议、IP 地址、时间信息等：</p><blockquote><p>请分析这个 Wireshark 抓包数据文件并提供以下信息：</p><ol><li>涉及的主要协议</li><li>通信双方的 IP 地址</li><li>关键的时间节点</li><li>异常数据包的特征</li><li>基本的统计信息（包数量、流量等）</li></ol></blockquote><h3 id="问题诊断"><a href="#问题诊断" class="headerlink" title="问题诊断"></a>问题诊断</h3><p>用于识别潜在的网络问题，并提供分析和解决方案：</p><blockquote><p>基于上述基础信息，请：</p><ol><li>识别存在的网络问题</li><li>分析问题的可能原因</li><li>提供问题的解决建议</li><li>列出类似问题的预防措施</li></ol></blockquote><h3 id="协议学习"><a href="#协议学习" class="headerlink" title="协议学习"></a>协议学习</h3><p>用于深入学习抓包数据涉及的具体协议，加深对协议的理解：</p><blockquote><p>请详细解释这个抓包中的 [具体协议] ：</p><ol><li>协议的基本工作流程</li><li>关键字段的含义</li><li>正常vs异常的特征</li><li>该协议的最佳实践</li></ol></blockquote><p>这套 Prompt 既能帮助快速提取抓包的核心信息，也能用于深入分析问题和学习协议规范，从而提升网络数据分析的效率和准确性。</p><h2 id="大模型给出的结果"><a href="#大模型给出的结果" class="headerlink" title="大模型给出的结果"></a>大模型给出的结果</h2><h3 id="基础信息提取-1"><a href="#基础信息提取-1" class="headerlink" title="基础信息提取"></a>基础信息提取</h3><blockquote><p>我来分析这个DNS相关的抓包文件:</p><ol><li>涉及的主要协议</li></ol><ul><li><strong>底层</strong>: Ethernet  </li><li><strong>网络层</strong>: IPv4  </li><li><strong>传输层</strong>: UDP  </li><li><strong>应用层</strong>: DNS (端口53)  </li></ul><ol start="2"><li>通信双方的IP地址<br><strong>主要的通信方</strong>:  </li></ol><ul><li>内部客户端: <code>192.168.170.8</code>, <code>192.168.170.56</code>  </li><li>DNS服务器: <code>192.168.170.20</code>, <code>217.13.4.24</code>  </li></ul><ol start="3"><li>关键时间节点</li></ol><ul><li><strong>开始时间</strong>: <code>2005-03-30 16:47:46.496</code>  </li><li><strong>结束时间</strong>: <code>2005-03-30 16:52:25.375</code>  </li><li><strong>总时长</strong>: 约<code>4分39秒</code>  </li></ul><ol start="4"><li>异常数据包的特征<br>检测到多个DNS查询失败 (<code>RCODE=3 NXDOMAIN</code>):  </li></ol><ul><li><code>GRIMM.utelsystems.local</code> 的A记录查询  </li><li><code>_ldap._tcp.dc._msdcs.utelsystems.local</code> 的SRV记录查询  </li><li><code>_ldap._tcp.Default-First-Site-Name._sites.dc._msdcs.utelsystems.local</code> 的SRV记录查询  </li></ul><ol start="5"><li>基本统计信息</li></ol><ul><li><strong>总包数</strong>: <code>38个数据包</code>  </li><li><strong>DNS查询类型分布</strong>:  <ul><li>A记录查询  </li><li>AAAA记录查询  </li><li>MX记录查询  </li><li>TXT记录查询  </li><li>SRV记录查询  </li><li>PTR记录查询  </li><li>ANY记录查询  </li></ul></li><li><strong>主要查询域名</strong>:  <ul><li><code>google.com</code>  </li><li><code>www.netbsd.org</code>  </li><li><code>www.isc.org</code>  </li><li><code>*.utelsystems.local</code>  </li></ul></li><li><strong>DNS响应情况</strong>:  <ul><li>成功响应包含A记录、AAAA记录、MX记录等  </li><li>多个NXDOMAIN失败响应  </li><li>平均DNS响应时间在<strong>毫秒级别</strong>  </li></ul></li></ul><p>这些DNS查询数据显示系统在进行<strong>常规的域名解析</strong>，同时也在尝试解析一些<strong>内部Active Directory相关的域名(但失败了)</strong>，这可能表明是一个<strong>Windows域环境中的客户端行为</strong>。</p></blockquote><h3 id="分析指定编号或者ID的报文"><a href="#分析指定编号或者ID的报文" class="headerlink" title="分析指定编号或者ID的报文"></a>分析指定编号或者ID的报文</h3><blockquote><p>在Wireshark数据包中, DNS查询ID在DNS头部, 你可以在报文的dns层看到:</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">&quot;dns&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;dns.id&quot;</span><span class="punctuation">:</span> <span class="string">&quot;0x326e&quot;</span><span class="punctuation">,</span>  <span class="comment">// 这里就是DNS查询ID</span></span><br><span class="line">  <span class="attr">&quot;dns.flags&quot;</span><span class="punctuation">:</span> <span class="string">&quot;0x0100&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;dns.flags_tree&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;dns.flags.response&quot;</span><span class="punctuation">:</span> <span class="string">&quot;0&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;dns.flags.opcode&quot;</span><span class="punctuation">:</span> <span class="string">&quot;0&quot;</span><span class="punctuation">,</span> </span><br><span class="line">    ...</span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>我们以报文28为例,完整路径是:<br><code>frame-&gt;layers-&gt;dns-&gt;dns.id : &quot;0x326e&quot;</code></p><p>这个ID的作用是:</p><ol><li>用于匹配DNS请求和响应  </li><li>是一个16位的标识符  </li><li>响应包会携带相同的ID, 使客户端能够匹配对应的请求  </li><li>在报文30(响应包)中可以看到相同的ID <code>&quot;0x326e&quot;</code>  </li></ol><p><strong>建议在Wireshark中:</strong></p><ol><li>使用显示过滤器 <code>dns.id == 0x326e</code> 可以快速找到请求-响应对  </li><li>选择DNS协议的数据包, 展开DNS部分就能看到ID字段  </li><li>也可以在列表视图中添加一列显示 <code>dns.id</code>  </li></ol><p>这是DNS协议中请求-响应匹配机制的关键字段。</p></blockquote><h3 id="详细解释每个-flag-的含义"><a href="#详细解释每个-flag-的含义" class="headerlink" title="详细解释每个 flag 的含义"></a>详细解释每个 flag 的含义</h3><p><img src="/2025/02/06/llm-pcap/flag.png" alt="flag"></p><blockquote><p>让我详细解释这个DNS响应中Flags字段(0x8583)的每个比特位的含义:</p><p>这个16位的Flags值 <code>0x8583</code> 转换成二进制是: <code>1000 0101 1000 0011</code></p><p>从左到右每个位的含义是:</p><ol><li>QR(位15): 1 = 表示这是一个响应消息(Response)  </li><li>Opcode(位11-14): 0000 = 标准查询(Standard query)  </li><li>AA(位10): 1 = 权威应答(Authoritative Answer),表示响应来自权威DNS服务器  </li><li>TC(位9): 0 = 消息没有被截断(Not truncated)  </li><li>RD(位8): 1 = 期望递归(Recursion Desired)  </li><li>RA(位7): 1 = 服务器支持递归查询(Recursion Available)  </li><li>Z(位6): 0 = 保留位,必须为0  </li><li>AD(位5): 0 = 响应未经过DNSSEC认证  </li><li>CD(位4): 0 = 不接受未认证的数据  </li><li>Rcode(位0-3): 0011 = 3,表示域名不存在(NXDOMAIN)  </li></ol><p>特别注意两点:</p><ol><li>AA(Authoritative Answer)位被设置,说明这是一个权威DNS服务器的响应  </li><li>Rcode为3(NXDOMAIN),这是一个否定性响应,表示请求的域名不存在  </li></ol><p>这个Flags组合表明:</p><ul><li>这是一个来自权威服务器的响应  </li><li>服务器支持递归查询  </li><li>请求的域名不存在  </li><li>响应未经过DNSSEC认证  </li><li>消息完整(未截断)  </li></ul><p>这个特定的响应是一个典型的”域名不存在”错误响应,来自一个权威DNS服务器。</p></blockquote><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>利用大语言模型分析 Wireshark 抓包数据可以显著提升网络协议学习和问题诊断效率，特别适合帮助工程师快速理解复杂协议细节和异常模式。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;利用大语言模型来辅助分析 Wireshark 网络数据包，从而加深对典型网络协议的理解，提升分析常见网络问题的能力，并进一步建立标准化的分析流程 Prompt，以提高问题排查的效率。&lt;/p&gt;</summary>
    
    
    
    
    <category term="网络" scheme="https://ustcqidi.github.io/tags/%E7%BD%91%E7%BB%9C/"/>
    
    <category term="Troubleshooting" scheme="https://ustcqidi.github.io/tags/Troubleshooting/"/>
    
    <category term="大语言模型" scheme="https://ustcqidi.github.io/tags/%E5%A4%A7%E8%AF%AD%E8%A8%80%E6%A8%A1%E5%9E%8B/"/>
    
    <category term="ChatGPT" scheme="https://ustcqidi.github.io/tags/ChatGPT/"/>
    
    <category term="Claude" scheme="https://ustcqidi.github.io/tags/Claude/"/>
    
    <category term="Wireshark" scheme="https://ustcqidi.github.io/tags/Wireshark/"/>
    
  </entry>
  
  <entry>
    <title>优化老代码的渐进式方法：以网络模块治理为例</title>
    <link href="https://ustcqidi.github.io/2025/02/02/webservice-refactor/"/>
    <id>https://ustcqidi.github.io/2025/02/02/webservice-refactor/</id>
    <published>2025-02-02T13:37:56.000Z</published>
    <updated>2025-02-02T14:08:49.376Z</updated>
    
    <content type="html"><![CDATA[<p>在软件开发过程中，随着业务的不断演进，老模块往往会面临代码膨胀、耦合严重、维护成本高等问题。本文以网络模块的治理为例，探讨如何通过解耦、抽象和自动化手段优化架构，提高可维护性和扩展性。我们从网络层与业务层的分离入手，分析当前架构的问题，并提出动态库拆分、API 设计优化、自动化代码生成等解决方案。最终，我们通过实践验证了这些改进措施的有效性，为老模块的治理提供了一套可行的方法论。</p><span id="more"></span><p>在这篇文章中，我想分享一些关于治理老模块代码的经验和想法。  </p><p>我们负责的几个业务模块中，一个是与网络相关的，另一个是所有业务的中转站，类似于业务的“容器”，还有一个是数据库相关的模块。这篇文章主要聚焦在网络模块的治理。  </p><h3 id="早期设计的问题"><a href="#早期设计的问题" class="headerlink" title="早期设计的问题"></a>早期设计的问题</h3><p>最初设计这个网络模块时，用户量较小，业务场景也相对单一。当时的实现方式是将业务代码与网络层代码混在一起，每次新增一个业务请求，就需要修改大量接口、添加中转代码，并且网络请求的构造逻辑也都写在这个模块里。最开始这样做没有太大问题，但随着应用程序的发展，现在已有十几个业务，每个版本都会新增大量接口，导致这个模块逐渐演变成一个“公共模块”，甚至被我们戏称为“公交车”——所有人都在这里修改代码。  </p><p>由此引发了几个问题：  </p><ol><li><strong>频繁的构建错误</strong>：由于许多团队同时修改该模块，导致 build error 的情况时有发生。  </li><li><strong>代码膨胀</strong>：模块代码不断增长，大量业务逻辑与网络通信代码交织在一起，使得维护变得困难。  </li><li><strong>稳定性隐患</strong>：业务代码与核心网络代码混杂，任何改动都有可能影响其他业务，引发潜在的风险。  </li></ol><p>面对这些问题，我们意识到，首先需要做的就是<strong>分离业务代码和核心网络代码</strong>。其次，我们需要重新设计更合理的接口，使业务代码的编写更加轻松，同时在<strong>保持业务逻辑不变、尽量降低回归风险的前提下，完成模块重构</strong>。  </p><h3 id="分析问题与挑战"><a href="#分析问题与挑战" class="headerlink" title="分析问题与挑战"></a>分析问题与挑战</h3><p>这个网络模块最早的设计并没有考虑到今天的业务规模扩展，因此所有业务代码和网络核心库的代码都混合在一个公共模块里，并对外提供了一个庞大的“全量接口”。每当有新的业务API需要增加时，所有团队都必须修改这个公共接口文件。  </p><p>问题逐渐显现：  </p><ol><li><strong>代码耦合严重</strong>：业务代码与网络通信逻辑混在一起，影响了整体的稳定性。某些业务团队在新增请求API时，不慎修改了核心网络库代码，带来了安全隐患和回归风险。  </li><li><strong>包体积急剧增长</strong>：模块中充斥着重复的业务代码，比如网络请求的组装、解析等逻辑，导致整体代码量迅速膨胀。  </li><li><strong>维护困难</strong>：所有人都在修改同一个大接口文件，导致代码冲突频发，构建错误不断增加，甚至还可能引发资源冲突等问题。  </li></ol><h3 id="解决方案：逐步拆分与重构"><a href="#解决方案：逐步拆分与重构" class="headerlink" title="解决方案：逐步拆分与重构"></a>解决方案：逐步拆分与重构</h3><p>我们的目标很明确：  </p><ul><li><strong>解耦核心网络库代码与业务代码</strong>，让业务代码能够独立管理，避免相互干扰。  </li><li><strong>减少对公共模块的依赖</strong>，业务团队可以在自己的代码仓库中管理自己的网络请求逻辑。  </li><li><strong>优化模块复用方式</strong>，减少不必要的代码编译，降低包大小。  </li></ul><p>但直接从公共模块剥离业务代码的方式难度极大，因为<strong>对外的公共接口已经广泛被使用</strong>，如果直接修改，可能会影响多个业务的开发，同时带来巨大的回归风险。我们尝试了几种策略，但最初几次都失败了。  </p><p>最终，我们借助一个新的业务场景找到了突破口：<strong>某个独立 APP 需要一个轻量级的网络库</strong>。于是，我们采取了一种折中方案：<strong>保持现有模块不变，同时抽取核心网络库，形成一个新的独立模块</strong>。  </p><p>这个新的网络库（我们称之为 <code>zNet</code>）<strong>不包含任何业务请求逻辑</strong>，只有最纯粹的网络通信功能，并将其编译为一个独立的动态库供该 APP 使用。这种方式不仅满足了该 APP 的需求，同时也为我们提供了一个“试水”机会——先验证抽取出的网络库是否稳定，再逐步推广到现有模块的底层替换。这样做的好处是：  </p><ol><li><strong>不会影响现有业务开发</strong>：原有模块保持不变，业务团队不需要修改代码，避免了回归风险。  </li><li><strong>模块拆分的可行性验证</strong>：先在独立 APP 上验证 <code>zNet</code> 的稳定性，再逐步替换现有模块中的网络代码，实现平滑迁移。  </li></ol><h3 id="进一步优化：业务请求的抽象"><a href="#进一步优化：业务请求的抽象" class="headerlink" title="进一步优化：业务请求的抽象"></a>进一步优化：业务请求的抽象</h3><p>完成核心网络库的拆分后，我们又面临另一个问题：<strong>如何让业务代码更清晰地组织，并减少重复代码？</strong>  </p><p>原本的业务请求代码是所有人共用的，构造 HTTP 请求、处理响应的逻辑都写在一个大文件里，每个业务请求都得手写参数构造、请求封装、响应解析，导致大量重复代码。因此，我们对<strong>业务请求的方式进行了抽象</strong>：  </p><ul><li><strong>定义请求实体对象</strong>：每个 HTTP 请求都可以抽象为一个 <code>Request</code> 对象，它包含请求的参数（如 Headers、Body、Method 等）以及相关的安全以及连接策略等。  </li><li><strong>统一解析响应</strong>：构造请求和解析响应的逻辑被提取成通用的方法，业务方只需创建一个 <code>Request</code> 实例即可发起请求。  </li></ul><p>有了这个改进，我们可以进一步实现<strong>业务代码的自动生成</strong>：  </p><ul><li>与服务端团队定义好请求参数格式后，可以用脚本解析这些参数，<strong>自动生成请求代码</strong>，避免重复手写。  </li><li>代码生成时可以<strong>自动添加安全检查</strong>，例如：  <ul><li>域名检测，防止错误请求泄露敏感数据。  </li><li>统一的安全策略校验，减少人为失误。  </li><li>代码风格一致性检查，提升可维护性。  </li></ul></li></ul><p>这套自动化方案不仅提升了开发效率，还提升了安全性和代码质量，因此我们还为此申请了一项专利。  </p><h3 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h3><p>通过这次网络模块的重构，我们总结出了一套较为通用的老模块治理方法：  </p><ol><li><strong>先分析痛点，找到业务扩展遇到的核心问题</strong>。  </li><li><strong>制定渐进式的改造方案，避免影响现有业务，降低回归风险</strong>。  </li><li><strong>利用新的业务需求作为突破口，验证新的架构设计</strong>。  </li><li><strong>通过合理的抽象和自动化工具，减少重复代码，提高开发效率</strong>。  </li></ol><p>这次网络模块的拆分和优化，让我们的架构更加清晰、维护成本降低，同时也为未来的业务扩展做好了准备。希望这些经验能对大家有所启发！</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;在软件开发过程中，随着业务的不断演进，老模块往往会面临代码膨胀、耦合严重、维护成本高等问题。本文以网络模块的治理为例，探讨如何通过解耦、抽象和自动化手段优化架构，提高可维护性和扩展性。我们从网络层与业务层的分离入手，分析当前架构的问题，并提出动态库拆分、API 设计优化、自动化代码生成等解决方案。最终，我们通过实践验证了这些改进措施的有效性，为老模块的治理提供了一套可行的方法论。&lt;/p&gt;</summary>
    
    
    
    
    <category term="老模块治理" scheme="https://ustcqidi.github.io/tags/%E8%80%81%E6%A8%A1%E5%9D%97%E6%B2%BB%E7%90%86/"/>
    
    <category term="架构优化" scheme="https://ustcqidi.github.io/tags/%E6%9E%B6%E6%9E%84%E4%BC%98%E5%8C%96/"/>
    
    <category term="API 设计" scheme="https://ustcqidi.github.io/tags/API-%E8%AE%BE%E8%AE%A1/"/>
    
    <category term="技术债务治理" scheme="https://ustcqidi.github.io/tags/%E6%8A%80%E6%9C%AF%E5%80%BA%E5%8A%A1%E6%B2%BB%E7%90%86/"/>
    
  </entry>
  
  <entry>
    <title>域名污染引发的SSL证书验证问题</title>
    <link href="https://ustcqidi.github.io/2025/01/27/dns/"/>
    <id>https://ustcqidi.github.io/2025/01/27/dns/</id>
    <published>2025-01-27T14:37:07.000Z</published>
    <updated>2025-01-27T14:48:44.289Z</updated>
    
    <content type="html"><![CDATA[<p>本文将通过一个真实的域名污染案例,展示什么是域名污染,它的危害有哪些,以及如何识别和处理域名污染问题。文章覆盖了域名污染的形式、后果,并给出了具体的日志分析实例,以及临时解决方案和彻底处理建议。</p><span id="more"></span><h2 id="一、域名污染定义"><a href="#一、域名污染定义" class="headerlink" title="一、域名污染定义"></a><strong>一、域名污染定义</strong></h2><h3 id="1-1-什么是域名污染"><a href="#1-1-什么是域名污染" class="headerlink" title="1.1 什么是域名污染"></a><strong>1.1 什么是域名污染</strong></h3><p>域名污染是一种网络攻击或干扰行为，旨在干扰特定域名或主机名的正常解析过程，从而导致用户无法访问目标网站或资源，或者被重定向到恶意站点。域名污染可以采用多种方式进行，其目的通常是欺骗、劫持、屏蔽或干扰用户的网络连接。</p><h3 id="1-2-域名污染的形式"><a href="#1-2-域名污染的形式" class="headerlink" title="1.2 域名污染的形式"></a><strong>1.2 域名污染的形式</strong></h3><p>以下是一些常见的域名污染方式：</p><ol><li><strong>DNS劫持：</strong> 攻击者修改DNS（Domain Name System）解析请求或响应，将合法域名映射到恶意IP地址上。这样用户访问合法域名时将被重定向到恶意站点。</li><li><strong>DNS投毒：</strong> 攻击者在DNS缓存中插入虚假的DNS记录，以污染DNS解析结果，从而导致用户访问错误的网站或资源。</li><li><strong>HTTP劫持：</strong> 攻击者通过修改HTTP响应头或HTML内容，将用户重定向到不希望访问的站点。这种方法通常被用于广告或欺诈目的。</li><li><strong>DNS屏蔽：</strong> 在某些情况下，政府或互联网服务提供商可能会屏蔽特定域名，以限制用户访问特定网站或服务。</li><li><strong>域名欺诈：</strong> 攻击者创建与合法域名相似的伪造域名，以诱使用户访问恶意站点，泄露个人信息或进行欺诈活动。</li></ol><h3 id="1-3-域名污染的危害"><a href="#1-3-域名污染的危害" class="headerlink" title="1.3 域名污染的危害"></a><strong>1.3 域名污染的危害</strong></h3><ul><li>使网络服务瘫痪,网站和应用无法访问</li><li>窃取用户访问的网站数据,例如账号密码</li><li>返回恶意网站或广告,进行钓鱼攻击和信息欺诈</li><li>执行恶意代码,控制用户设备作为僵尸网络参与DDoS等攻击</li></ul><h2 id="二、企业级应用遭遇域名污染案例"><a href="#二、企业级应用遭遇域名污染案例" class="headerlink" title="二、企业级应用遭遇域名污染案例"></a><strong>二、企业级应用遭遇域名污染案例</strong></h2><h3 id="2-1-问题表象-应用运行异常等"><a href="#2-1-问题表象-应用运行异常等" class="headerlink" title="2.1 问题表象(应用运行异常等)"></a><strong>2.1 问题表象(应用运行异常等)</strong></h3><p>我们的应用程序使用HTTPS通信,所有网络请求设计要进行TLS握手,以建立安全连接。但是域名被污染后,DNS解析结果将连接导向了错误的IP地址。这会导致TLS握手过程中,证书中的域名(DNS name)无法匹配目标服务器的地址(Host name),从而造成TLS握手失败,连接无法建立。</p><p>当TLS握手失败时,为了保证用户体验,我们的应用程序会像浏览器一样,弹出一个证书错误的警告框提示用户。用户可以选择忽略这个错误并强制继续连接,也可以选择中断这个连接。</p><p><img src="/2025/01/27/dns/pop.png" alt="pop"></p><p>如果用户忽略错误强制连接,应用程序会使用不可信的证书完成TLS握手,然后访问被污染的域名。这可能导致:</p><ul><li>用户隐私数据泄露给中间人</li><li>打开钓鱼网站进行诈骗</li><li>访问含恶意代码的网站</li></ul><p>所以域名污染会直接导致我们的应用无法通过TLS安全连接到真实服务器。用户可能在应用中看到各种网络连接错误、证书警告等异常表象。这严重影响了用户体验。</p><h3 id="2-2-相关日志分析"><a href="#2-2-相关日志分析" class="headerlink" title="2.2 相关日志分析"></a><strong>2.2 相关日志分析</strong></h3><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">[<span class="title class_">CSBPTApp</span>::VTLS_NotifyCertItemVerifyFailed] <span class="title class_">Cert</span> verified <span class="attr">failed</span>:     </span><br><span class="line"><span class="attr">SN</span>:<span class="number">02</span> <span class="number">72</span> <span class="variable constant_">BA</span> ...............</span><br><span class="line"><span class="attr">ISSUER</span>:<span class="title class_">DigiCert</span> <span class="title class_">SHA2</span> <span class="title class_">High</span> <span class="title class_">Assurance</span> <span class="title class_">Server</span> <span class="variable constant_">CA</span>    </span><br><span class="line"><span class="attr">DNS</span>:*.<span class="property">cdninstagram</span>.<span class="property">com</span>,*.<span class="property">igcdn</span>.<span class="property">com</span>,*.<span class="property">igsonar</span>.<span class="property">com</span>,*.<span class="property">instagram</span>.<span class="property">com</span>,cdninstagram.<span class="property">com</span>,igcdn.<span class="property">com</span>,igsonar.<span class="property">com</span>,instagram.<span class="property">com</span>    </span><br><span class="line"><span class="attr">CAFP</span>:<span class="variable constant_">A0</span> <span class="number">31</span> <span class="variable constant_">C4</span> <span class="number">67</span> ...............</span><br><span class="line"><span class="attr">FP</span>:8F <span class="number">83</span> 6C <span class="number">81</span> <span class="variable constant_">A2</span> ...............</span><br><span class="line"><span class="attr">host</span>:secure.<span class="property">gravatar</span>.<span class="property">com</span></span><br></pre></td></tr></table></figure><p>通过分析应用程序的日志,可以识别域名污染事件。关键是要解析日志中记录的主机名和域名信息,并与实际域名解析结果进行比对。</p><p>例如上述日志显示:</p><ul><li>连接的主机名(host):secure.gravatar.com</li><li>证书包含的域名(DNS):<em>.cdninstagram.com,</em>.igcdn.com,<em>.igsonar.com,</em>.instagram.com,cdninstagram.com,igcdn.com,igsonar.com,instagram.com</li></ul><p>通过对比可以发现,日志记录的连接主机名secure.gravatar.com并不在证书授权的域名列表内。这说明该连接主机名并不被该证书信任,因此出现了证书验证失败的错误。</p><p>这很可能是域名污染所导致的,证书与实际服务器不匹配。进一步查询证书信息和与公网DNS解析的比较,可以确认域名污染事件。</p><h2 id="三、域名污染的处理"><a href="#三、域名污染的处理" class="headerlink" title="三、域名污染的处理"></a><strong>三、域名污染的处理</strong></h2><h3 id="3-1-临时解决方案"><a href="#3-1-临时解决方案" class="headerlink" title="3.1 临时解决方案"></a><strong>3.1 临时解决方案</strong></h3><ul><li>在本地Hosts文件中添加域名与正确IP地址的映射,强制正确解析结果,覆盖污染解析记录。</li><li>通过VPN访问可信任域名服务器,绕过本地DNS污染结果。</li><li>浏览器插件修正本地DNS,如DNS Jumper等。</li><li>应用程序代码层面指定可信DNS服务器,不直接调用系统API,例如使用c-ares第三方库实现DNS解析。</li></ul><h3 id="3-2-彻底处理方法"><a href="#3-2-彻底处理方法" class="headerlink" title="3.2 彻底处理方法"></a><strong>3.2 彻底处理方法</strong></h3><ul><li>联系网络服务商,通过ACL规则过滤掉污染流量,阻止攻击链路。</li><li>清洗本地DNS服务器缓存,删除污染记录,并修复DNS服务器软件漏洞。</li><li>对注册商和注册中心报告域名遭劫持,进行域名Whois记录更正。</li><li>根据证书特征,在浏览器及系统级加入证书拦截策略,拒绝访问。</li></ul><h3 id="3-3-防范措施"><a href="#3-3-防范措施" class="headerlink" title="3.3 防范措施"></a><strong>3.3 防范措施</strong></h3><ul><li>开启DNSSEC验证,避免DNS查询结果被劫持污染。</li><li>启用HTTP Strict Transport Security (HSTS),强制HTTPS访问。</li><li>加强域名注册管理,设置注册锁避免被转移。</li><li>监控和检测域名解析情况,发现污染行为。</li><li>employee网络隔离,避免全部服务受影响。</li></ul>]]></content>
    
    
    <summary type="html">&lt;p&gt;本文将通过一个真实的域名污染案例,展示什么是域名污染,它的危害有哪些,以及如何识别和处理域名污染问题。文章覆盖了域名污染的形式、后果,并给出了具体的日志分析实例,以及临时解决方案和彻底处理建议。&lt;/p&gt;</summary>
    
    
    
    
    <category term="DNS" scheme="https://ustcqidi.github.io/tags/DNS/"/>
    
    <category term="网络故障排查" scheme="https://ustcqidi.github.io/tags/%E7%BD%91%E7%BB%9C%E6%95%85%E9%9A%9C%E6%8E%92%E6%9F%A5/"/>
    
    <category term="Troubleshooting" scheme="https://ustcqidi.github.io/tags/Troubleshooting/"/>
    
    <category term="企业级网络" scheme="https://ustcqidi.github.io/tags/%E4%BC%81%E4%B8%9A%E7%BA%A7%E7%BD%91%E7%BB%9C/"/>
    
  </entry>
  
  <entry>
    <title>从问题出发：VPN的核心原理与日志分析方法</title>
    <link href="https://ustcqidi.github.io/2025/01/25/vpn/"/>
    <id>https://ustcqidi.github.io/2025/01/25/vpn/</id>
    <published>2025-01-25T14:50:39.000Z</published>
    <updated>2025-01-26T06:55:36.850Z</updated>
    
    <content type="html"><![CDATA[<p>通过一则VPN断开引发DNS请求异常的案例，本文探讨了VPN的核心技术，包括隧道概念、网络层定位、应用层透明性，以及网络流量分割的实现原理。同时，结合 GlobalProtect 软件的实践，探索日志分析的具体方法与思路。</p><span id="more"></span><p>VPN、代理、防火墙是我们日常生活中经常听到的名词，尤其是VPN。在远程办公时，我们经常需要通过它来访问公司内部的一些资源。对于我们来说，VPN已经是一个非常熟悉、常见的工具。然而，说到它的技术细节，我其实了解得并不多，甚至有些模糊。</p><p>前段时间，我们的客户遇到了一些与VPN相关的问题。我们的软件主要应用于远程办公的场景，而这个问题比较特殊：在Mac系统上，有部分用户在使用VPN时，如果VPN处于连接状态，一切正常。但一旦断开VPN连接，我们的软件所有DNS请求都无法发出。而奇怪的是，系统中其他软件，包括浏览器，访问相同的域名却完全正常。唯一的解决方法是重启电脑。从现象上看，这个问题似乎与用户电脑上的VPN有关。</p><p>但客户对这种解释并不认可。由于他们并非技术专业人士，无法理解这种关联，反而会质疑：为什么偏偏只有你们的软件会出现这种问题？这使得问题变得非常棘手。我们尝试在应用层增加大量日志，甚至抓包分析，但始终没有找到问题的根本原因。本质上，问题源于我们对VPN工作机制的了解不够深入。为了解决问题，我们还调取了客户VPN的日志，但因为对原理不够熟悉，很多内容看不明白。整个解决过程非常痛苦，花了很长时间也未能找到有效方案。</p><p>于是，我决定花时间系统地查阅资料，研究VPN的工作机制。这篇文章便是在这样的背景下诞生的。我希望通过它，搞清楚几个关键问题：</p><ol><li><strong>什么是VPN？它解决了什么问题？</strong>  </li><li><strong>防火墙、代理、VPN这些常见名词之间有什么区别、差异和关联？</strong>  </li><li><strong>VPN工作在网络的哪一层？它的连接建立过程是什么？什么是VPN隧道？经常听到“VPN隧道”这个概念，那么隧道到底指的是什么？</strong>  </li><li><strong>VPN连接对应用层是否透明？应用层能否感知到当前设备已连接VPN？</strong>  </li><li><strong>VPN的网络流量分割是如何实现的？</strong>  </li><li><strong>我们常用的VPN软件 <em>GlobalProtect</em> 的工作机制是什么？如何分析它的日志？</strong></li></ol><p>希望通过这篇文章能够解答这些问题，同时为后续处理类似问题积累一些经验。</p><h1 id="VPN技术背景与发展脉络"><a href="#VPN技术背景与发展脉络" class="headerlink" title="VPN技术背景与发展脉络"></a>VPN技术背景与发展脉络</h1><h2 id="起源：安全互联需求的驱动"><a href="#起源：安全互联需求的驱动" class="headerlink" title="起源：安全互联需求的驱动"></a>起源：安全互联需求的驱动</h2><p>VPN（虚拟专用网络）的诞生源于20世纪90年代企业对安全远程通信的迫切需求。早期企业通过租赁专线（如ATM、帧中继）实现分支机构互联，但存在成本高昂（单条线路年费用可达数十万美元）、部署周期长（平均6-12个月）等问题。随着互联网基础设施的成熟，如何在公共网络上构建私有化安全通道成为关键命题。这一需求在军事领域尤为突出——1993年美国国防部提出”安全IP网络”概念，要求实现跨地域军事网络的加密通信，这直接推动了IPsec协议的标准化进程。</p><h2 id="发展时间线：协议迭代与技术突破"><a href="#发展时间线：协议迭代与技术突破" class="headerlink" title="发展时间线：协议迭代与技术突破"></a>发展时间线：协议迭代与技术突破</h2><p><strong>1. 技术萌芽期（1960s-1980s）</strong></p><ul><li><strong>1969年 ARPANET</strong><br>美国国防部高级研究计划局（ARPA）开发首个分组交换网络，虽未直接涉及VPN技术，但为后续互联网协议栈奠定基础。</li><li><strong>1983年 TCP/IP协议标准化</strong><br>正式取代NCP协议，成为互联网通信的核心标准，为VPN所需的跨网络通信提供技术前提。</li></ul><p><strong>2. 技术奠基期（1990s）</strong></p><ul><li><strong>1993年 IPsec协议雏形</strong><br>AT&amp;T实验室提出<a href="https://www.mattblaze.org/papers/swipe.id.txt">swIPe</a>协议，首次实现IP层加密，成为IPsec的前身。</li><li><strong>1996年 PPTP协议发布</strong><br>微软工程师Gurdeep Singh-Pall主导开发，首次实现基于公网的加密隧道，支持Windows 95远程访问企业网络。</li><li><strong>1999年 L2TP协议诞生</strong><br>Cisco与微软合作整合L2F与PPTP，形成更安全的L2TP协议，支持多协议封装与IPsec加密组合。</li></ul><p><strong>3. 技术扩展期（2000s）</strong></p><ul><li><strong>2001年 OpenVPN开源发布</strong><br>基于SSL/TLS的应用层加密方案，突破传统网络层限制，成为跨平台VPN主流协议。</li><li><strong>2005年 SSL-VPN商业化</strong><br>通过浏览器插件实现免客户端接入，推动VPN从企业工具向个人用户渗透。</li><li><strong>2006年 IKEv2/IPsec协议成熟</strong><br>增强移动设备VPN连接的稳定性和抗干扰能力，支持网络切换时无缝重连。</li></ul><p><strong>4. 技术革新期（2010s至今）</strong></p><ul><li><strong>2018年 WireGuard协议发布</strong><br>代码量仅为OpenVPN的1/10，采用ChaCha20加密算法，移动端连接速度提升300%。</li><li><strong>2020年 SD-WAN与VPN融合</strong><br>疫情催生远程办公需求激增，SD-WAN技术结合VPN实现云原生架构，时延降低至20ms以下。</li><li><strong>2022年 零信任架构兴起</strong><br>结合SASE（安全访问服务边缘）模型，逐步替代传统VPN的星型拓扑，实现动态身份验证与最小权限控制。</li></ul><h2 id="技术驱动因素"><a href="#技术驱动因素" class="headerlink" title="技术驱动因素"></a>技术驱动因素</h2><ol><li><p>军事与科研需求（1960s-1990s）<br>ARPANET与早期加密协议（如IPsec）均源于美国国防项目，强调跨地域安全通信</p></li><li><p>企业远程办公（1990s-2000s）<br>PPTP与L2TP协议推动VPN从专线租赁转向公网加密隧道，降低企业70%通信成本</p></li><li><p>移动互联网安全挑战（2010s）<br>OpenVPN与WireGuard应对公共Wi-Fi风险，支持移动设备安全接入</p></li><li><p>云原生与边缘计算（2020s至今）<br>SD-WAN与SASE架构解决传统VPN在云服务中的性能瓶颈，支持多云环境无缝连接</p></li></ol><p>可以用一张图来总结：<br><img src="/2025/01/25/vpn/timeline.svg" alt></p><h2 id="VPN在企业办公的应用场景"><a href="#VPN在企业办公的应用场景" class="headerlink" title="VPN在企业办公的应用场景"></a>VPN在企业办公的应用场景</h2><p>VPN 在企业远程办公领域，核心目标是确保数据传输的安全性，同时实现对企业内部资源的安全访问。  </p><p>例如，在远程办公时，我们可能需要访问企业内部的文档、代码资源，或者一些私有化的服务，而 VPN 可以保障这些访问的安全性。此外，它还能帮助我们突破地理位置的限制。例如，当我们在家庭网络环境下，需要访问企业内部资源时，可以通过 VPN 绕过地理位置的限制。  </p><p>另一个重要的场景是在公共网络环境下，例如在咖啡馆、机场等公共 Wi-Fi 环境中，这些网络可能存在路由器配置问题或其他中间网络的不稳定和安全隐患。VPN 能够通过加密和隧道技术，保护我们的数据隐私，确保通信的安全。这些正是 VPN 在远程办公中的主要应用场景。</p><p>总结来说，VPN 的核心需求是解决数据的<strong>安全传输问题</strong>。以下是关键点：  </p><ul><li><strong>技术本质</strong>：通过隧道封装（Tunneling）和加密算法（如 AES-256），构建一个“网络中的网络”。这种方式将明文数据转化为密文传输，从而有效抵御中间人攻击，确保数据的安全性和隐私性。  </li><li><strong>典型方案</strong>：以 IPsec 的 ESP（封装安全载荷）协议为例，它对 IP 包进行端到端加密，确保数据在传输中的完整性（通过 HMAC 验证）与机密性（加密处理），为用户提供了可靠的安全保障。  </li></ul><h1 id="VPN-技术领域的几个问题"><a href="#VPN-技术领域的几个问题" class="headerlink" title="VPN 技术领域的几个问题"></a>VPN 技术领域的几个问题</h1><p>厘清背景信息后，接下来，我们开始深入探讨了 VPN 的核心目标：<strong>保障网络中的数据安全传输</strong>。</p><p>这就引出了技术领域中需要解决的几个关键问题：</p><h2 id="数据传输的安全性"><a href="#数据传输的安全性" class="headerlink" title="数据传输的安全性"></a>数据传输的安全性</h2><p>为确保数据在网络中的传输不会被窃听或拦截，需要对数据进行加密。由于传统网络通道是公共的，明文数据传输存在巨大的安全隐患，因此加密是关键。</p><ul><li>加密方法：主要包括对称加密（如 AES）和非对称加密（如 RSA）。</li><li>工作流程：通常通过非对称加密协商密钥，然后使用对称加密传输数据，这种方式兼顾了安全性和效率。</li><li>关键点：密钥的管理和协商机制至关重要，是整个加密传输体系的基础。</li></ul><h2 id="数据的完整性"><a href="#数据的完整性" class="headerlink" title="数据的完整性"></a>数据的完整性</h2><p>即使数据加密了，也不能排除中间人对数据进行篡改的可能性。为此，需要对数据的完整性进行校验，以确保数据未被篡改或者能检测到篡改的情况。</p><ul><li>实现方法：通常使用 HMAC 或数字签名算法生成数据的摘要，接收方通过校验摘要来确认数据的完整性。</li><li>目标：防止恶意篡改，同时提供篡改检测的能力。</li></ul><h2 id="授权与认证"><a href="#授权与认证" class="headerlink" title="授权与认证"></a>授权与认证</h2><p>当通过 VPN 访问内部资源时，需要确保访问者是合法用户，并且具有相应的权限。</p><ul><li>认证机制：包括用户名密码、双因素认证、证书等方式。</li><li>授权流程：需要精确验证用户身份，并控制其对资源的访问权限，确保最小权限原则的实现。</li></ul><h1 id="VPN-隧道协议解析"><a href="#VPN-隧道协议解析" class="headerlink" title="VPN 隧道协议解析"></a>VPN 隧道协议解析</h1><p>我们了解了VPN的技术背景、发展脉络，以及需要解决的问题。针对这些问题，我们探讨了已有的解决方案。我们将围绕这些技术问题，逐步讨论VPN的协议层及其解决方案，重点介绍VPN的隧道协议 (Tunnel Protocol)。  </p><h2 id="隧道协议的基本概念"><a href="#隧道协议的基本概念" class="headerlink" title="隧道协议的基本概念"></a>隧道协议的基本概念</h2><p>首先引入“隧道协议”的概念（Tunnel）。很多人，尤其是初学者，对“隧道”这一术语容易产生误解，认为隧道是网络中拉了一条“实体专线”，类似于物理存在的专用网络。然而，实际上的“隧道协议”并不是这个含义。  </p><p>隧道协议指的是在网络通信的两端（如Client和Server）之间传输的数据经过加密或重新打包，使得这些数据的格式只有通信双方能够识别。隧道技术通过“重新打包（Repackaging）”的方法，保障了通信数据的安全性。例如，在传输数据时，对其进行加密和封装，这种封装过程就是隧道协议的核心工作之一。隧道技术是VPN实现数据安全的核心技术，也是VPN构建的基础。  </p><p>当前的隧道协议有很多种，接下来我们将重点介绍两个最具代表性的协议：IPSec和WireGuard。  </p><h2 id="IPSec协议"><a href="#IPSec协议" class="headerlink" title="IPSec协议"></a>IPSec协议</h2><p>IPSec是一个公开的标准和框架，也是较早实现隧道协议的具体应用之一。IPSec提供了数据加密、数据完整性验证以及身份认证等功能，主要由以下几部分组成：  </p><ol><li><p><strong>认证头部 (Authentication Header, AH)</strong><br>在IP数据包传输之前，IPSec会通过一个认证头部过程对数据进行重新打包。该过程在原始的IP数据包上附加额外的安全信息，包括安全策略 (Security Policy)、加密参数等。这些附加信息确保了数据的完整性和认证可靠性。在接收端，数据包会先通过认证头部进行解密和验证，再处理原始的IP数据。  </p></li><li><p><strong>封装安全载荷 (Encapsulating Security Payload, ESP)</strong><br>ESP进一步加密了IP数据包中的有效载荷（Payload），保护其机密性。这一过程通常结合使用加密算法（如DES、AES）和摘要算法（如MD5、SHA）。虽然一些老旧的算法可能存在安全隐患，但IPSec更多的是提供一个框架，后续可以通过替换算法来满足现代安全需求。  </p></li><li><p><strong>密钥交换 (Internet Key Exchange, IKE)</strong><br>IPSec的加密过程采用对称加密，这需要通信双方共享一个密钥。IKE协议负责协商和交换密钥，分为以下两个阶段：  </p><ul><li><strong>阶段一：身份认证和密钥协商</strong><br>使用非对称加密算法（如RSA）进行身份验证并交换初始密钥。  </li><li><p><strong>阶段二：生成对称密钥</strong><br>基于阶段一的协商结果，生成对称加密的密钥，并用于后续的数据加密操作。  </p><p><img src="/2025/01/25/vpn/phase.svg" alt></p></li></ul><p>这一密钥协商过程类似于TLS/SSL建立连接时的机制，也涉及到CA（Certificate Authority）数字签名等基础设施的支持。  </p></li><li><p><strong>工作模式</strong><br>IPSec支持两种主要的工作模式：  </p><ul><li><strong>隧道模式 (Tunnel Mode)</strong>：对整个IP数据包（包括头部和载荷）进行加密和重新封装，提供更全面的保护。  </li><li><strong>传输模式 (Transport Mode)</strong>：仅对IP数据包的有效载荷部分进行加密，不对头部信息进行封装。  </li></ul></li></ol><p>隧道模式由于其全面的端到端保护，是当前应用最广泛的一种模式。  </p><p>简单总结IPSec的工作流程：  </p><ol><li>数据发送前，进行身份认证和授权，确保通信双方是合法用户；  </li><li>通过IKE协议完成密钥的协商与交换；  </li><li>使用生成的密钥对数据进行加密、封装，并保证数据的完整性和安全性；  </li><li>隧道断开时，对通信过程进行清理，确保安全。</li></ol><p><img src="/2025/01/25/vpn/ike.png" alt></p><h2 id="WireGuard协议"><a href="#WireGuard协议" class="headerlink" title="WireGuard协议"></a>WireGuard协议</h2><p>WireGuard是一个相对较新的隧道协议，其官网介绍称其为“<strong>极其简单、高效且现代化的VPN协议 (Extremely Simple Yet Fast and Modern VPN)</strong>”，采用最先进的密码学技术，目标是比IPSec和OpenVPN更快速、更轻量、更安全。  </p><p><img src="/2025/01/25/vpn/wireguard.svg" alt></p><p>与IPSec相比，WireGuard的代码量少得多，设计也更加简单。然而，IPSec作为一个框架，定义了VPN的基本工作流程和隧道协议的实现方式，而WireGuard则通过现代化的优化，在以下方面表现出色：  </p><ol><li><strong>更高效的加密算法</strong><br>WireGuard采用了更现代化的加密算法套件，如ChaCha20和Poly1305，以提高加密效率和安全性。  </li><li><strong>更快的连接建立</strong><br>WireGuard在隧道建立过程中采用了握手协议 (Handshake Protocol)，显著减少了隧道建立的耗时，特别适用于移动端应用。  </li><li><strong>轻量级设计</strong><br>WireGuard的代码量少，便于审计和维护，同时降低了部署成本。  </li></ol><p>虽然WireGuard在安全性和性能上优于传统协议，但其本质仍然是对IPSec框架的改进与优化。  </p><h2 id="VPN的层级解析"><a href="#VPN的层级解析" class="headerlink" title="VPN的层级解析"></a>VPN的层级解析</h2><p>VPN的隧道协议有多种实现，例如SSL VPN、OpenVPN、PPTP等，但它们的基本原理相似。我们最初提到的问题是：<strong>VPN的连接建立在哪一层？是否对应用层透明？</strong>  </p><p>通过对VPN背景和技术细节的分析，可以得出以下结论：  </p><ul><li>VPN的隧道技术是在网络层对IP数据包进行重新打包和封装。</li><li>使用VPN后，数据在应用层产生，经传输层（TCP/UDP）打包形成IP数据包。VPN会在网络层对IP数据包进行加密和重新打包，附加认证头部或安全载荷，实现安全传输。  </li></ul><p>能不能在应用程序中感知到用户是否连接了VPN，从而进行一些优化？答案是：<strong>应用层是无法感知VPN连接的存在的</strong>。 </p><p>那么，VPN软件到底是如何实现的？它又是如何对 IP 数据包进行重新打包的？这就涉及到一个重要的概念——<strong>虚拟网卡</strong>。在 Linux 系统中，有一个叫 <strong>TUN/TAP</strong> 的机制，它可以在设备上模拟一个虚拟网卡，直接拦截实际网卡传输的数据。例如，当我们通过 VPN 建立代理隧道后，虚拟网卡会拦截所有实际网卡的数据流量。接着，通过虚拟网卡获取的数据，VPN 软件会对数据包进行打包、解包，以及加密、解密等一系列操作。这种机制是当前所有 VPN 软件的技术核心，虚拟网卡在其中扮演了至关重要的角色。</p><p>到这里，我们基本上完整介绍了 VPN 的技术细节，包括加密密钥的协商与交换、加密传输的实现、认证授权机制、隧道的建立与关闭，以及 VPN 所处的网络层级、对应用层的影响，以及如何获取网络层数据等问题。</p><h2 id="VPN-与代理、防火墙的关联与区别"><a href="#VPN-与代理、防火墙的关联与区别" class="headerlink" title="VPN 与代理、防火墙的关联与区别"></a>VPN 与代理、防火墙的关联与区别</h2><p>接下来我们讨论一个更基础但常见的问题：<strong>VPN、代理和防火墙三者之间的关系是什么？</strong></p><ol><li><p><strong>代理的基本概念</strong><br>代理是一种用户常见的技术，比如我们可以手动设置代理服务器，或使用正向代理和反向代理。代理的核心功能是转发网络请求。从严格意义上讲，VPN 也可以被看作是一种特殊的代理，因为所有的数据包都会经过 VPN 的网关中转，然后由 VPN 网关访问目标资源。这种模式和代理非常相似，但在实现机制和网络分层上存在显著区别。  </p><ul><li><strong>代理的实现</strong>：代理运行在<strong>应用层</strong>，对应用层的数据包是有感知的，它会直接将应用层的数据原封不动地转发到代理服务器。例如，HTTP 代理或 SOCKS 代理就是运行在应用层的典型例子。</li><li><strong>VPN 的实现</strong>：VPN 是对<strong>应用层无感知</strong>的。它对网络层的数据包进行重新打包，再发送到 VPN 网关进行处理。尽管形式上与代理类似，但 VPN 在实现细节和网络分层上的差别显而易见。</li></ul></li><li><p><strong>反向代理的特点</strong><br>反向代理是用户通常感知不到的，它主要用来做负载均衡。举例来说，当一个请求发到 Web 网关时，反向代理会根据负载情况将请求分发到最合适的网络节点。这种机制常用于分布式系统中的流量管理。</p></li><li><p><strong>防火墙的功能</strong><br>防火墙与 VPN 和代理的功能有本质区别。它主要负责网络流量的过滤，是流量进入系统的第一道防线。防火墙通过预设的规则来判断和拦截“可疑”或“不合规”的数据包，其主要目的在于安全防护，而非流量转发。</p></li></ol><h1 id="GlobalProtect"><a href="#GlobalProtect" class="headerlink" title="GlobalProtect"></a>GlobalProtect</h1><p>GlobalProtect 是 Palo Alto Networks 提供的一种 VPN 解决方案，能够帮助企业和组织提供安全的远程访问。</p><p>下面我们将探讨其工作机制、日志文件以及如何进行 VPN 连接分析。</p><h2 id="工作机制"><a href="#工作机制" class="headerlink" title="工作机制"></a>工作机制</h2><p>GlobalProtect是一种通过加密隧道建立远程访问VPN的技术，通常用于保护企业内部网络免受外部威胁。其工作流程可分为几个阶段：</p><h3 id="连接初始化阶段"><a href="#连接初始化阶段" class="headerlink" title="连接初始化阶段"></a>连接初始化阶段</h3><ul><li><strong>客户端连接尝试</strong>：客户端会尝试连接到预配置的门户服务器。</li><li><strong>身份验证</strong>：客户端通过设备证书或用户凭据进行身份验证，门户服务器使用不同的验证方式（如LDAP、RADIUS、SAML等）来验证用户身份。</li><li><strong>网关分配</strong>：身份验证成功后，门户服务器将选择一个最佳的网关，并将相关配置推送到客户端。</li></ul><h3 id="隧道建立阶段"><a href="#隧道建立阶段" class="headerlink" title="隧道建立阶段"></a>隧道建立阶段</h3><ul><li><strong>连接到网关</strong>：客户端连接到指定的网关，建立TLS加密通道以保证通信的安全。</li><li><strong>IPSec协商</strong>：协商IPSec的相关参数（如加密算法和认证方法），并建立IPSec隧道。</li><li><strong>分配虚拟IP</strong>：网关为客户端分配虚拟IP地址，确保通信的私密性。</li></ul><h3 id="数据传输阶段"><a href="#数据传输阶段" class="headerlink" title="数据传输阶段"></a>数据传输阶段</h3><ul><li><strong>分隧道配置</strong>：根据预设的分隧道规则，决定哪些流量通过VPN隧道。</li><li><strong>精细化路由</strong>：流量路由可以根据目标地址、应用类型和用户身份等条件进行细分。</li><li><strong>加密流量</strong>：所有通过VPN隧道的流量都会进行加密，确保数据传输的安全。</li><li><strong>安全策略执行</strong>：网关会执行安全策略并进行威胁防护。</li></ul><h3 id="会话维护阶段"><a href="#会话维护阶段" class="headerlink" title="会话维护阶段"></a>会话维护阶段</h3><ul><li><strong>心跳包</strong>：客户端定期发送心跳包以维持连接的有效性。</li><li><strong>自动重连</strong>：在网络中断时，客户端能够自动尝试重新连接。</li><li><strong>网络优化</strong>：客户端监控网络质量，并根据情况自动优化连接。</li><li><strong>HIP更新</strong>：客户端定期更新主机信息配置（HIP），确保端点符合安全要求。</li></ul><h3 id="HIP（主机信息配置）检查"><a href="#HIP（主机信息配置）检查" class="headerlink" title="HIP（主机信息配置）检查"></a>HIP（主机信息配置）检查</h3><ul><li><strong>端点安全检查</strong>：GlobalProtect会定期检查设备的安全状态，验证防病毒软件、防火墙及其他安全软件的运行状态。</li><li><strong>系统补丁检查</strong>：检测操作系统和应用程序的补丁级别，确保设备没有已知的漏洞。</li><li><strong>访问控制</strong>：根据安全检查的结果决定是否允许连接。</li></ul><h3 id="断开连接-重新连接处理"><a href="#断开连接-重新连接处理" class="headerlink" title="断开连接/重新连接处理"></a>断开连接/重新连接处理</h3><ul><li><strong>自动重连</strong>：如果检测到网络中断，客户端会自动尝试重新连接。</li><li><strong>故障转移</strong>：支持多个网关之间的故障转移，确保稳定的连接。</li><li><strong>清理操作</strong>：在断开连接后，客户端会清理缓存并恢复初始状态，保持连接会话状态以便快速重新连接。</li></ul><h2 id="日志文件"><a href="#日志文件" class="headerlink" title="日志文件"></a>日志文件</h2><p>GlobalProtect的日志文件对于故障排查和性能分析至关重要。以下是几种常见的日志文件及其作用：</p><h3 id="核心日志文件"><a href="#核心日志文件" class="headerlink" title="核心日志文件"></a>核心日志文件</h3><ol><li><strong><code>PanGPS.log</code></strong>：记录连接状态、身份验证过程、隧道建立及核心信息，是故障排查的主要参考文件。</li><li><strong><code>pan_gp_event.log</code></strong>：记录GlobalProtect的事件日志，如连接、断开、重新连接等事件，用于追踪连接历史。</li><li><strong><code>PanGPA.log</code></strong>：与代理认证相关的日志，记录认证过程和结果，用于排查认证问题。</li><li><strong><code>PanGpHip.log</code> 和 <code>PanGpHipMp.log</code></strong>：与HIP（主机信息配置）相关的日志，记录端点的安全检查信息，用于排查合规性问题。</li></ol><h3 id="诊断与配置文件"><a href="#诊断与配置文件" class="headerlink" title="诊断与配置文件"></a>诊断与配置文件</h3><ol><li><strong><code>debug_drv.log</code></strong>：记录驱动程序调试日志，通常用于分析底层网络接口问题。</li><li><strong><code>pan_gp_hrpt.xml</code></strong>：HIP报告文件，包含详细的端点安全状态信息。</li></ol><h3 id="系统相关文件"><a href="#系统相关文件" class="headerlink" title="系统相关文件"></a>系统相关文件</h3><ol><li><strong><code>system.log</code> 和 <code>system.log.[0-3].gz</code></strong>：系统级日志文件，包含压缩的历史日志文件，适用于深度故障分析。</li><li><strong><code>DNS.txt</code> 和 <code>IfConfig.txt</code></strong>：记录DNS配置信息和网络接口配置信息。</li><li><strong><code>NetStat.txt</code> 和 <code>RoutePrint.txt</code></strong>：记录网络连接状态和路由表信息。</li></ol><h3 id="状态与代理相关文件"><a href="#状态与代理相关文件" class="headerlink" title="状态与代理相关文件"></a>状态与代理相关文件</h3><ol><li><strong><code>MachineState.txt</code></strong>：记录设备的硬件和系统状态。</li><li><strong><code>SystemInfo.txt</code></strong>：系统信息摘要，包含操作系统版本和配置等详细信息。</li><li><strong><code>PanNExt.log</code> 和 <code>Proxy.txt</code></strong>：记录浏览器扩展日志和代理设置配置信息。</li></ol><h2 id="GlobalProtect-VPN连接分析"><a href="#GlobalProtect-VPN连接分析" class="headerlink" title="GlobalProtect VPN连接分析"></a>GlobalProtect VPN连接分析</h2><p>以下是从GlobalProtect日志中提取的一些分析示例，展示了VPN连接过程的不同阶段。</p><h3 id="身份验证阶段"><a href="#身份验证阶段" class="headerlink" title="身份验证阶段"></a>身份验证阶段</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">// 证书验证开始</span><br><span class="line">P1681-T23571 01/15/2025 19:20:23:858 Debug(1027): 收到挑战 NSURLAuthenticationMethodServerTrust</span><br><span class="line"></span><br><span class="line">// 添加信任证书</span><br><span class="line">P1681-T23571 01/15/2025 19:20:23:864 Info (1041): 添加受信锚 (</span><br><span class="line">    &quot;&lt;cert(0x7ff102f08080) s: Encryption Everywhere DV TLS CA - G1 i: DigiCert Global Root CA&gt;&quot;</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">// 验证成功</span><br><span class="line">P1681-T23571 01/15/2025 19:20:23:868 Info (647): 服务器已信任 hfremote.ssbvideo.com</span><br></pre></td></tr></table></figure><p><strong>分析：</strong></p><ul><li>证书验证开始，客户端启动与服务器之间的安全认证过程。</li><li>客户端添加受信证书，验证服务器的身份。</li><li>验证成功后，客户端信任服务器并继续连接。</li></ul><h3 id="网关配置获取"><a href="#网关配置获取" class="headerlink" title="网关配置获取"></a>网关配置获取</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">// 获取VPN网关配置</span><br><span class="line">P1681-T27919 01/15/2025 19:20:23:956 Debug(2842): 获取网关 hfremote.ssbvideo.com:4433 配置: &lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</span><br><span class="line"></span><br><span class="line">接收到的关键配置：</span><br><span class="line">- 分配IP: 10.100.166.34</span><br><span class="line">- DNS服务器: 10.100.160.80, 10.100.160.90</span><br><span class="line">- MTU设置: 1400</span><br><span class="line">- 会话超时: 10800秒</span><br></pre></td></tr></table></figure><p><strong>分析：</strong></p><ul><li>客户端从网关接收到VPN连接的关键配置信息，包括IP分配、DNS服务器、MTU设置和会话超时。</li></ul><h3 id="隧道建立尝试"><a href="#隧道建立尝试" class="headerlink" title="隧道建立尝试"></a>隧道建立尝试</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">// 初始IPSec尝试</span><br><span class="line">P1681-T27919 01/15/2025 19:20:23:964 Debug(166): 尝试连接IPSec到 220.248.226.146[4501]</span><br><span class="line"></span><br><span class="line">// IPSec失败并回退至SSL</span><br><span class="line">P1681-T27919 01/15/2025 19:20:28:039 Info (366): 连接到 220.248.226.146 失败</span><br><span class="line">P1681-T27919 01/15/2025 19:20:28:039 Debug(819): IPSec回退原因是IPSec连接失败</span><br></pre></td></tr></table></figure><p><strong>分析：</strong></p><ul><li>客户端首先尝试通过IPSec协议建立连接，但由于连接失败，自动回退到SSL协议继续隧道建立。</li></ul><h3 id="SSL隧道建立"><a href="#SSL隧道建立" class="headerlink" title="SSL隧道建立"></a>SSL隧道建立</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">// SSL连接建立</span><br><span class="line">P1681-T27919 01/15/2025 19:20:28:151 Info (119): 成功建立SSL隧道到 220.248.226.146(4433)</span><br><span class="line">P1681-T27919 01/15/2025 19:20:28:151 Info (376): 与 220.248.226.146 建立隧道</span><br></pre></td></tr></table></figure><p><strong>分析：</strong></p><ul><li>在回退到SSL协议后，成功建立了SSL隧道，确保安全的连接。</li></ul><h1 id="总结：始于问题、终于理解"><a href="#总结：始于问题、终于理解" class="headerlink" title="总结：始于问题、终于理解"></a>总结：始于问题、终于理解</h1><p>这段时间我零零散散地了解了一些VPN相关的概念，感觉对以后可能遇到的类似问题不会再那么陌生了。通过这些学习，我不仅掌握了一些基本的方向和概念，也顺便了解了VPN技术的一些发展趋势，比如“零信任网络”和结合人工智能来提高安全性和隐私保护的技术。这些技术的背后都是为了解决现实中的需求，未来遇到具体问题时，我也能更加从容地进行分析和应对。</p><p>另外，在写这篇文章的过程中，我也遇到了一个新的问题。当我在家里连接到公司的VPN时，虽然成功连接，但却无法访问公司的一些内部网络资源。于是，我询问了IT部门，他们建议我尝试用手机热点重新连接WiFi，结果问题解决了。我也好奇为什么只是换了个IP就能正常连接。后来和IT部门进一步沟通后得知，我们家庭网络的IP是动态分配的，而某些IP可能会被封锁，导致无法连接。换个热点后，IP重新分配，一切问题迎刃而解。至于这个IP是否被运营商屏蔽，还是被我们内部网关屏蔽，具体情况还不清楚，但从整体来看，这次经历让我对VPN的技术有了更深的理解。</p><p>通过这个过程，我感受到解决问题的驱动力让我不断学习和探索，不仅能够找到具体的答案，还能通过查阅资料形成自己的总结和沉淀。</p><p>最后，引用爱因斯坦的一段话，与大家共勉：</p><blockquote><p><strong>“提出一个问题往往比解决一个问题更重要。</strong><br><strong>The formulation of a problem is often more essential than its solution.”</strong></p></blockquote>]]></content>
    
    
    <summary type="html">&lt;p&gt;通过一则VPN断开引发DNS请求异常的案例，本文探讨了VPN的核心技术，包括隧道概念、网络层定位、应用层透明性，以及网络流量分割的实现原理。同时，结合 GlobalProtect 软件的实践，探索日志分析的具体方法与思路。&lt;/p&gt;</summary>
    
    
    
    
    <category term="VPN技术" scheme="https://ustcqidi.github.io/tags/VPN%E6%8A%80%E6%9C%AF/"/>
    
    <category term="DNS故障" scheme="https://ustcqidi.github.io/tags/DNS%E6%95%85%E9%9A%9C/"/>
    
    <category term="网络安全" scheme="https://ustcqidi.github.io/tags/%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8/"/>
    
    <category term="远程办公" scheme="https://ustcqidi.github.io/tags/%E8%BF%9C%E7%A8%8B%E5%8A%9E%E5%85%AC/"/>
    
    <category term="Global Protect" scheme="https://ustcqidi.github.io/tags/Global-Protect/"/>
    
    <category term="网络分层" scheme="https://ustcqidi.github.io/tags/%E7%BD%91%E7%BB%9C%E5%88%86%E5%B1%82/"/>
    
    <category term="隧道协议" scheme="https://ustcqidi.github.io/tags/%E9%9A%A7%E9%81%93%E5%8D%8F%E8%AE%AE/"/>
    
    <category term="流量切分" scheme="https://ustcqidi.github.io/tags/%E6%B5%81%E9%87%8F%E5%88%87%E5%88%86/"/>
    
    <category term="故障排查" scheme="https://ustcqidi.github.io/tags/%E6%95%85%E9%9A%9C%E6%8E%92%E6%9F%A5/"/>
    
    <category term="网络代理" scheme="https://ustcqidi.github.io/tags/%E7%BD%91%E7%BB%9C%E4%BB%A3%E7%90%86/"/>
    
    <category term="防火墙" scheme="https://ustcqidi.github.io/tags/%E9%98%B2%E7%81%AB%E5%A2%99/"/>
    
  </entry>
  
  <entry>
    <title>拥抱AI：从基础框架团队视角探索效率与挑战</title>
    <link href="https://ustcqidi.github.io/2025/01/24/ai-brainstorm/"/>
    <id>https://ustcqidi.github.io/2025/01/24/ai-brainstorm/</id>
    <published>2025-01-24T10:02:03.000Z</published>
    <updated>2025-01-24T10:05:47.278Z</updated>
    
    <content type="html"><![CDATA[<p>在这个 <strong>All in AI</strong> 的时代，无论是学习、工作、生活还是娱乐，AI 已经深刻融入了各种场景。大家利用 AI 来赋能，不仅解决问题，还能显著降低工作量、提升工作效率。</p><p>今天下午我们组织了一场非常有趣的 <strong>Brainstorm 会议</strong>，探讨了作为客户端基础框架团队，我们如何应对 AI 带来的变化与冲击，如何利用 AI 解决我们面临的问题，同时规避可能产生的负面影响。</p><span id="more"></span><h3 id="1-AI-对现有业务流程和生态的潜在冲击"><a href="#1-AI-对现有业务流程和生态的潜在冲击" class="headerlink" title="1. AI 对现有业务流程和生态的潜在冲击"></a><strong>1. AI 对现有业务流程和生态的潜在冲击</strong></h3><p>AI 模型及其应用场景是否会对我们现有的视频会议业务流程和生态系统带来颠覆性或破坏性的影响？<br>例如：  </p><ul><li><strong>频繁调用 API 的问题</strong><br>AI 助手可能频繁调用我们的接口，生成会议纪要、规划议程或实时生成摘要。这类新的 AI 驱动业务模式会对后台流量、代码框架乃至整体业务流程产生压力。</li><li><strong>业务场景的变化</strong><br>传统会议可能只涉及会议内容的简单记录，但随着 AI 自动生成摘要和行动项的普及，我们的系统是否能高效支持这种业务扩展？如何应对这些流量和性能冲击？</li></ul><h3 id="2-借助-AI-提升团队开发效率"><a href="#2-借助-AI-提升团队开发效率" class="headerlink" title="2. 借助 AI 提升团队开发效率"></a><strong>2. 借助 AI 提升团队开发效率</strong></h3><p>我们主要从以下几个方向进行探讨：  </p><h4 id="2-1-AI-驱动的问答机器人"><a href="#2-1-AI-驱动的问答机器人" class="headerlink" title="2.1 AI 驱动的问答机器人"></a><strong>2.1 AI 驱动的问答机器人</strong></h4><p>作为提供客户端基础服务和框架的团队，我们需要频繁解答业务团队的技术问题，例如 API 使用方法、技术支持，甚至客户问题的处理。这些内容虽然已有大量文档和知识沉淀（如文档目录、培训视频、PPT 等），但查找效率较低。<br>我们是否可以开发一个 <strong>面向基础组件的 AI 问答机器人</strong>，帮助团队成员通过对话快速获取答案，从而减轻技术支持的工作量？</p><h4 id="2-2-自动生成单元测试代码"><a href="#2-2-自动生成单元测试代码" class="headerlink" title="2.2 自动生成单元测试代码"></a><strong>2.2 自动生成单元测试代码</strong></h4><p>我们是否能借助 AI 模型自动生成 <strong>单元测试</strong> 或 <strong>TA 测试代码</strong>？<br>具体设想：  </p><ul><li>对于基础模块中的常用函数（如字符串操作、加解密方法等），通过提供函数原型，AI 模型可生成基于 GTest 的 C++ 测试代码，或提供测试建议。</li><li>对于端到端测试（E2E），我们目前基于 Lua 封装了接口驱动的测试框架。它支持多角色、多设备的复杂测试场景，但测试用例的设计、胶水代码的组织仍然高度依赖人工。<br>我们是否可以通过 AI 生成测试用例的建议、自动编排测试流程，甚至直接生成 Lua 脚本，从而减少人工投入？</li></ul><h4 id="2-3-AI-辅助日志分析"><a href="#2-3-AI-辅助日志分析" class="headerlink" title="2.3 AI 辅助日志分析"></a><strong>2.3 AI 辅助日志分析</strong></h4><p>目前我们的日志模式较为固定，错误模式和关键字有一定规律，但团队仍需投入大量时间查看日志、解决问题。如果能基于我们业务场景训练一个 <strong>定制化的日志分析模型</strong>，是否可以帮助我们快速定位常见问题、提高问题排查效率？</p><h4 id="2-4-代码审查与-Bug-检查"><a href="#2-4-代码审查与-Bug-检查" class="headerlink" title="2.4 代码审查与 Bug 检查"></a><strong>2.4 代码审查与 Bug 检查</strong></h4><p>现有 AI 模型在代码生成和错误修复方面已表现出强大的能力。我们是否可以利用 AI 帮助团队：  </p><ul><li>自动审查代码风格，确保一致性；  </li><li>查找常见错误并提供修改建议；  </li><li>提高代码质量和开发效率？</li></ul>]]></content>
    
    
    <summary type="html">&lt;p&gt;在这个 &lt;strong&gt;All in AI&lt;/strong&gt; 的时代，无论是学习、工作、生活还是娱乐，AI 已经深刻融入了各种场景。大家利用 AI 来赋能，不仅解决问题，还能显著降低工作量、提升工作效率。&lt;/p&gt;
&lt;p&gt;今天下午我们组织了一场非常有趣的 &lt;strong&gt;Brainstorm 会议&lt;/strong&gt;，探讨了作为客户端基础框架团队，我们如何应对 AI 带来的变化与冲击，如何利用 AI 解决我们面临的问题，同时规避可能产生的负面影响。&lt;/p&gt;</summary>
    
    
    
    
    <category term="AI赋能开发效能提升" scheme="https://ustcqidi.github.io/tags/AI%E8%B5%8B%E8%83%BD%E5%BC%80%E5%8F%91%E6%95%88%E8%83%BD%E6%8F%90%E5%8D%87/"/>
    
    <category term="问答机器人" scheme="https://ustcqidi.github.io/tags/%E9%97%AE%E7%AD%94%E6%9C%BA%E5%99%A8%E4%BA%BA/"/>
    
    <category term="日志分析" scheme="https://ustcqidi.github.io/tags/%E6%97%A5%E5%BF%97%E5%88%86%E6%9E%90/"/>
    
    <category term="技术支持效率" scheme="https://ustcqidi.github.io/tags/%E6%8A%80%E6%9C%AF%E6%94%AF%E6%8C%81%E6%95%88%E7%8E%87/"/>
    
    <category term="测试自动化与AI融合" scheme="https://ustcqidi.github.io/tags/%E6%B5%8B%E8%AF%95%E8%87%AA%E5%8A%A8%E5%8C%96%E4%B8%8EAI%E8%9E%8D%E5%90%88/"/>
    
  </entry>
  
  <entry>
    <title>构建高效的客户端 Rate Limit 框架：设计与应用场景</title>
    <link href="https://ustcqidi.github.io/2025/01/24/rate-limit/"/>
    <id>https://ustcqidi.github.io/2025/01/24/rate-limit/</id>
    <published>2025-01-24T05:26:47.000Z</published>
    <updated>2025-01-24T06:46:12.258Z</updated>
    
    <content type="html"><![CDATA[<p>本文介绍了一个用于客户端的通用限流框架设计与实践。该框架通过多种限流策略（计数器、滑动窗口、令牌桶）解决了HTTP请求并发、reCAPTCHA验证、日志写入等场景的限流需求。框架采用模块化设计，支持灵活配置和扩展，并集成了开发环境实时告警和生产环境Telemetry监控功能，有效提升了系统稳定性和用户体验。</p><span id="more"></span><h1 id="1-问题背景与需求"><a href="#1-问题背景与需求" class="headerlink" title="1. 问题背景与需求"></a><strong>1. 问题背景与需求</strong></h1><p>在现代客户端开发中，资源管理和系统稳定性至关重要。然而，在实际业务中，我们发现了以下问题：</p><ol><li><strong>HTTP 请求无约束</strong>：短时间内可能触发大量并发 HTTP 请求，缺乏全局限制，容易导致服务端压力激增。</li><li><strong>不合理的 reCaptcha 错误处理</strong>：当服务负载较高时，频繁弹出 reCaptcha 提示框，极大地影响用户体验。</li><li><strong>日志系统重复记录</strong>：大量重复 MemLog 日志可能掩盖关键问题，影响诊断效率。</li><li><strong>重复 Telemetry 数据</strong>：Telemetry 系统被重复数据淹没，导致分析困难。</li><li><strong>频繁文件操作</strong>：频繁打开文件可能导致系统资源耗尽。</li><li><strong>频繁数据库读写</strong>：短时间内的高频数据库操作影响性能并降低系统响应速度。</li></ol><p><strong>解决目标</strong>：<br>为了解决以上问题，我们设计了一个通用的 <strong>Rate Limit 框架</strong>，以实现以下目标：</p><ul><li>统一管理各类操作的限流规则（如 HTTP 请求、日志记录、文件操作等）。</li><li>提供灵活可配置的限流策略以适应不同业务场景。</li><li>优化用户体验，减少无效操作对用户的干扰。</li><li>提供扩展性，适配未来可能的需求变化。</li></ul><h1 id="2-框架设计思路"><a href="#2-框架设计思路" class="headerlink" title="2. 框架设计思路"></a><strong>2. 框架设计思路</strong></h1><p>根据需求，我们将 Rate Limit 框架的设计分为以下几个关键模块：</p><ol><li><strong>统一管理模块</strong>：提供统一的限流机制，支持跨业务模块的限流需求。</li><li><strong>策略定义与配置</strong>：允许开发者为不同场景灵活配置限流策略，包括阈值、时间窗口等。</li><li><strong>数据采集与监控</strong>：实时采集操作数据并监控限流执行状态。</li><li><strong>限流执行与反馈</strong>：根据策略结果进行限流操作，同时提供友好的反馈机制，如开发阶段的对话框提示和线上日志上报。</li></ol><h1 id="3-框架结构设计"><a href="#3-框架结构设计" class="headerlink" title="3. 框架结构设计"></a><strong>3. 框架结构设计</strong></h1><h2 id="3-1-核心组件"><a href="#3-1-核心组件" class="headerlink" title="3.1 核心组件"></a><strong>3.1 核心组件</strong></h2><ol><li><strong>RateLimiter</strong>：限流核心模块，负责执行限流策略。</li><li><strong>RateLimitStrategy</strong>：策略配置模块，用于定义场景的限流规则和算法。可以为不同的业务场景（如HTTP请求、文件操作、数据库操作）设置不同的限流策略和配置。</li><li><strong>DataCollector</strong>：数据采集模块，负责实时记录操作数据。通过DataCollector接口，可以实现自定义的数据收集逻辑，适应不同的监控需求。</li><li><strong>RateLimitHandler</strong>：限流处理模块，根据策略执行反馈操作（如弹窗或日志上报）。</li></ol><h2 id="3-2-架构图"><a href="#3-2-架构图" class="headerlink" title="3.2 架构图"></a><strong>3.2 架构图</strong></h2><p>以下是框架的核心架构图：</p><p><img src="/2025/01/24/rate-limit/arch.png" alt="image.png"></p><h2 id="3-3-核心类图"><a href="#3-3-核心类图" class="headerlink" title="3.3 核心类图"></a><strong>3.3 核心类图</strong></h2><p>以下是核心类的 UML 类图：</p><p><img src="/2025/01/24/rate-limit/class.png" alt="image.png"></p><h1 id="4-实现细节"><a href="#4-实现细节" class="headerlink" title="4. 实现细节"></a><strong>4. 实现细节</strong></h1><h2 id="4-1-核心模块代码"><a href="#4-1-核心模块代码" class="headerlink" title="4.1 核心模块代码"></a><strong>4.1 核心模块代码</strong></h2><h3 id="RateLimitTypes-h"><a href="#RateLimitTypes-h" class="headerlink" title="RateLimitTypes.h"></a><strong>RateLimitTypes.h</strong></h3><p>定义限流策略的核心数据结构：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// RateLimitTypes.h</span></span><br><span class="line"><span class="meta">#<span class="keyword">ifndef</span> RATE_LIMIT_TYPES_H</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> RATE_LIMIT_TYPES_H</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;chrono&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> RateLimitFramework &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">enum class</span> <span class="title class_">RateLimitAlgorithm</span> &#123;</span><br><span class="line">    SIMPLE_COUNTER,</span><br><span class="line">    SLIDING_WINDOW,</span><br><span class="line">    TOKEN_BUCKET</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">enum class</span> <span class="title class_">StrategyType</span> &#123;</span><br><span class="line">Request,</span><br><span class="line">    Recapcha,</span><br><span class="line">    MEMLOG,</span><br><span class="line">    DB_IO</span><br><span class="line"><span class="comment">// Add more strategy types as needed</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">RateLimitStrategy</span> &#123;</span><br><span class="line">    StrategyType strategyType;</span><br><span class="line"><span class="type">int</span> threshold;</span><br><span class="line">std::chrono::milliseconds timeWindow;</span><br><span class="line">RateLimitAlgorithm algorithm;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">&#125; <span class="comment">// namespace RateLimitFramework</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span> <span class="comment">// RATE_LIMIT_TYPES_H</span></span></span><br></pre></td></tr></table></figure><h3 id="DataCollector"><a href="#DataCollector" class="headerlink" title="DataCollector"></a><strong>DataCollector</strong></h3><p>负责记录和查询操作时间戳：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">ifndef</span> DATA_COLLECTOR_H</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> DATA_COLLECTOR_H</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;cmmlib/CmmBase.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;RateLimitTypes.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;chrono&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;deque&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std::chrono;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> RateLimitFramework &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">CMM_API</span> DataCollector &#123;</span><br><span class="line"><span class="keyword">protected</span>:</span><br><span class="line">    std::map&lt;std::string, std::deque&lt;std::chrono::steady_clock::time_point&gt;&gt; timestamps;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">record</span><span class="params">(<span class="type">const</span> std::string&amp; key, <span class="type">const</span> RateLimitStrategy&amp; strategy)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="type">int</span> <span class="title">getData</span><span class="params">(<span class="type">const</span> std::string&amp; key, <span class="type">const</span> RateLimitStrategy&amp; strategy)</span> <span class="type">const</span></span>;</span><br><span class="line">    <span class="keyword">virtual</span> ~<span class="built_in">DataCollector</span>() = <span class="keyword">default</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">&#125; <span class="comment">// namespace RateLimitFramework</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span> <span class="comment">// DATA_COLLECTOR_H</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;cmmlib/ratelimit/DataCollector.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std::chrono;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> RateLimitFramework;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">DataCollector::record</span><span class="params">(<span class="type">const</span> std::string&amp; key, <span class="type">const</span> RateLimitStrategy&amp; strategy)</span> </span>&#123;</span><br><span class="line"><span class="keyword">auto</span> now = std::chrono::steady_clock::<span class="built_in">now</span>();</span><br><span class="line"><span class="keyword">auto</span>&amp; timePoints = timestamps[key];</span><br><span class="line">timePoints.<span class="built_in">push_back</span>(now);</span><br><span class="line"></span><br><span class="line"><span class="keyword">auto</span> startTime = now - strategy.timeWindow;</span><br><span class="line"><span class="keyword">while</span> (!timePoints.<span class="built_in">empty</span>() &amp;&amp; timePoints.<span class="built_in">front</span>() &lt; startTime) &#123;</span><br><span class="line">timePoints.<span class="built_in">pop_front</span>();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">DataCollector::getData</span><span class="params">(<span class="type">const</span> std::string&amp; key, <span class="type">const</span> RateLimitStrategy&amp; strategy)</span> <span class="type">const</span> </span>&#123;</span><br><span class="line"><span class="keyword">auto</span> it = timestamps.<span class="built_in">find</span>(key);</span><br><span class="line"><span class="keyword">if</span> (it == timestamps.<span class="built_in">end</span>()) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">auto</span> now = std::chrono::steady_clock::<span class="built_in">now</span>();</span><br><span class="line"><span class="keyword">auto</span> startTime = now - strategy.timeWindow;</span><br><span class="line"><span class="keyword">return</span> std::<span class="built_in">count_if</span>(it-&gt;second.<span class="built_in">begin</span>(), it-&gt;second.<span class="built_in">end</span>(),</span><br><span class="line">[startTime](<span class="type">const</span> <span class="keyword">auto</span>&amp; tp) &#123; <span class="keyword">return</span> tp &gt;= startTime; &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="RateLimiter"><a href="#RateLimiter" class="headerlink" title="RateLimiter"></a><strong>RateLimiter</strong></h3><p>根据不同的限流算法执行限流逻辑：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">ifndef</span> RATE_LIMITER_H</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> RATE_LIMITER_H</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;DataCollector.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;cmmlib/CmmBase.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;memory&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;chrono&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> RateLimitFramework &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">CMM_API</span> RateLimitHandler &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">handle</span><span class="params">(<span class="type">const</span> std::string&amp; key, <span class="type">const</span> std::map&lt;std::string, std::string&gt;&amp; context)</span> </span>= <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">virtual</span> ~<span class="built_in">RateLimitHandler</span>() = <span class="keyword">default</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">CMM_API</span> RateLimiter &#123;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="keyword">struct</span> <span class="title class_">Strategy</span> &#123;</span><br><span class="line">        RateLimitStrategy config;</span><br><span class="line">        std::shared_ptr&lt;DataCollector&gt; dataCollector;</span><br><span class="line">        std::shared_ptr&lt;RateLimitHandler&gt; handler;</span><br><span class="line">        std::chrono::steady_clock::time_point lastExecutionTime;</span><br><span class="line">        <span class="type">double</span> tokens;</span><br><span class="line"></span><br><span class="line"><span class="built_in">Strategy</span>(<span class="type">const</span> RateLimitStrategy&amp; cfg, std::shared_ptr&lt;DataCollector&gt; dc, std::shared_ptr&lt;RateLimitHandler&gt; rh)</span><br><span class="line">: <span class="built_in">config</span>(cfg), <span class="built_in">dataCollector</span>(dc), <span class="built_in">handler</span>(rh), <span class="built_in">lastExecutionTime</span>(std::chrono::steady_clock::<span class="built_in">now</span>()), <span class="built_in">tokens</span>(cfg.threshold) &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">Strategy</span>()</span><br><span class="line">: config&#123;&#125;, <span class="built_in">dataCollector</span>(<span class="literal">nullptr</span>), <span class="built_in">handler</span>(<span class="literal">nullptr</span>), <span class="built_in">lastExecutionTime</span>(std::chrono::steady_clock::<span class="built_in">now</span>()), <span class="built_in">tokens</span>(<span class="number">0.0</span>) &#123;&#125;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    std::map&lt;StrategyType, Strategy&gt; strategies;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">addStrategy</span><span class="params">(<span class="type">const</span> RateLimitStrategy&amp; strategy, std::shared_ptr&lt;DataCollector&gt; dataCollector, std::shared_ptr&lt;RateLimitHandler&gt; handler)</span></span>;</span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">checkLimit</span><span class="params">(StrategyType strategyType, <span class="type">const</span> std::string&amp; key)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">checkSimpleCounter</span><span class="params">(<span class="type">const</span> Strategy&amp; strategy, <span class="type">const</span> std::string&amp; key)</span></span>;</span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">checkSlidingWindow</span><span class="params">(<span class="type">const</span> Strategy&amp; strategy, <span class="type">const</span> std::string&amp; key)</span></span>;</span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">checkTokenBucket</span><span class="params">(Strategy&amp; strategy, <span class="type">const</span> std::string&amp; key)</span></span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">&#125; <span class="comment">// namespace RateLimitFramework</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span> <span class="comment">// RATE_LIMITER_H</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;cmmlib/ratelimit/RateLimit.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std::chrono;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> RateLimitFramework;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> RateLimitFramework &#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">RateLimiter::addStrategy</span><span class="params">(<span class="type">const</span> RateLimitStrategy&amp; strategy, shared_ptr&lt;DataCollector&gt; dataCollector, shared_ptr&lt;RateLimitHandler&gt; handler)</span> </span>&#123;</span><br><span class="line">        strategies[strategy.strategyType] = <span class="built_in">Strategy</span>(strategy, dataCollector, handler);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">RateLimiter::checkLimit</span><span class="params">(StrategyType strategyType, <span class="type">const</span> std::string&amp; key)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">auto</span> strategyIt = strategies.<span class="built_in">find</span>(strategyType);</span><br><span class="line">        <span class="keyword">if</span> (strategyIt == strategies.<span class="built_in">end</span>()) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>; <span class="comment">// If strategy doesn&#x27;t exist, allow the request</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">auto</span>&amp; strategy = strategyIt-&gt;second;</span><br><span class="line">        strategy.dataCollector-&gt;<span class="built_in">record</span>(key, strategy.config);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">switch</span> (strategy.config.algorithm) &#123;</span><br><span class="line">        <span class="keyword">case</span> RateLimitAlgorithm::SIMPLE_COUNTER:</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">checkSimpleCounter</span>(strategy, key);</span><br><span class="line">        <span class="keyword">case</span> RateLimitAlgorithm::SLIDING_WINDOW:</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">checkSlidingWindow</span>(strategy, key);</span><br><span class="line">        <span class="keyword">case</span> RateLimitAlgorithm::TOKEN_BUCKET:</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">checkTokenBucket</span>(strategy, key);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">RateLimiter::checkSimpleCounter</span><span class="params">(<span class="type">const</span> Strategy&amp; strategy, <span class="type">const</span> std::string&amp; key)</span> </span>&#123;</span><br><span class="line"><span class="type">int</span> count = strategy.dataCollector-&gt;<span class="built_in">getData</span>(key, strategy.config);</span><br><span class="line"><span class="keyword">if</span> (count &gt; strategy.config.threshold) &#123;</span><br><span class="line">std::map&lt;std::string, std::string&gt; context;</span><br><span class="line">strategy.handler-&gt;<span class="built_in">handle</span>(key, context);</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">RateLimiter::checkSlidingWindow</span><span class="params">(<span class="type">const</span> Strategy&amp; strategy, <span class="type">const</span> std::string&amp; key)</span> </span>&#123;</span><br><span class="line"><span class="type">int</span> count = strategy.dataCollector-&gt;<span class="built_in">getData</span>(key, strategy.config);</span><br><span class="line"><span class="keyword">if</span> (count &gt; strategy.config.threshold) &#123;</span><br><span class="line">std::map&lt;std::string, std::string&gt; context;</span><br><span class="line">strategy.handler-&gt;<span class="built_in">handle</span>(key, context);</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">RateLimiter::checkTokenBucket</span><span class="params">(Strategy&amp; strategy, <span class="type">const</span> std::string&amp; key)</span> </span>&#123;</span><br><span class="line"><span class="keyword">auto</span> now = steady_clock::<span class="built_in">now</span>();</span><br><span class="line">        <span class="keyword">auto</span> timePassed = chrono::<span class="built_in">duration_cast</span>&lt;chrono::milliseconds&gt;(now - strategy.lastExecutionTime).<span class="built_in">count</span>();</span><br><span class="line">        strategy.tokens += timePassed * (strategy.config.threshold / <span class="built_in">static_cast</span>&lt;<span class="type">double</span>&gt;(strategy.config.timeWindow.<span class="built_in">count</span>()));</span><br><span class="line">        strategy.tokens = (std::min)(strategy.tokens, <span class="built_in">static_cast</span>&lt;<span class="type">double</span>&gt;(strategy.config.threshold));</span><br><span class="line">        strategy.lastExecutionTime = now;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (strategy.tokens &lt; <span class="number">1.0</span>) &#123;</span><br><span class="line">            std::map&lt;std::string, std::string&gt; context;</span><br><span class="line">            strategy.handler-&gt;<span class="built_in">handle</span>(key, context);</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            strategy.tokens -= <span class="number">1.0</span>;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="4-2-测试程序"><a href="#4-2-测试程序" class="headerlink" title="4.2 测试程序"></a><strong>4.2 测试程序</strong></h2><p>示例测试用例展示了简单计数限流算法的应用：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;cmmlib/ratelimit/RateLimit.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;cmmlib/ratelimit/DataCollector.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;ConsoleHandler.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;EmitRequestDataCollector.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;thread&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std::chrono;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> RateLimitFramework;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">RateLimitTest</span> : <span class="keyword">public</span> ::testing::Test &#123;</span><br><span class="line"><span class="keyword">protected</span>:</span><br><span class="line">RateLimiter rateLimit;</span><br><span class="line">shared_ptr&lt;DataCollector&gt; collector;</span><br><span class="line">shared_ptr&lt;RateLimitHandler&gt; handler;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">SetUp</span><span class="params">()</span> <span class="keyword">override</span> </span>&#123;</span><br><span class="line">collector = <span class="built_in">make_shared</span>&lt;EmitRequestDataCollector&gt;();</span><br><span class="line">handler = <span class="built_in">make_shared</span>&lt;ConsoleHandler&gt;();</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="built_in">TEST_F</span>(RateLimitTest, SimpleCounterTest) &#123;</span><br><span class="line">RateLimitStrategy strategy = &#123; StrategyType::Request, <span class="number">5</span>, <span class="built_in">milliseconds</span>(<span class="number">1000</span>), RateLimitAlgorithm::SIMPLE_COUNTER &#125;;</span><br><span class="line">rateLimit.<span class="built_in">addStrategy</span>(strategy, collector, handler);</span><br><span class="line"></span><br><span class="line">string key = <span class="string">&quot;example.com/api&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Test within limit</span></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</span><br><span class="line"><span class="built_in">EXPECT_TRUE</span>(rateLimit.<span class="built_in">checkLimit</span>(StrategyType::Request, key));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Test exceeding limit</span></span><br><span class="line"><span class="built_in">EXPECT_FALSE</span>(rateLimit.<span class="built_in">checkLimit</span>(StrategyType::Request, key));</span><br><span class="line"></span><br><span class="line"><span class="comment">// Wait for the window to pass</span></span><br><span class="line">this_thread::<span class="built_in">sleep_for</span>(<span class="built_in">milliseconds</span>(<span class="number">1100</span>));</span><br><span class="line"></span><br><span class="line"><span class="comment">// Test reset after window</span></span><br><span class="line"><span class="built_in">EXPECT_TRUE</span>(rateLimit.<span class="built_in">checkLimit</span>(StrategyType::Request, key));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">TEST_F</span>(RateLimitTest, DifferentKeysTest) &#123;</span><br><span class="line">RateLimitStrategy strategy = &#123; StrategyType::Request, <span class="number">3</span>, <span class="built_in">milliseconds</span>(<span class="number">1000</span>), RateLimitAlgorithm::SIMPLE_COUNTER &#125;;</span><br><span class="line">rateLimit.<span class="built_in">addStrategy</span>(strategy, collector, handler);</span><br><span class="line"></span><br><span class="line">string key1 = <span class="string">&quot;example.com/api1&quot;</span>;</span><br><span class="line">string key2 = <span class="string">&quot;example.com/api2&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Test key1</span></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">3</span>; i++) &#123;</span><br><span class="line"><span class="built_in">EXPECT_TRUE</span>(rateLimit.<span class="built_in">checkLimit</span>(StrategyType::Request, key1));</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">EXPECT_FALSE</span>(rateLimit.<span class="built_in">checkLimit</span>(StrategyType::Request, key1));</span><br><span class="line"></span><br><span class="line"><span class="comment">// Test key2 (should not be affected by key1&#x27;s limit)</span></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">3</span>; i++) &#123;</span><br><span class="line"><span class="built_in">EXPECT_TRUE</span>(rateLimit.<span class="built_in">checkLimit</span>(StrategyType::Request, key2));</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">EXPECT_FALSE</span>(rateLimit.<span class="built_in">checkLimit</span>(StrategyType::Request, key2));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">TEST_F</span>(RateLimitTest, NonExistentStrategyTest) &#123;</span><br><span class="line">string key = <span class="string">&quot;test&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Should allow requests for non-existent strategies</span></span><br><span class="line"><span class="built_in">EXPECT_TRUE</span>(rateLimit.<span class="built_in">checkLimit</span>(<span class="built_in">static_cast</span>&lt;StrategyType&gt;(<span class="number">999</span>), key));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">TEST_F</span>(RateLimitTest, MultipleStrategiesTest) &#123;</span><br><span class="line">RateLimitStrategy apiStrategy = &#123; StrategyType::Request, <span class="number">5</span>, <span class="built_in">milliseconds</span>(<span class="number">1000</span>), RateLimitAlgorithm::SIMPLE_COUNTER &#125;;</span><br><span class="line">RateLimitStrategy recapchaStrategy = &#123; StrategyType::Recapcha, <span class="number">3</span>, <span class="built_in">milliseconds</span>(<span class="number">2000</span>), RateLimitAlgorithm::SLIDING_WINDOW &#125;;</span><br><span class="line"></span><br><span class="line">rateLimit.<span class="built_in">addStrategy</span>(apiStrategy, <span class="built_in">make_shared</span>&lt;EmitRequestDataCollector&gt;(), handler);</span><br><span class="line">rateLimit.<span class="built_in">addStrategy</span>(recapchaStrategy, <span class="built_in">make_shared</span>&lt;EmitRequestDataCollector&gt;(), handler);</span><br><span class="line"></span><br><span class="line">string request_url = <span class="string">&quot;example.com/api&quot;</span>;</span><br><span class="line">string recapcha_url = <span class="string">&quot;user123&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Test Request strategy</span></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</span><br><span class="line"><span class="built_in">EXPECT_TRUE</span>(rateLimit.<span class="built_in">checkLimit</span>(StrategyType::Request, request_url));</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">EXPECT_FALSE</span>(rateLimit.<span class="built_in">checkLimit</span>(StrategyType::Request, request_url));</span><br><span class="line"></span><br><span class="line"><span class="comment">// Test Recapcha strategy</span></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">3</span>; i++) &#123;</span><br><span class="line"><span class="built_in">EXPECT_TRUE</span>(rateLimit.<span class="built_in">checkLimit</span>(StrategyType::Recapcha, recapcha_url));</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">EXPECT_FALSE</span>(rateLimit.<span class="built_in">checkLimit</span>(StrategyType::Recapcha, recapcha_url));</span><br><span class="line"></span><br><span class="line"><span class="comment">// Wait for API strategy to reset</span></span><br><span class="line">this_thread::<span class="built_in">sleep_for</span>(<span class="built_in">milliseconds</span>(<span class="number">1100</span>));</span><br><span class="line"></span><br><span class="line"><span class="built_in">EXPECT_TRUE</span>(rateLimit.<span class="built_in">checkLimit</span>(StrategyType::Request, request_url));</span><br><span class="line"><span class="built_in">EXPECT_FALSE</span>(rateLimit.<span class="built_in">checkLimit</span>(StrategyType::Recapcha, recapcha_url));  <span class="comment">// Login strategy should still be blocked</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Wait for Login strategy to reset</span></span><br><span class="line">this_thread::<span class="built_in">sleep_for</span>(<span class="built_in">milliseconds</span>(<span class="number">1000</span>));</span><br><span class="line"></span><br><span class="line"><span class="built_in">EXPECT_TRUE</span>(rateLimit.<span class="built_in">checkLimit</span>(StrategyType::Recapcha, recapcha_url));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="5-实际应用场景"><a href="#5-实际应用场景" class="headerlink" title="5. 实际应用场景"></a><strong>5. 实际应用场景</strong></h1><h2 id="开发环境集成"><a href="#开发环境集成" class="headerlink" title="开发环境集成"></a>开发环境集成</h2><p>在开发阶段,我们实现了实时告警机制:</p><ul><li>当检测到限流事件时,立即弹出对话框提醒开发者</li><li>包含具体的限流原因和相关上下文信息</li><li>帮助开发者及早发现和解决潜在问题</li></ul><p>比如下面的截图就是某个 HTTP Request 触发了 Ratelimit 规则的 Warning 提示</p><p><img src="/2025/01/24/rate-limit/warning.png" alt="image.png"></p><h2 id="生产环境监控"><a href="#生产环境监控" class="headerlink" title="生产环境监控"></a>生产环境监控</h2><p>在生产环境中:</p><ul><li>通过Telemetry系统上报限流事件</li><li>收集用户行为数据进行分析</li><li>持续优化限流策略和阈值</li></ul><p>下图是线上触发 Ratelimit 规则的数据情况</p><p><img src="/2025/01/24/rate-limit/telemetry.png" alt="image.png"></p><h1 id="6-总结"><a href="#6-总结" class="headerlink" title="6. 总结"></a><strong>6. 总结</strong></h1><p>Rate Limit 框架的设计与实现为客户端提供了统一、灵活、可扩展的限流解决方案，不仅提升了系统稳定性，还优化了用户体验。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;本文介绍了一个用于客户端的通用限流框架设计与实践。该框架通过多种限流策略（计数器、滑动窗口、令牌桶）解决了HTTP请求并发、reCAPTCHA验证、日志写入等场景的限流需求。框架采用模块化设计，支持灵活配置和扩展，并集成了开发环境实时告警和生产环境Telemetry监控功能，有效提升了系统稳定性和用户体验。&lt;/p&gt;</summary>
    
    
    
    
    <category term="Rate Limit" scheme="https://ustcqidi.github.io/tags/Rate-Limit/"/>
    
    <category term="Telemetry 监控" scheme="https://ustcqidi.github.io/tags/Telemetry-%E7%9B%91%E6%8E%A7/"/>
    
    <category term="实时告警" scheme="https://ustcqidi.github.io/tags/%E5%AE%9E%E6%97%B6%E5%91%8A%E8%AD%A6/"/>
    
  </entry>
  
  <entry>
    <title>WebSocket 数据传输中的大数据帧发送问题</title>
    <link href="https://ustcqidi.github.io/2025/01/04/websocket-bigframe/"/>
    <id>https://ustcqidi.github.io/2025/01/04/websocket-bigframe/</id>
    <published>2025-01-04T04:03:30.000Z</published>
    <updated>2025-01-04T04:46:08.244Z</updated>
    
    <content type="html"><![CDATA[<p>详细记录了一个WebSocket发送大数据包被截断的问题排查过程</p><span id="more"></span><h1 id="问题背景"><a href="#问题背景" class="headerlink" title="问题背景"></a>问题背景</h1><h2 id="需求背景"><a href="#需求背景" class="headerlink" title="需求背景"></a>需求背景</h2><p>我们有个业务场景，需要通过 WebSocket 发送图片，根据同事反馈，目前发送一个image数据大概140kb，会出现发送的数据被截断的情况，连接也会被断开</p><h2 id="初步猜测：数据帧过大导致发送失败"><a href="#初步猜测：数据帧过大导致发送失败" class="headerlink" title="初步猜测：数据帧过大导致发送失败"></a>初步猜测：数据帧过大导致发送失败</h2><p>看了一下代码，我们没有对发送数据包的大小做限制。但是从实际的测试表现来看，发送数据大小超过 140kb 的包，就很容易出现这个问题，初步猜测跟包大小有关。还需要进一步通过 Log 或者抓包确定。</p><h2 id="问题复现与初步分析"><a href="#问题复现与初步分析" class="headerlink" title="问题复现与初步分析"></a>问题复现与初步分析</h2><p>这个问题很容易复现，这个对我们 troubleshooting 是很好的事情。我们用 mitmproxy 开启了一个代理服务器，然后在测试机器上配置这个代理服务器复现这个问题，这样做的目的是我们可以在 mitmproxy 上看到完整的 WebSocket 包，便于定位问题。mitmproxy 的 UI 交互有终端和 Web 两种形式，我更习惯使用 Web 方式，只需要在执行 mitmweb 命令，就可以启动服务。</p><p>交互界面如下：</p><p><img src="/2025/01/04/websocket-bigframe/general.jpg" alt></p><p>初步分析验证后，我们确定就是数据帧过大导致的发送失败，具体错误信息从 Log 中可以获取到。基于 Log 的错误信息，我们可以进一步分析 Root Cause。</p><h1 id="分析-Root-Cause"><a href="#分析-Root-Cause" class="headerlink" title="分析 Root Cause"></a>分析 Root Cause</h1><p>以下是我们在 Log 中发现的错误信息</p><h2 id="Socket-not-ready-for-send-recv"><a href="#Socket-not-ready-for-send-recv" class="headerlink" title="Socket not ready for send/recv"></a>Socket not ready for send/recv</h2><p><code>[10164:18664:12-20/17:43:51.370:DEBUG:SBCUrlRequest_WebSocket.cc(480)] [CSBCUrlRequest::WebSocket_CheckSendRecvData] End to post data, size:106830 Sent:0 Return:81 Curl Error String:Socket not ready for send/recv</code></p><p>这里的 <code>Return:81</code> 表示错误码是 81</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">CURLE_AGAIN</span> (<span class="number">81</span>)</span><br><span class="line"></span><br><span class="line"><span class="title class_">Socket</span> is not ready <span class="keyword">for</span> send/recv wait till it<span class="string">&#x27;s ready and try again. This return code is only returned from curl_easy_recv and curl_easy_send (Added in 7.18.2)</span></span><br></pre></td></tr></table></figure><p>这个部分的错误信息表示套接字（Socket）没有准备好进行发送或接收操作。具体的错误代码是 <strong><code>CURLE_AGAIN (81)</code></strong>，这表示需要等待，直到套接字准备好，然后再次尝试。这通常是由于非阻塞套接字的操作，需要等待套接字变得可用才能进行进一步的发送或接收。</p><h2 id="SSL-routines-bad-length"><a href="#SSL-routines-bad-length" class="headerlink" title="SSL routines::bad length"></a>SSL routines::bad length</h2><p>我们在日志中还观察到以下错误，这些错误出现在发生 <code>CURLE_AGAIN</code> 之后。</p><p><code>[10164:18664:12-20/17:43:51.520:INFO:SBCUrlRequest.cc(415)] [my_curl_debug_callback] This: 100664864 TEXT :SSL_write() error: error:0A00010F:SSL routines::bad length</code></p><p>我们当前是没有处理 <code>CURLE_AGAIN</code> ，出现 CURLE_AGAIN 时也会直接给业务层 <code>OnDataSent</code> callback。所以业务层可能在 socket 没有就绪的状态下持续不断地发送数据。</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">size_t n_sent = <span class="number">0</span>;</span><br><span class="line"><span class="title class_">CURLcode</span> ret = <span class="title function_">curl_easy_send</span>(m_hCurl, <span class="title class_">GetBaseOf</span>(total_to_send),total_to_send.<span class="title function_">size</span>(),&amp;n_sent);</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="attr">std</span>::vector&lt;<span class="title class_">CAString</span>*&gt;::iterator it = bytes_sent.<span class="title function_">begin</span>(); it != bytes_sent.<span class="title function_">end</span>(); ++it)</span><br><span class="line">&#123;</span><br><span class="line">m_webSocketState.<span class="title function_">doCallback</span>([it,ret](<span class="title class_">IWebSocketConnectionCallback</span> * callback)&#123;</span><br><span class="line">            callback-&gt;<span class="title class_">OnDataSent</span>(*it,ret);</span><br><span class="line">&#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">ZLOG</span>(<span class="variable constant_">DBG</span>,<span class="string">&quot;[CSBCUrlRequest::WebSocket_CheckSendRecvData] End to post data, size:&quot;</span>&lt;&lt;total_to_send.<span class="title function_">size</span>()</span><br><span class="line">&lt;&lt;<span class="string">&quot; Sent:&quot;</span>&lt;&lt;n_sent</span><br><span class="line">&lt;&lt;<span class="string">&quot; Return:&quot;</span>&lt;&lt;ret</span><br><span class="line">&lt;&lt;<span class="string">&quot; Curl Error String:&quot;</span>&lt;&lt;<span class="title function_">curl_easy_strerror</span>(ret));</span><br></pre></td></tr></table></figure><h3 id="为何会出现-SSL-routines-bad-length-错误呢-？"><a href="#为何会出现-SSL-routines-bad-length-错误呢-？" class="headerlink" title="为何会出现 SSL routines::bad length 错误呢 ？"></a><strong>为何会出现 <code>SSL routines::bad length</code> 错误呢 ？</strong></h3><p>如果在套接字不可用的情况下进行 <code>SSL_write</code>，可能会引发 <code>SSL_write()</code> 错误，如 “bad length”。</p><p>SSL/TLS是一个状态机,涉及了复杂的握手/协商、加密/解密等过程。这些状态需要持续地保持同步。具体来说,SSL连接建立时,客户端和服务器端会协商生成“会话密钥”、初始化变量等。这构成了一个持续的SSL “会话”。如果在“会话”过程中,由于套接字不可用中断了通信,那么客户端和服务器端的SSL状态就失去了同步。之后在套接字不可用时强行调用SSL_write写入数据,那么参与后续加密和传输的数据长度,就很可能和服务器端持有的会话状态不匹配,导致解密或者长度校验失败,出现“bad length”错误。</p><h1 id="问题修复与验证"><a href="#问题修复与验证" class="headerlink" title="问题修复与验证"></a>问题修复与验证</h1><h2 id="测试环境"><a href="#测试环境" class="headerlink" title="测试环境"></a>测试环境</h2><p>为了快速验证问题，我尝试搭建一个 WebSocket 测试服务器，在 github 中找到了一个 go 语言的版本的 WebSocket 服务器。但是我们的 WebSocket Client 实现有点问题，连接这个测试服务器时遇到了一些问题。</p><h3 id="Sec-WebSocket-Key-不合法"><a href="#Sec-WebSocket-Key-不合法" class="headerlink" title="Sec-WebSocket-Key 不合法"></a>Sec-WebSocket-Key 不合法</h3><p>Sec-WebSocket-Key是WebSocket协议中的一个重要字段,它用于WebSocket连接的握手过程中。</p><p>其规则及用途可以总结如下:</p><ol><li>格式:Sec-WebSocket-Key字段的值是一个base64编码的随机字符串。</li><li>长度:随机字符串的长度必须是16个字节,即24个base64编码后的字符。所以服务端要验证长度是否合法。</li><li>用途:用于计算Sec-WebSocket-Accept的值,这个值会在服务器端响应首部中返回,这样可以完成WebSocket握手。计算方式是:将Sec-WebSocket-Key的值与一个特定的字符串“258EAFA5-E914-47DA-95CA-C5AB0DC85B11”连接起来,取SHA-1哈希值,然后base64编码。</li><li>目的:这一握手机制的目的是为了防止误连接,确认这确实是一个要升级为WebSocket的HTTP请求,避免被非法连接利用。</li></ol><p>但是我们的 WebSocket Client 格式不规范，所以连接测试服务器时报错。</p><p>以下是具体的错误信息：</p><p><strong>客户端 Log</strong></p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">[<span class="number">46528</span>:<span class="number">41076</span>:<span class="number">12</span>-<span class="number">21</span>/<span class="number">10</span>:<span class="number">29</span>:<span class="number">59.773</span>:<span class="attr">INFO</span>:<span class="title class_">SBCUrlRequest</span>_WebSocket.<span class="title function_">cc</span>(<span class="number">326</span>)] [<span class="title class_">CSBCUrlRequest</span>::<span class="title class_">WebSocket</span>_NotifyConnectionGood] <span class="title class_">End</span> to post data, <span class="attr">head</span>:</span><br><span class="line"><span class="variable constant_">GET</span> /f <span class="variable constant_">HTTP</span>/<span class="number">1.1</span></span><br><span class="line"><span class="title class_">Host</span>: <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span></span><br><span class="line"><span class="title class_">Upgrade</span>: websocket</span><br><span class="line"><span class="title class_">Connection</span>: <span class="title class_">Upgrade</span></span><br><span class="line">**<span class="title class_">Sec</span>-<span class="title class_">WebSocket</span>-<span class="title class_">Key</span>: **&#123;15E21AB6-6AE4-<span class="number">4</span>****</span><br><span class="line"><span class="title class_">Sec</span>-<span class="title class_">WebSocket</span>-<span class="title class_">Version</span>: <span class="number">13</span></span><br><span class="line"><span class="variable constant_">ZM</span>-<span class="attr">CAP</span>: <span class="number">8300567970761955255</span>,<span class="number">6445493618999263140</span>,<span class="number">7795585261064146175</span>,<span class="number">7998097959182395391</span>,<span class="number">18587783470514173</span></span><br><span class="line"><span class="variable constant_">ZM</span>-<span class="attr">PROP</span>: <span class="title class_">Win</span>.<span class="property">Zoom</span></span><br><span class="line">X-<span class="title class_">Zoom</span>-<span class="title class_">AccountId</span>: </span><br><span class="line"></span><br><span class="line"> <span class="title class_">Sent</span>:<span class="number">287</span> <span class="title class_">Return</span>:<span class="number">0</span> <span class="title class_">Curl</span> <span class="title class_">Error</span> <span class="title class_">String</span>:<span class="title class_">No</span> error </span><br><span class="line">[<span class="number">46528</span>:<span class="number">41076</span>:<span class="number">12</span>-<span class="number">21</span>/<span class="number">10</span>:<span class="number">29</span>:<span class="number">59.788</span>:<span class="attr">INFO</span>:<span class="title class_">SBCUrlRequest</span>_WebSocket.<span class="title function_">cc</span>(<span class="number">207</span>)] [<span class="title class_">CSBCUrlRequest</span>::<span class="title class_">WebSocket</span>_ParseHeadResponse] <span class="title class_">Heads</span>:</span><br><span class="line">**<span class="variable constant_">HTTP</span>/<span class="number">1.1</span> <span class="number">400</span> <span class="title class_">Bad</span> <span class="title class_">Request</span>**</span><br><span class="line"><span class="title class_">Content</span>-<span class="title class_">Type</span>: text/plain; charset=utf-<span class="number">8</span></span><br><span class="line"><span class="title class_">Sec</span>-<span class="title class_">Websocket</span>-<span class="title class_">Version</span>: <span class="number">13</span></span><br><span class="line">X-<span class="title class_">Content</span>-<span class="title class_">Type</span>-<span class="title class_">Options</span>: nosniff</span><br><span class="line"><span class="title class_">Date</span>: <span class="title class_">Thu</span>, <span class="number">21</span> <span class="title class_">Dec</span> <span class="number">2023</span> <span class="number">02</span>:<span class="number">29</span>:<span class="number">59</span> <span class="variable constant_">GMT</span></span><br><span class="line"><span class="title class_">Content</span>-<span class="title class_">Length</span>: <span class="number">12</span></span><br><span class="line"></span><br><span class="line"><span class="title class_">Bad</span> <span class="title class_">Request</span></span><br></pre></td></tr></table></figure><p><strong>服务端 Log</strong></p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">Upgrade</span>: <span class="attr">websocket</span>: not a websocket <span class="attr">handshake</span>: <span class="string">&#x27;Sec-WebSocket-Key&#x27;</span> header must be <span class="title class_">Base64</span> encoded value <span class="keyword">of</span> <span class="number">16</span>-byte <span class="keyword">in</span> length</span><br></pre></td></tr></table></figure><p><strong>修复代码</strong></p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*Upgrade: websocket: not a websocket handshake: &#x27;Sec-WebSocket-Key&#x27;</span></span><br><span class="line"><span class="comment">header must be Base64 encoded value of 16-byte in length*/</span></span><br><span class="line"></span><br><span class="line"><span class="title class_">CAString</span> trimed_client_guild = <span class="title function_">CMM_T2UTF</span>(<span class="title class_">CString</span>(m_clientGUID, <span class="number">16</span>));</span><br><span class="line"></span><br><span class="line"><span class="title class_">CAString</span> secKey = <span class="title function_">base64EncodeA</span>((<span class="title class_">CmmUInt8</span>*)trimed_client_guild.<span class="title function_">c_str</span>(), trimed_client_guild.<span class="title function_">size</span>());</span><br></pre></td></tr></table></figure><h2 id="测试用例"><a href="#测试用例" class="headerlink" title="测试用例"></a>测试用例</h2><p>模拟发送大数据帧，期望能否复现 <code>CURLE_AGAIN</code> 错误，这样就能验证我们是否修复这个问题。</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">TEST</span>(<span class="params">WebSocketServiceTest, SendBigData</span>)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="title class_">CSBWebService</span> *ws = <span class="title class_">CWebServiceTestInstManager</span>::<span class="title class_">GetInstance</span>().<span class="title class_">SetUp</span>(<span class="title class_">Env</span>_Dev);</span><br><span class="line"><span class="title class_">Cmm</span>::<span class="title class_">CFileName</span> fn;</span><br><span class="line">fn.<span class="title class_">GetModuleFilePath</span>();</span><br><span class="line">fn += <span class="title function_">_T</span>(<span class="string">&quot;\\big_size_file.log&quot;</span>);</span><br><span class="line"><span class="attr">std</span>::ifstream <span class="title function_">file</span>(fn.<span class="title function_">c_str</span>());</span><br><span class="line"><span class="attr">std</span>::stringstream buffer;</span><br><span class="line">buffer &lt;&lt; file.<span class="title function_">rdbuf</span>();</span><br><span class="line"><span class="attr">std</span>::string longString = buffer.<span class="title function_">str</span>();</span><br><span class="line"></span><br><span class="line"><span class="title class_">WebSocketTestApp</span> app;</span><br><span class="line"><span class="title class_">CString</span> channel_id;</span><br><span class="line"><span class="title function_">EXPECT_TRUE</span>(app.<span class="title class_">ConnectTo</span>(<span class="title class_">GetTestWebSocketHost</span>(), channel_id));</span><br><span class="line"><span class="title class_">CmmUInt32</span> result = -<span class="number">1</span>;</span><br><span class="line">app.<span class="title class_">CheckConnectState</span>(channel_id, result);</span><br><span class="line"><span class="comment">//EXPECT_EQ(result, SB_ERROR_SUCCESS);</span></span><br><span class="line"></span><br><span class="line"><span class="title class_">CAString</span> <span class="title function_">test_str</span>(longString);</span><br><span class="line">    <span class="keyword">for</span> (int i = <span class="number">0</span>; i &lt; <span class="number">100</span>; i++) &#123;</span><br><span class="line">        <span class="title function_">ZLOG</span>(<span class="variable constant_">INFO</span>, <span class="string">&quot;WebSocketServiceTest SendData test_str length: &quot;</span> &lt;&lt; longString.<span class="title function_">size</span>());</span><br><span class="line">        <span class="title function_">EXPECT_TRUE</span>(app.<span class="title class_">SendDataEx</span>(<span class="number">0x2</span>, channel_id, test_str));</span><br><span class="line">        app.<span class="title class_">CheckSendDataEvent</span>(channel_id, result);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">app.<span class="title class_">Close</span>(channel_id);</span><br><span class="line">app.<span class="title class_">CheckCloseEvent</span>(channel_id, result);</span><br><span class="line"><span class="title function_">EXPECT_EQ</span>(result, <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">    <span class="title class_">CWebServiceTestInstManager</span>::<span class="title class_">GetInstance</span>().<span class="title class_">TearDown</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="CURLE-AGAIN-处理和重试逻辑"><a href="#CURLE-AGAIN-处理和重试逻辑" class="headerlink" title="CURLE_AGAIN 处理和重试逻辑"></a><code>CURLE_AGAIN</code> 处理和重试逻辑</h2><p>需要增加 <code>CURLE_AGAIN</code> 等待逻辑，等待 socket 就绪时，再重发数据。</p><p>以下是基于 poll 事件驱动的伪代码：</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;curl/curl.<span class="property">h</span>&gt;</span><br><span class="line">#include &lt;string&gt;</span><br><span class="line">#include &lt;poll.<span class="property">h</span>&gt;</span><br><span class="line"></span><br><span class="line"><span class="attr">std</span>::string curle_again_cache; </span><br><span class="line"></span><br><span class="line">struct pollfd poll_fd;</span><br><span class="line"></span><br><span class="line"><span class="title class_">CURLcode</span> <span class="title function_">try_send_data</span>(<span class="params">CURL* curl, <span class="keyword">const</span> std::string&amp; data</span>) &#123;</span><br><span class="line"></span><br><span class="line">  <span class="title class_">CURLcode</span> res;</span><br><span class="line">  size_t sent = <span class="number">0</span>;  </span><br><span class="line"></span><br><span class="line">  res = <span class="title function_">curl_easy_send</span>(curl, data.<span class="title function_">c_str</span>(), data.<span class="title function_">size</span>(), &amp;sent);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span>(res == <span class="variable constant_">CURLE_AGAIN</span>) &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 缓存数据 </span></span><br><span class="line">    curle_again_cache = data;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 注册curl socket</span></span><br><span class="line">    poll_fd.<span class="property">fd</span> = <span class="title function_">curl_easy_getfd</span>(curl);</span><br><span class="line">    poll_fd.<span class="property">events</span> = <span class="variable constant_">POLLOUT</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 等待socket就绪</span></span><br><span class="line">    <span class="title function_">poll</span>(&amp;poll_fd, <span class="number">1</span>, -<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 重试发送</span></span><br><span class="line">    <span class="keyword">return</span> <span class="title function_">try_send_data</span>(curl, curle_again_cache);</span><br><span class="line">  </span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">int <span class="title function_">main</span>(<span class="params"></span>) &#123;</span><br><span class="line"></span><br><span class="line">  <span class="variable constant_">CURL</span>* curl = <span class="title function_">curl_easy_init</span>();</span><br><span class="line">  <span class="attr">std</span>::string data = <span class="string">&quot;123&quot;</span>; </span><br><span class="line"></span><br><span class="line">  <span class="title class_">CURLcode</span> ret = <span class="title function_">try_send_data</span>(curl, data);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span>(ret != <span class="variable constant_">CURLE_OK</span>) &#123;</span><br><span class="line">    <span class="comment">// 错误处理</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">curl_easy_cleanup</span>(curl);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><h2 id="troubleshooting-过程回顾"><a href="#troubleshooting-过程回顾" class="headerlink" title="troubleshooting 过程回顾"></a>troubleshooting 过程回顾</h2><ol><li>收到问题反馈后，我们随即启动 mitmproxy 代理，让同事连接这个服务器复现问题。期间准备验证所需的 build 折腾了大半天。</li><li>通过 Log 定位到具体的错误原因，Review 分析代码以后确定 Root Cause 是，我们的 WebSocket 发送数据没有处理 again 错误</li><li>讨论了大体的解决方案</li><li>分工并行: 着手修改代码，搭建测试服务器，写测试 Case，模拟复现验证问题</li><li>Fix Patch 基于测试代码联调、优化、验证，单元测试通过</li><li>给业务方提供 Fix Patch 验证，end to end case 验证通过</li><li>19/12/2023 5:10 PM 同事反馈问题，21/12/2023 6:45 PM  end to end 解决，耗时 2 天</li></ol><h2 id="两点启发"><a href="#两点启发" class="headerlink" title="两点启发"></a>两点启发</h2><p>可以复现问题，并且能 Debug，基本上离找到 Root Cause 并且解决问题不远了。我们面临的很多问题都有类似的困惑，要么很难复现，要不测试环境非常复杂。有时候解决问题的关键就是能否找到复现问题的路径并模拟出测试环境。这个 Case 中，我们自己搭建了一个测试服务器，模拟发送大文件失败的 Case，我跟同事通过修改 test case 反复修改验证我们的代码，确保没问题以后交给使用方在真是业务场景下验证。</p><p>给我的启发有两个：</p><ol><li>首先无论多么简单的代码调整都需要配上相应的测试代码，这个测试代码有助于我们在后续 toubleshooting 时快速调试、定位以及验证问题。</li><li>其次，测试环境对与模拟和复现问题非常关键，这个测试环境包括了诸如 NTLM &amp; Kerberos 等复杂的认证流程，也包括了测试路径很复杂的业务流程，比如 SSO 登录，IPD，飞机模式代理域名登录等，我们无法保证每次 Regression 测试都能 Cover 所有的点，但是可以通过代码方式模拟测试验证。</li></ol><h2 id="三个收获"><a href="#三个收获" class="headerlink" title="三个收获"></a>三个收获</h2><ol><li>我们一直没有 WebSocket 的测试服务器，虽然有单元测试代码，但也是连接产线的一个数据推送服务器，现有的测试代码只是验证了 WebSocket 的连接建立、数据收发以及连接关闭，无法根据测试需求定制 Case，为了验证解决这个问题，我们也搭建了测试服务器，优化了测试代码，这个对后续验证 WebSocket 的问题提供了便利。</li><li>优化了对 WebSocket 发送大数据的处理，增强了 WebSocket 连接的鲁棒性</li><li>搭建 WebSocket 测试服务器的过程中，我们参考了一些开源项目。在这个过程中，我们了解到了 autobahn test-suite，这是一个专用于验证 WebSocket 实现是否符合规范的测试工具。autobahn test-suite 提供了丰富的测试用例，覆盖了 WebSocket 协议的多个边界情况。通过测试，我们发现了我们的 WebSocket 客户端存在许多不符合规范的地方。因此，我们计划基于这个 test-suite 对我们的 WebSocket 客户端进行进一步的测试和改进。</li></ol>]]></content>
    
    
    <summary type="html">&lt;p&gt;详细记录了一个WebSocket发送大数据包被截断的问题排查过程&lt;/p&gt;</summary>
    
    
    
    
    <category term="网络" scheme="https://ustcqidi.github.io/tags/%E7%BD%91%E7%BB%9C/"/>
    
    <category term="WebSocket" scheme="https://ustcqidi.github.io/tags/WebSocket/"/>
    
    <category term="企业级应用程序网络问题" scheme="https://ustcqidi.github.io/tags/%E4%BC%81%E4%B8%9A%E7%BA%A7%E5%BA%94%E7%94%A8%E7%A8%8B%E5%BA%8F%E7%BD%91%E7%BB%9C%E9%97%AE%E9%A2%98/"/>
    
  </entry>
  
  <entry>
    <title>2024 年度总结</title>
    <link href="https://ustcqidi.github.io/2025/01/01/summary-2024/"/>
    <id>https://ustcqidi.github.io/2025/01/01/summary-2024/</id>
    <published>2025-01-01T09:27:25.000Z</published>
    <updated>2025-01-05T09:38:16.745Z</updated>
    
    <content type="html"><![CDATA[<p>2024总结与2025规划</p><span id="more"></span><h2 id="2024年总结"><a href="#2024年总结" class="headerlink" title="2024年总结"></a><strong>2024年总结</strong></h2><h3 id="个人成长与健身"><a href="#个人成长与健身" class="headerlink" title="个人成长与健身"></a><strong>个人成长与健身</strong></h3><p>今年是我的本命年，经历了许多值得记录的事情，其中最显著的变化来自健身。从年初开始，我正式走进健身房，每周坚持三次左右的训练。从三大项的入门阶段逐步找到训练节奏，同时尝试了跑步和羽毛球。通过这一年的坚持，我的体检指标得到了明显改善，体脂率和饮食相关的指标趋于正常。</p><p>健身不仅带来了身体上的改变，也让我内心更加平静，杂念减少，整个人的状态变得更加积极从容。</p><h3 id="工作与团队"><a href="#工作与团队" class="headerlink" title="工作与团队"></a><strong>工作与团队</strong></h3><p>今年工作上的收获也颇丰：</p><ol><li><strong>专利成果</strong>：成功通过了5项专利，进一步巩固了我的技术积累。</li><li><strong>团队发展</strong>：团队规模和工作范围扩大了近一倍。我的角色更多地转向团队目标与方向的思考，同时关注项目状态。虽然写代码的时间减少，但在团队管理和战略规划方面收获颇多。</li></ol><h3 id="生活与家庭"><a href="#生活与家庭" class="headerlink" title="生活与家庭"></a><strong>生活与家庭</strong></h3><p>生活逐渐变得简单，家庭分工也更加明确。孩子的学习状态步入正轨，周末陪伴他上羽毛球课成为一大乐事。但在家庭生活中，我对孩子和家人的投入仍显不足，精力大多集中在工作上。</p><h3 id="不足与反思"><a href="#不足与反思" class="headerlink" title="不足与反思"></a><strong>不足与反思</strong></h3><ul><li><strong>时间管理</strong>：基础技能的提升时间过少，仍需优化时间分配。</li><li><strong>情绪管理</strong>：今年情绪波动较大，多次因压力过度饮酒，情绪控制有待加强。</li></ul><hr><h2 id="2025年计划"><a href="#2025年计划" class="headerlink" title="2025年计划"></a><strong>2025年计划</strong></h2><h3 id="核心目标"><a href="#核心目标" class="headerlink" title="核心目标"></a><strong>核心目标</strong></h3><ol><li><strong>构建被动收入</strong>：增强抗风险能力，提高财务自由度。</li><li><strong>沉淀知识资产</strong>：将日常工作和技术积累系统化，形成知识库。通过博客总结经验，实现价值最大化。</li></ol><h3 id="具体行动计划"><a href="#具体行动计划" class="headerlink" title="具体行动计划"></a><strong>具体行动计划</strong></h3><ol><li><strong>财务与生活</strong><ul><li>制定系统的财务规划，优化理财方式，减少不必要的开支。</li><li>养成节俭的生活习惯，聚焦必要消费，远离浪费。</li><li>增强抗风险能力，通过投资被动收入来源确保长远的生活稳定。</li></ul></li><li><strong>工作优化</strong><ul><li>减少琐碎事务，将精力集中于关键节点、核心项目和技术决策。</li><li>定期知识分享，参与行业调研，提升个人影响力。</li><li>避免过度情绪投入，聚焦目标与效率，保持专业性。</li></ul></li><li><strong>个人提升</strong><ul><li><strong>健身</strong>：继续保持每周3次以上的锻炼频率，探索更多健身方式，增强体能与健康。</li><li><strong>知识管理</strong>：完善知识资产，记录、总结并分享工作中的经验与教训。</li><li><strong>情绪管理</strong>：控制情绪波动，避免因外界影响而分散注意力，保持内心平衡。</li></ul></li></ol><h3 id="长远愿景"><a href="#长远愿景" class="headerlink" title="长远愿景"></a><strong>长远愿景</strong></h3><p>2025年，我将以降低系统性风险为核心，确保家庭、工作和个人发展方向的平衡：</p><ul><li><strong>工作上</strong>：以提高能力为目标，确保技术深度与管理能力同步发展。</li><li><strong>生活上</strong>：通过有效规划和行动，为家庭创造更稳定的环境。</li><li><strong>个人成长</strong>：专注自我完善，实现从内而外的全面提升。</li></ul>]]></content>
    
    
    <summary type="html">&lt;p&gt;2024总结与2025规划&lt;/p&gt;</summary>
    
    
    
    
    <category term="年度总结" scheme="https://ustcqidi.github.io/tags/%E5%B9%B4%E5%BA%A6%E6%80%BB%E7%BB%93/"/>
    
  </entry>
  
  <entry>
    <title>2023 年度总结</title>
    <link href="https://ustcqidi.github.io/2024/01/01/summary-2023/"/>
    <id>https://ustcqidi.github.io/2024/01/01/summary-2023/</id>
    <published>2024-01-01T09:27:25.000Z</published>
    <updated>2025-01-26T14:47:14.982Z</updated>
    
    <content type="html"><![CDATA[<p>2023总结与2024规划</p><span id="more"></span><p>2023年相较于2022年，我的生活经历了明显的进步和积极的变化。</p><p>在2022年，我处于低迷状态，生活杂乱无章，既没有专心读书也没有参与运动，时间仿佛溜走在无所作为中。工作只是机械的完成任务，缺乏激情。</p><p>然而，2023年是不同的……</p><h2 id="回顾-2023"><a href="#回顾-2023" class="headerlink" title="回顾 2023"></a>回顾 2023</h2><ol><li>工作方面我找到了明确的方向。我开始正式领导一个团队，我们一起完成了一系列有意义的项目，取得了一些显著的成就。团队的氛围很好，还给两位出色的同事升职。整体而言，我对团队的现状感到非常满意。</li><li>在技术方面，我也找到了自己的兴趣点，开始关注管理相关的知识，以及更宏观层面的技术规划和人才培养等，而不再局限于具体的技术细节。</li><li>我的阅读和运动量相较去年有了明显提升。我阅读了20多本书，尽管中间有一段时间没有跑步，但参加了马拉松比赛后重新点燃了我对运动的兴趣，最近一个月我按计划进行了良好的跑步训练。</li><li>2023年，我还参加了软考系统架构师的考试，尽管由于工作繁忙没有充分复习，考试成绩并不理想。但这次经历让我更深刻地认识到了自己的兴趣和发展方向。</li><li>2023年最大的收获之一，就是开始利用 ChatGPT 等大型模型工具来提高我的工作和学习效率。我发现借助这些工具，能够更快速、高效地解决常见问题，明显提升了我的个人效率。</li><li>当然，生活中也遇到了一些波折，家庭关系变得复杂。在家庭关系方面，让父母担心，让孩子感到不安。但是我在年底明确了未来的走向，决心慢慢来改善。</li><li>结清了保利的房贷，提前还了蜀山别院 60W 的房贷。再加上国家统一调整房贷利率，由原来的 5.5% 降到 4.2%，现在每个月还款从 2022 年的 14000+ 降到 6600 左右。</li><li>学会利用四象限管理我的工作及生活事务：紧急且重要的事情亲自做，重要不紧急的事情坚持做，紧急不重要的事情找人做</li><li>提交 &amp; 通过了一项专利</li><li>真正的开始注意自己的形象，学会整理发型，关注穿搭之类的</li></ol><h2 id="展望-2024"><a href="#展望-2024" class="headerlink" title="展望 2024"></a>展望 2024</h2><ol><li>我希望通过<strong>网络规划设计师考试</strong>来追求更符合我的兴趣的方向。我还计划<strong>认真撰写1-2篇专利</strong>，并在团队管理方面取得更大的进步，<strong>帮助新成员成长，维持团队的良好氛围</strong>。</li><li>在个人层面，我将致力于<strong>总结和深入挖掘之前处理过的 tickets 或问题</strong>，进一步提升自己在经验和知识上的水平。</li><li>我将努力<strong>维持家庭关系和家庭氛围的稳定</strong>。我要确保孩子和家人感到平稳和安全，不再有不必要的争吵，而是寻找自己内心的平静。</li><li>我设定了<strong>每月跑步10小时的健康目标</strong>。跑步有助于改善我的身体状态，也对健康有益。此外，我计划进行一次体检，因为已经有2-3年没有检查了。</li><li>在阅读方面，我的目标是<strong>每个月投入10小时来阅读</strong>。我不会设定太多限制，而是看当时的兴趣来选择阅读的内容。</li></ol><p>2023年是更深入了解自己的一年，而2024年将是在新的方向上持续努力和奋斗的一年。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;2023总结与2024规划&lt;/p&gt;</summary>
    
    
    
    
    <category term="年度总结" scheme="https://ustcqidi.github.io/tags/%E5%B9%B4%E5%BA%A6%E6%80%BB%E7%BB%93/"/>
    
  </entry>
  
  <entry>
    <title>2022 年度总结</title>
    <link href="https://ustcqidi.github.io/2023/01/02/summary-2022/"/>
    <id>https://ustcqidi.github.io/2023/01/02/summary-2022/</id>
    <published>2023-01-02T09:35:56.000Z</published>
    <updated>2025-01-05T09:37:41.705Z</updated>
    
    <content type="html"><![CDATA[<p>2022 像是被偷走的一年，整年浑浑噩噩，不知道时间用在了哪里。焦虑、憋屈、愤怒、小心翼翼，各种各样的情绪夹杂在一起。</p><span id="more"></span><p>2022 没有跑步、没有读书、没有娱乐、没有学习、没有旅行、没有去过电影院，工作上也没有啥亮眼的成绩。</p><p>2022 是疫情防控最严格的一年，也是对普通人生活影响最大的一年。孩子从幼儿园升到小学，每天的健康打卡雷打不动。手机相册中，绝大多数都行程码、安康码、核酸截图。</p><p>2022 也是疫情结束的一年。12 月份，疫情防疫政策全面放开，1-2周内全国人民都在躺在家里吃布洛芬。</p><p> 2022 也有一些值得开心的事情：</p><ol><li>家人、朋友都健康平安；</li><li>拔了智齿，以后再也不用担心牙齿疼了；</li><li>搬进新家，住宿条件极大改善；</li><li>升为 Manager，职业生涯有了新的挑战。</li></ol><p>2023 我不再制定虚无缥缈的愿景和目标，所有计划都量化成具体的数字。希望今年能珍惜时间，创造更多精彩的瞬间。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;2022 像是被偷走的一年，整年浑浑噩噩，不知道时间用在了哪里。焦虑、憋屈、愤怒、小心翼翼，各种各样的情绪夹杂在一起。&lt;/p&gt;</summary>
    
    
    
    
    <category term="年度总结" scheme="https://ustcqidi.github.io/tags/%E5%B9%B4%E5%BA%A6%E6%80%BB%E7%BB%93/"/>
    
  </entry>
  
  <entry>
    <title>2021 年度总结</title>
    <link href="https://ustcqidi.github.io/2021/12/27/summary-2021/"/>
    <id>https://ustcqidi.github.io/2021/12/27/summary-2021/</id>
    <published>2021-12-27T02:34:28.000Z</published>
    <updated>2025-01-05T09:28:57.733Z</updated>
    
    <content type="html"><![CDATA[<p>先看看去年立的 flag 的完成情况</p><span id="more"></span><h2 id="2021-年-flag"><a href="#2021-年-flag" class="headerlink" title="2021 年 flag"></a><strong>2021 年 flag</strong></h2><h3 id="理财-（基金定投）"><a href="#理财-（基金定投）" class="headerlink" title="理财 （基金定投）"></a><strong>理财 （基金定投）</strong></h3><ul><li>计划投入 50W</li><li>预期收益率 20%</li></ul><aside><br>💡 负收益，只能说是一塌糊涂 ！保持定投就可以了，不要瞎操作 ！！！<br><br></aside><h3 id="装修"><a href="#装修" class="headerlink" title="装修"></a><strong>装修</strong></h3><aside><br>💡 如期按照计划正常进行<br><br></aside><h3 id="跑步，控制体重在-60kg-以内"><a href="#跑步，控制体重在-60kg-以内" class="headerlink" title="跑步，控制体重在 60kg 以内"></a><strong>跑步，控制体重在 60kg 以内</strong></h3><aside><br>💡 跑步次数并不是很多，需要更加自律<br><br></aside><h3 id="减少体检异常指标"><a href="#减少体检异常指标" class="headerlink" title="减少体检异常指标"></a><strong>减少体检异常指标</strong></h3><aside><br>💡 喝酒太多<br>焦虑情绪太多<br>饮食结构 需要优化<br><br></aside><h3 id="陪儿子一起学习钢琴课程"><a href="#陪儿子一起学习钢琴课程" class="headerlink" title="陪儿子一起学习钢琴课程"></a><strong><del>陪儿子一起学习钢琴课程</del></strong></h3><aside><br>💡 儿子实在不喜欢钢琴，计划已经放弃<br><br></aside><h3 id="学完英语流利说：商务英语"><a href="#学完英语流利说：商务英语" class="headerlink" title="学完英语流利说：商务英语"></a><strong><del>学完英语流利说：商务英语</del></strong></h3><aside><br>💡 改成看 Youtube 技术 Channel<br><br></aside><h3 id="学完-CS155"><a href="#学完-CS155" class="headerlink" title="学完 CS155"></a><strong><del>学完 CS155</del></strong></h3><aside><br>💡 Project / Problem Based Learning, 没有完整地跟着课程学习<br><br></aside><h3 id="使用日程管理-App，做好任务清单、计划管理"><a href="#使用日程管理-App，做好任务清单、计划管理" class="headerlink" title="使用日程管理 App，做好任务清单、计划管理"></a><strong>使用日程管理 App，做好任务清单、计划管理</strong></h3><aside><br>💡 用 Notion 做 Worksapce，今年最大的收获<br><br></aside><h3 id="每个月看完两本书"><a href="#每个月看完两本书" class="headerlink" title="每个月看完两本书"></a><strong>每个月看完两本书</strong></h3><ul><li>用思维导图整理读书心得</li></ul><aside><br>💡 用微信读书读了 15 本，整体还是比较满意，开始把微信读书笔记整合同步到 Notion，学习卡片笔记等方法论，专业书籍读的偏少。<br><br></aside><h3 id="每周-每月总结复盘"><a href="#每周-每月总结复盘" class="headerlink" title="每周/每月总结复盘"></a><strong>每周/每月总结复盘</strong></h3><ul><li>计划完成情况</li><li>思考总结</li><li>输出 PPT</li></ul><aside><br>💡 Weekly Review 做的还比较满意<br><br></aside><hr><h2 id="2021-年回顾盘点"><a href="#2021-年回顾盘点" class="headerlink" title="2021 年回顾盘点"></a><strong>2021 年回顾盘点</strong></h2><h3 id="读了-15-本书"><a href="#读了-15-本书" class="headerlink" title="读了 15 本书"></a>读了 15 本书</h3><h3 id="跑步-200-多公里"><a href="#跑步-200-多公里" class="headerlink" title="跑步 200 多公里"></a>跑步 200 多公里</h3><h3 id="每周陪儿子打羽毛球，下象棋，教他用-Scratch-编程"><a href="#每周陪儿子打羽毛球，下象棋，教他用-Scratch-编程" class="headerlink" title="每周陪儿子打羽毛球，下象棋，教他用 Scratch 编程"></a>每周陪儿子打羽毛球，下象棋，教他用 Scratch 编程</h3><h3 id="用-Notion-做日程管理、文档、计划，整合-amp-优化了-Workflow"><a href="#用-Notion-做日程管理、文档、计划，整合-amp-优化了-Workflow" class="headerlink" title="用 Notion 做日程管理、文档、计划，整合 &amp; 优化了 Workflow"></a>用 Notion 做日程管理、文档、计划，整合 &amp; 优化了 Workflow</h3><h3 id="装修-1"><a href="#装修-1" class="headerlink" title="装修"></a>装修</h3><h3 id="924-剁手"><a href="#924-剁手" class="headerlink" title="924 剁手"></a>924 剁手</h3><p>太轻易相信别人，血的教训</p><h3 id="身体健康"><a href="#身体健康" class="headerlink" title="身体健康"></a><strong>身体健康</strong></h3><ul><li>体检情况比 2020 年严重，各种亚健康问题凸显</li></ul><h3 id="家庭关系"><a href="#家庭关系" class="headerlink" title="家庭关系"></a>家庭关系</h3><ul><li>跟父母关系处理的比较糟糕，沟通太少</li><li>更多的亲子陪伴时间</li><li>跟老婆的沟通太少</li></ul><h3 id="Side-Project"><a href="#Side-Project" class="headerlink" title="Side Project"></a>Side Project</h3><ul><li>完整上线了 Google Slide 插件</li></ul><hr><h2 id="2022-年度目标"><a href="#2022-年度目标" class="headerlink" title="2022 年度目标"></a>2022 年度目标</h2><h3 id="保持健康"><a href="#保持健康" class="headerlink" title="保持健康"></a>保持健康</h3><ul><li>不酗酒、少熬夜</li><li>午休</li><li>保持积极、愉悦的心情</li><li>少吃腌制食品，减少外出就餐</li><li>保持运动</li></ul><h3 id="家庭关系-1"><a href="#家庭关系-1" class="headerlink" title="家庭关系"></a>家庭关系</h3><ul><li>多跟家人聊天、沟通</li><li>保持和谐的家庭氛围，减少抱怨，不要轻易发脾气</li><li>亲子陪伴：羽毛球、象棋、Scratch 编程</li></ul><h3 id="个人成长"><a href="#个人成长" class="headerlink" title="个人成长"></a>个人成长</h3><ul><li>学习提高认知以及专业能力<ul><li>Blog</li><li>YouTube Channel</li></ul></li><li>戒骄戒躁，每天晚上读读书</li><li>戒掉不良习惯，争取摆脱最近几年的 “魔咒”</li><li>高质量完成工作</li><li>控制情绪，减少内耗</li></ul><h3 id="财务"><a href="#财务" class="headerlink" title="财务"></a>财务</h3><ul><li>保持定投，不要瞎操作。尽量不亏钱。</li></ul>]]></content>
    
    
    <summary type="html">&lt;p&gt;先看看去年立的 flag 的完成情况&lt;/p&gt;</summary>
    
    
    
    
    <category term="年度总结" scheme="https://ustcqidi.github.io/tags/%E5%B9%B4%E5%BA%A6%E6%80%BB%E7%BB%93/"/>
    
  </entry>
  
  <entry>
    <title>我的 Workflow 和生产力工具</title>
    <link href="https://ustcqidi.github.io/2021/11/29/workflow/"/>
    <id>https://ustcqidi.github.io/2021/11/29/workflow/</id>
    <published>2021-11-29T14:28:02.000Z</published>
    <updated>2025-01-27T14:30:04.047Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Part-1-我的-Workflow"><a href="#Part-1-我的-Workflow" class="headerlink" title="Part 1: 我的 Workflow"></a>Part 1: 我的 Workflow</h1><p>这篇文章总结我工作流程中每一个环节，包括事务 &amp; 日程管理、计划总结、学习沉淀、文档输出，以及使用到的工具，还有我如何高效的使用这些工具，以及如何自动化整个过程，提高我的生产力。</p><p>比如拿工作来说，通常遇到一个问题去查一些资料，然后找到具体的解决方案，或者问题的原因，然后把它解决掉，最终会形成一个文档或者经验总结，这个是典型的工作中的一个场景。</p><p>再拿学习来说，一般都是去看书或者去看别人的博客、微信公众号之类的，然后会提炼出一些比较重点的或者是有用的信息，保存到我的个人笔记里面去，有时候也会形成一篇博客。</p><span id="more"></span><h2 id="输入"><a href="#输入" class="headerlink" title="输入"></a>输入</h2><h3 id="微信读书"><a href="#微信读书" class="headerlink" title="微信读书"></a>微信读书</h3><p>读书的过程中我会去把每篇文章里面的关键信息做一些标注，有时候也会去写一些自己的想法。</p><p>我没有去写读书笔记的习惯，基本上都是读书的过程中做的一些标注，或者是简单的想法。没有写读书笔记的主要原因，可能是我读完以后就忘记了，然后没有很好的去整理整个读书过程中的一些想法细节。</p><p>这里需要解决的问题就是能把我在微信读书这里面做的标注或者想法同步到我的一个我笔记系统里面去，这样的话长期有助于沉淀或者是形成读书笔记。</p><h3 id="微信公众号"><a href="#微信公众号" class="headerlink" title="微信公众号"></a>微信公众号</h3><p>微信公众号里面通常会读一些技术文章，我关注了不少技术博客或者是公众号或者是别人在群里共分享的一些文章。</p><p>微信公众号文章有一个特点就是比较碎片。我的微信的收藏夹里面收藏了很多之前没有看完的文章，通常添加到收藏夹里面去，以后基本上后面也不会打开看。</p><p>需要解决的问题跟微信读书里面的类似。就是我们在读完微信公众号里面的文章以后，要记一些笔记，提炼出来一些重点，然后同步到自己的笔记系统里面去。只有这样才可以沉淀积累一些知识。不然的话就是单纯的看了很多，然后丢了就忘记了。</p><h3 id="网页"><a href="#网页" class="headerlink" title="网页"></a>网页</h3><p>网页里面看到的一些文章，我的浏览器收藏夹里面也收藏了很多文章，通常也不会去看。</p><h3 id="电子书"><a href="#电子书" class="headerlink" title="电子书"></a>电子书</h3><p>电子书一般是下载的 PDF 文档或者是一些论文。也有类似的问题，我没有在读书的过程中记笔记。提炼重点信息。</p><h2 id="沉淀与输出"><a href="#沉淀与输出" class="headerlink" title="沉淀与输出"></a>沉淀与输出</h2><p>不管是读书读论文还是看一些技术文章，最好是需要有一些对应的输出，比如形成一篇博客，或者是使用一些重点的笔记，想法总结。</p><p>我把输出主要分成下面几部分：</p><h3 id="读书笔记"><a href="#读书笔记" class="headerlink" title="读书笔记"></a>读书笔记</h3><p>一般就是微信读书里面我看过的一些书的摘要或者是自己的想法。</p><h3 id="重点摘要"><a href="#重点摘要" class="headerlink" title="重点摘要"></a>重点摘要</h3><p>看网上的一些文章或者是微信公众号的时候，提炼出来一些重点。</p><h3 id="工作笔记"><a href="#工作笔记" class="headerlink" title="工作笔记"></a>工作笔记</h3><p>平时工作过程中解决的一些具体问题，后面做的一些总结。</p><h3 id="Blog"><a href="#Blog" class="headerlink" title="Blog"></a>Blog</h3><p>对某一个技术的方向，或者是某一些思考做的一些沉淀或者是总结。</p><p>以上就是我学习或者工作过程中输入或者输出的一些习惯。第2部分是针对我这些习惯，我然后找了哪些工具，怎么来高效利用这些工具，怎么尽可能做到自动化，提高效率。</p><h1 id="Part-2-生产力工具"><a href="#Part-2-生产力工具" class="headerlink" title="Part 2: 生产力工具"></a>Part 2: 生产力工具</h1><h2 id="All-in-one-workspace-Notion"><a href="#All-in-one-workspace-Notion" class="headerlink" title="All-in-one workspace: Notion"></a>All-in-one workspace: Notion</h2><p>这个是最主要的生产的工具, 包括我的笔记、事务管理、日程管理，还有一些零散的信息的保存等等，都是放在这里面。</p><p>我以前在另一篇文章里面也写过我的笔记，演化的一些历程。 个人事务管理，我也用过很多的工具，最终我发现这个工具功能比较强大，然后我所有的需求都可以满足。</p><p>我目前用 Notion 主要做下面这几件事情：</p><h3 id="Weekly-Review"><a href="#Weekly-Review" class="headerlink" title="Weekly Review"></a>Weekly Review</h3><p>每周的工作计划，每天的具体的做的事情记录，还有这一周要做的事情的列表，每周的总结反思，还有每周娱乐项目的一些记录。</p><p>有了 Weekly Review 以后，更加的明确每天要做什么什么东西重要，什么东西不重要，写周报的时候也更轻松方便一点。</p><h3 id="PBL"><a href="#PBL" class="headerlink" title="PBL"></a>PBL</h3><p>项目或者问题驱动式去学习，这个效率最高，效果最好。我目前的做法是在我的 Notion 里面创建一个具体的项目，然后在里面增加一些 TODO</p><h3 id="工作笔记-1"><a href="#工作笔记-1" class="headerlink" title="工作笔记"></a>工作笔记</h3><p>记录项目中遇到的一些问题，以及解决了这些问题以后做的一些总结。</p><p>目前集中在用户的问题的总结上，这个还是很有用的，方便我以后排查问题的时候，能借鉴以前的经验，也有助于文档化之前的工作。</p><h3 id="碎片知识库"><a href="#碎片知识库" class="headerlink" title="碎片知识库"></a>碎片知识库</h3><p>在网上读一些文章或者是看书的时候提炼出来的一些东西，目前不是很多，因为我之前没有自动化的一个工作流程，导致我每次看完一些文章，其实并没有沉淀出来多少碎片化知识。</p><h2 id="阅读笔记系统"><a href="#阅读笔记系统" class="headerlink" title="阅读笔记系统"></a>阅读笔记系统</h2><p>综合上面的分析，还有我的个人习惯，我的笔记系统具体的几点需求，总结如下。</p><p>具体需求：</p><ul><li><p>Read Later 延迟阅读</p><p>  比如我有一些公众号文章我当前读不完或者是不想读，那我就把它放到这个延迟阅读列表里面，而不是简单的一个收藏夹。我需要把我所有的当前发现的好文章，统一放到一起来。最好都是放到 Notion 里面。</p></li><li><p>Highlight 我在看一些网页文章</p><p>  通过鼠标来去标注一些文章的东西，类似于微信读书里面的标注，然后标注完了以后可以自动同步到Notion 的碎片知识管理区里面。</p></li><li><p>Sync to Notion</p><p>  把我的读书笔记，还有我想读的文章自动同步到某一个数据库里面去，这样我就能把一些碎片化的知识整沉淀下来。</p></li><li><p>零碎想法记录</p><p>  平时的突然冒出来的一些想法，能快速的整理出来。比如我正在走路的时候，跑步的时候，吃饭的时候等等，经常会冒出来一些很短的一些想法，这个需要比较高效的记录下来。</p></li></ul><p>下面的这几个工具，就是我在实践过程中发现比较适合我用的几个工具：</p><h3 id="Flomo-做碎片化沉淀"><a href="#Flomo-做碎片化沉淀" class="headerlink" title="Flomo 做碎片化沉淀"></a>Flomo 做碎片化沉淀</h3><p>这是一个小众产品，目前用的人不多，但是做的还是挺好的，我目前把它跟我的微信绑定了，可以支持微信输入一些临时的琐碎的想法，然后自动同步到 Flomo 的账号里面。</p><p>支持的功能挺多的，包括可以收藏微信公众号的文章，可以把文章同步到 Notion 里，也可以做一些文章的标注。原本我是打算用它做完整的工作流管理，但如果需要定制一些个性化需求的时候可能会有受限。所以我只用它来记录我平时想法的碎片。</p><p>这样可以形成我的一些碎片化思维的或者是碎片化输出的一个总结，比如周报或者是日记。</p><h3 id="Kami-做-PDF-标注"><a href="#Kami-做-PDF-标注" class="headerlink" title="Kami 做 PDF 标注"></a>Kami 做 PDF 标注</h3><p> PDF 标注的话是很有用的，我之前去读 PDF 版本的书或者论文的时候。通常读完以后，没有任何的想法的沉淀或者是重点的提炼。后来发现了 Kami 这个平台工具，我觉得挺适合做 PDF 标注的。</p><p>现在我通常把会要读的论文或者是书籍的 PDF 版本传到 Google Drive 上，然后用 Kami 打开，做一些重点标注和笔记。</p><h3 id="微信读书笔记同步到-Notion"><a href="#微信读书笔记同步到-Notion" class="headerlink" title="微信读书笔记同步到 Notion"></a>微信读书笔记同步到 Notion</h3><p>微信读书的笔记是保存在 APP 上面的，我在网上找到了一个浏览器插件，可以提取当前这本书里标注的重点，还有个人的想法。所以我在每读完一本书，就把这本书的标记提取出来，然后同步到 Notion 上。</p><h3 id="自研-Chrome-插件用于网页-Highlight-和-Sync-to-Notion"><a href="#自研-Chrome-插件用于网页-Highlight-和-Sync-to-Notion" class="headerlink" title="自研 Chrome 插件用于网页 Highlight 和 Sync to Notion"></a>自研 Chrome 插件用于网页 Highlight 和 Sync to Notion</h3><p>这个工具是自己开发的，主要用来同步网页，还有微信公众号的文章到 Notion 上，还支持网页内容标注。使用这个工具有助于碎片化知识的沉淀。</p><h2 id="博客系统"><a href="#博客系统" class="headerlink" title="博客系统"></a>博客系统</h2><p>我的博客是基于 GitHub 和 Hexo 搭建的。更新频率比较低，有一方面的原因是我的之前的工作流没有形成高效的闭环；还有一点就是我的博客的生成发布比较麻烦：需要搭建环境，写好博客以后，还需要执行好几个命令才能发布一篇博客。我的知识获取和输出这中间存在一些断裂环节，导致我更新的频率并不高。</p><p>这里的一个诉求就是能否把知识的获取和最终的输出，形成一个自动化或者半自动化的流程。</p><h3 id="如何把-Notion-上的文章自动部署到博客"><a href="#如何把-Notion-上的文章自动部署到博客" class="headerlink" title="如何把 Notion 上的文章自动部署到博客"></a>如何把 Notion 上的文章自动部署到博客</h3><p>需要解决几个问题：</p><ul><li>获取 Notion 里面某个数据库的文章</li><li>生成 Hexo 格式的文章</li><li>发布到博客</li><li>定时触发 &amp; 自动化构建</li></ul><p>经过调研了一番，我发现 GitHub Actions 特别适合做这个事情，刚好我的 Blog 也是部署在 GitHub 上。参考一些教程，我逐个解决了上面提到的几个问题，实现了 Notion 文章自动化部署到 Blog 的需求。</p><p>这里贴出 GitHub Actions</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line">name: Build <span class="keyword">and</span> Deploy</span><br><span class="line">on:</span><br><span class="line">  # Triggers the workflow on push <span class="keyword">or</span> pull request events but only <span class="keyword">for</span> the master branch</span><br><span class="line">  push:</span><br><span class="line">    branches: [ master ]</span><br><span class="line">  schedule:</span><br><span class="line">    - cron: <span class="string">&#x27;0 21 * * *&#x27;</span></span><br><span class="line"></span><br><span class="line">  # Allows you to run <span class="keyword">this</span> workflow manually from the Actions tab</span><br><span class="line">  workflow_dispatch:</span><br><span class="line">    inputs:</span><br><span class="line">              name:</span><br><span class="line">                  description: <span class="string">&#x27;Person to greet&#x27;</span></span><br><span class="line">                  required: <span class="literal">true</span></span><br><span class="line">                  <span class="keyword">default</span>: <span class="string">&#x27;Mona the Octocat&#x27;</span></span><br><span class="line">              home:</span><br><span class="line">                  description: <span class="string">&#x27;location&#x27;</span></span><br><span class="line">                  required: <span class="literal">false</span></span><br><span class="line">                  <span class="keyword">default</span>: <span class="string">&#x27;The Octoverse&#x27;</span></span><br><span class="line">                  </span><br><span class="line">jobs:</span><br><span class="line">  build-<span class="keyword">and</span>-deploy:</span><br><span class="line">    runs-on: ubuntu-latest</span><br><span class="line">    steps:</span><br><span class="line">      - name: Checkout</span><br><span class="line">        uses: actions/checkout@master</span><br><span class="line">        </span><br><span class="line">      - name: Setup Python</span><br><span class="line">        uses: actions/setup-python@v<span class="number">2.3</span><span class="number">.0</span></span><br><span class="line">        </span><br><span class="line">      - name: Python Pip Install</span><br><span class="line">        uses: logikal-code/pip-install@v<span class="number">1.0</span><span class="number">.0</span></span><br><span class="line">        with:</span><br><span class="line">          requirements: ./notion-down/requirements.txt</span><br><span class="line">          </span><br><span class="line">      - name: notion to markdown</span><br><span class="line">        run: PYTHONPATH=./notion-down python ./notion-down/main.py --blog_url https:<span class="comment">//www.notion.so/Blog-****** --token_v2 **********</span></span><br><span class="line">        </span><br><span class="line">      - name: copy markdown files</span><br><span class="line">        run: cp notion-down/build/Hexo/_posts<span class="comment">/*.md source/_posts/</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">      - name: Build and Deploy</span></span><br><span class="line"><span class="comment">        uses: ustcqidi/hexo-deploy-github-pages-action@master #  Use specialized deployment  Hexo  To  GitHub pages  Of  action</span></span><br><span class="line"><span class="comment">        env:</span></span><br><span class="line"><span class="comment">          PERSONAL_TOKEN: *******************</span></span><br><span class="line"><span class="comment">          PUBLISH_REPOSITORY: ustcqidi/ustcqidi.github.io</span></span><br><span class="line"><span class="comment">          BRANCH: master</span></span><br><span class="line"><span class="comment">          PUBLISH_DIR: ./public</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;Part-1-我的-Workflow&quot;&gt;&lt;a href=&quot;#Part-1-我的-Workflow&quot; class=&quot;headerlink&quot; title=&quot;Part 1: 我的 Workflow&quot;&gt;&lt;/a&gt;Part 1: 我的 Workflow&lt;/h1&gt;&lt;p&gt;这篇文章总结我工作流程中每一个环节，包括事务 &amp;amp; 日程管理、计划总结、学习沉淀、文档输出，以及使用到的工具，还有我如何高效的使用这些工具，以及如何自动化整个过程，提高我的生产力。&lt;/p&gt;
&lt;p&gt;比如拿工作来说，通常遇到一个问题去查一些资料，然后找到具体的解决方案，或者问题的原因，然后把它解决掉，最终会形成一个文档或者经验总结，这个是典型的工作中的一个场景。&lt;/p&gt;
&lt;p&gt;再拿学习来说，一般都是去看书或者去看别人的博客、微信公众号之类的，然后会提炼出一些比较重点的或者是有用的信息，保存到我的个人笔记里面去，有时候也会形成一篇博客。&lt;/p&gt;</summary>
    
    
    
    
    <category term="生产力" scheme="https://ustcqidi.github.io/tags/%E7%94%9F%E4%BA%A7%E5%8A%9B/"/>
    
    <category term="效率" scheme="https://ustcqidi.github.io/tags/%E6%95%88%E7%8E%87/"/>
    
  </entry>
  
  <entry>
    <title>TUN &amp; TAP</title>
    <link href="https://ustcqidi.github.io/2021/05/24/tun-tap/"/>
    <id>https://ustcqidi.github.io/2021/05/24/tun-tap/</id>
    <published>2021-05-24T15:04:02.000Z</published>
    <updated>2025-01-04T02:21:58.770Z</updated>
    
    <content type="html"><![CDATA[<p>最近在看 “Let’s Code Your own TCP/IP Stack” 系列文章，有点类似 “自己动手写 TCP/IP” 协议栈之类的。乍一看貌似一个不可能完成的任务，但是作者通过 5 篇文章逐步讲解，我居然看懂了。</p><span id="more"></span><p>这其中大多数都是介绍网络协议的实现细节，比如 ARP 的 Header 格式、解析，TCP 的三次握手细节，重传算法，拥塞控制机制的实现等。我个人比较感兴趣的是，应用层如何拿到原始的网络数据包？</p><p>作者开篇就介绍了，使用 TUN &amp; TAP 即可。晚上查阅了一些资料，真是打开了一扇门的感觉。原来我们平时使用的 VPN, 虚拟化技术之类的都得依赖 TUN &amp; TAP。</p><p>这篇文章零散记录了 TAP 和 TUN 的一些资料。</p><h2 id="什么是-TUN-TAP"><a href="#什么是-TUN-TAP" class="headerlink" title="什么是 TUN/TAP"></a>什么是 TUN/TAP</h2><blockquote><p>TUN/TAP provides packet reception and transmission for user space programs.</p></blockquote><p>TUN 和 TAP Linux 内核的虚拟网络设备 </p><ul><li>TUN 是 network tunnel driver 的缩写</li><li>TAP 是 <strong><em>Test Anything Protocol</em></strong> 的缩写</li></ul><p>TUN 和 TAP 在网络栈中的关系如图：</p><p><img src="https://s3.us-west-2.amazonaws.com/secure.notion-static.com/418ae0e8-cf80-4cbc-8c5f-df72fe6f2ef2/Untitled.png?X-Amz-Algorithm=AWS4-HMAC-SHA256&amp;X-Amz-Credential=AKIAT73L2G45O3KS52Y5%2F20210524%2Fus-west-2%2Fs3%2Faws4_request&amp;X-Amz-Date=20210524T151315Z&amp;X-Amz-Expires=86400&amp;X-Amz-Signature=951d7993e5024d3c045da9b1c3b6ed6fa891cdcadd7acff1efbf76d7444c610c&amp;X-Amz-SignedHeaders=host&amp;response-content-disposition=filename%20%3D%22Untitled.png%22" alt></p><h2 id="TUN-和-TAP-的应用场景"><a href="#TUN-和-TAP-的应用场景" class="headerlink" title="TUN 和 TAP 的应用场景"></a>TUN 和 TAP 的应用场景</h2><ul><li>The first one is <strong>VPN</strong> software (such as OpenVPN). In this scenario, the kernel sends its network packets to the tun or tap devices. The VPN software will then encrypt and forward them to the other side of the VPN tunnel where they get decrypted and delivered to their destination.</li><li>The second area in which tun and tap devices are popular are system virtualization/emulation packages.</li><li>NAT</li></ul><h2 id="实验"><a href="#实验" class="headerlink" title="实验"></a>实验</h2><ul><li>OpenVPN 创建 tun</li><li>代码读取 tun 数据</li></ul><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul><li><a href="https://backreference.org/2010/03/26/tuntap-interface-tutorial/">tuntap-interface-tutorial</a></li><li>虚拟化技术：libvirt &amp; QEMU &amp; KVM</li></ul>]]></content>
    
    
    <summary type="html">&lt;p&gt;最近在看 “Let’s Code Your own TCP/IP Stack” 系列文章，有点类似 “自己动手写 TCP/IP” 协议栈之类的。乍一看貌似一个不可能完成的任务，但是作者通过 5 篇文章逐步讲解，我居然看懂了。&lt;/p&gt;</summary>
    
    
    
    
    <category term="网络" scheme="https://ustcqidi.github.io/tags/%E7%BD%91%E7%BB%9C/"/>
    
  </entry>
  
  <entry>
    <title>几个好习惯</title>
    <link href="https://ustcqidi.github.io/2021/03/28/2021-habit/"/>
    <id>https://ustcqidi.github.io/2021/03/28/2021-habit/</id>
    <published>2021-03-28T14:00:08.000Z</published>
    <updated>2025-01-04T02:21:58.654Z</updated>
    
    <content type="html"><![CDATA[<p>最近养成了几个很不错的习惯。</p><h3 id="更高效的笔记系统和事务管理"><a href="#更高效的笔记系统和事务管理" class="headerlink" title="更高效的笔记系统和事务管理"></a>更高效的笔记系统和事务管理</h3><p>学会使用 Notion 打造自己的知识体系和工作笔记，利用 Dashboard 管理日常事务。在 <a href="https://ustcqidi.github.io/2020/02/11/note">关于工作笔记</a> 这篇文章中，描述了我是如何一步一步优化我的笔记系统。</p><span id="more"></span><p>Notion 是目前我接触到的最优秀的笔记系统，相比 git 托管笔记，有以下优势：</p><ul><li>全端自动同步，不需要反复 push &amp; pull</li><li>并且支持模板导入，可以参考一些大佬的模板做自己的知识体系搭建、日常事务管理</li><li>功能特别丰富，社区比较完善</li><li>自带日程管理功能，不需要额外下载日程管理软件</li><li>比较丰富的排版方式，支持代码块、pdf、图片、dashboard、list、图表等等</li><li>支持一键导出为 html，markdown 方便入库备份</li><li>使用浏览器插件一键导入正在浏览的网页，便于引用外部资料</li><li>网页端使用体验很棒，不需要下载 app 也可以高效完成笔记，手机端可以直接访问网页书签，快速查看个人笔记</li><li>所见即所得的编辑效果，默认排版也很美观</li><li>核心功能全部免费</li></ul><p>目前我正在逐步把我工作笔记迁移到 Notion。</p><p>另外，也优化了工作笔记结构：</p><ul><li>Daily Work Memo: 记录每天的工作计划、问题细节等等，有点流水账的意思</li><li>Weekly Review: 每周的总结反思，包括工作周报、个人成长以及家庭生活等各方面的反思</li><li>Upcoming Release: 使用 JIRA Filter 方式自动生成每个 Release Task 表格，高效方便</li><li>Research &amp; Enhancement: 记录一些需有优化但是不紧急的调研任务</li><li>Pending Tickets: 记录一些正在处理的 tickets，也是使用 JIRA Filter 管理的</li></ul><h3 id="关注优秀的-Youtube-Channel"><a href="#关注优秀的-Youtube-Channel" class="headerlink" title="关注优秀的 Youtube Channel"></a>关注优秀的 Youtube Channel</h3><p>特别提一下，我是在 Youtube 看了 “老石谈芯” 的这期 <a href="https://www.youtube.com/watch?v=NHTMs1z88uA&amp;list=PLZbVf-X2rhjYnNwWZRb4wIgBjiyAsGKTL&amp;index=8">这就是最棒的效率软件！如果不是，我倒想试试你的 | Notion使用技巧分享</a> 开始种草 Notion 的。尽管我不是做芯片的，但是这个 Channel 的视频让我受益匪浅。</p><p>我以前也关注过不少技术相关 Channel, 但其实没有仔细利用好这些资源。Youtube 上有海量优质的技术视频，对提高自己的技术视野还有英语听力非常有帮助。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;最近养成了几个很不错的习惯。&lt;/p&gt;
&lt;h3 id=&quot;更高效的笔记系统和事务管理&quot;&gt;&lt;a href=&quot;#更高效的笔记系统和事务管理&quot; class=&quot;headerlink&quot; title=&quot;更高效的笔记系统和事务管理&quot;&gt;&lt;/a&gt;更高效的笔记系统和事务管理&lt;/h3&gt;&lt;p&gt;学会使用 Notion 打造自己的知识体系和工作笔记，利用 Dashboard 管理日常事务。在 &lt;a href=&quot;https://ustcqidi.github.io/2020/02/11/note&quot;&gt;关于工作笔记&lt;/a&gt; 这篇文章中，描述了我是如何一步一步优化我的笔记系统。&lt;/p&gt;</summary>
    
    
    
    
    <category term="杂记" scheme="https://ustcqidi.github.io/tags/%E6%9D%82%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>2020 年度总结</title>
    <link href="https://ustcqidi.github.io/2020/12/27/summary-2020/"/>
    <id>https://ustcqidi.github.io/2020/12/27/summary-2020/</id>
    <published>2020-12-27T13:29:49.000Z</published>
    <updated>2025-01-04T02:21:58.747Z</updated>
    
    <content type="html"><![CDATA[<p>先看看去年立的 flag 的完成情况</p><h3 id="2019年-flag"><a href="#2019年-flag" class="headerlink" title="2019年 flag"></a>2019年 flag</h3><ul><li>看 2-3 部高分纪录片<ul><li>零散地看了《一本好书》、李永乐老师、PaperClip、一席演讲 等</li><li>需要明确要看什么纪录片，并且很好利用碎片化时间<span id="more"></span></li></ul></li><li>读书/听书，电台<ul><li>每天上下班基本都会听书，今年听了这些：<ul><li>聊斋志异</li><li>红楼梦</li><li>鬼吹灯</li><li>美的沉思</li><li>价值投资</li><li>童林传</li><li>大唐惊雷</li><li>四世同堂</li></ul></li><li>三好坏男孩</li><li>故事 FM</li></ul></li><li>1-2 周写一篇博客，书写有助于思考<ul><li>全年写了 13 篇 blog，主要是工作中遇到的问题沉淀，比如 网络、security、libcurl 等</li></ul></li><li>每晚坐在书桌前至少半小时<ul><li>喝酒+晃晃悠悠频率有高</li></ul></li><li>尽量控制情绪，不要乱发脾气<ul><li>继续加油</li></ul></li><li>买改善房<ul><li>完成</li></ul></li><li>带老婆孩子去一次日本<ul><li>疫情原因今年一年基本都没出门，只去了一次九华山</li></ul></li><li>工作日保证 7点左右起床</li></ul><h3 id="理财计划"><a href="#理财计划" class="headerlink" title="理财计划"></a>理财计划</h3><ol><li>资金计划 10w+</li><li>周期1年</li><li>期望收益 10%+</li></ol><p>基本完成，今天收益 1w 左右，年中买房清仓一次。不然会赚的更多，今年计划基本完成。</p><h3 id="身体健康"><a href="#身体健康" class="headerlink" title="身体健康"></a>身体健康</h3><ul><li>少喝酒、保持身体健康、体检一次<ul><li>跟同事酒局有点多，要控制频率</li></ul></li><li>改善饮食结构，少油腻，少盐<ul><li>少吃了不少腌制类食物，经常吃公司的酸奶水果捞和减肥餐，还需要减少聚餐频率</li></ul></li><li>坚持定期跑步<ul><li>天气冷的时候没有跑</li></ul></li><li>争取每天午睡，晚上 11:00 左右睡觉，最晚不要超过 11:30 <ul><li>工作日的时候能做到早睡早起</li></ul></li></ul><hr><h2 id="2020-年回顾盘点"><a href="#2020-年回顾盘点" class="headerlink" title="2020 年回顾盘点"></a>2020 年回顾盘点</h2><h3 id="买房"><a href="#买房" class="headerlink" title="买房"></a>买房</h3><h3 id="兵棋推演项目"><a href="#兵棋推演项目" class="headerlink" title="兵棋推演项目"></a>兵棋推演项目</h3><p>赚了 10w 块，吸取了很多教训。</p><ol><li>极其耗费时间和精力，性价比极地。应该多思考如何增加被动收入。</li><li>不能轻易相信任何人，无脑地跟任何人掏心掏肺，会被别有用心的人利用。</li></ol><h3 id="libcurl-patch"><a href="#libcurl-patch" class="headerlink" title="libcurl patch"></a>libcurl patch</h3><p>提交了一个 patch 给 libcurl</p><p><a href="https://github.com/curl/curl/pull/5914">https://github.com/curl/curl/pull/5914</a></p><h3 id="917-学习小组"><a href="#917-学习小组" class="headerlink" title="917 学习小组"></a>917 学习小组</h3><p>难忘的封闭学习体验</p><h3 id="跑步"><a href="#跑步" class="headerlink" title="跑步"></a>跑步</h3><h3 id="身体健康-1"><a href="#身体健康-1" class="headerlink" title="身体健康"></a>身体健康</h3><p>一堆亚健康问题：轻度脂肪肝、尿酸高、高血压等等。急需调整饮食结构、生活方式。</p><h2 id="2021-年-flag"><a href="#2021-年-flag" class="headerlink" title="2021 年 flag"></a>2021 年 flag</h2><h3 id="理财-（基金定投）"><a href="#理财-（基金定投）" class="headerlink" title="理财 （基金定投）"></a>理财 （基金定投）</h3><ul><li>计划投入 50W</li><li>预期收益率 20%</li></ul><h3 id="装修"><a href="#装修" class="headerlink" title="装修"></a>装修</h3><h3 id="跑步，控制体重在-60kg-以内"><a href="#跑步，控制体重在-60kg-以内" class="headerlink" title="跑步，控制体重在 60kg 以内"></a>跑步，控制体重在 60kg 以内</h3><h3 id="减少体检异常指标"><a href="#减少体检异常指标" class="headerlink" title="减少体检异常指标"></a>减少体检异常指标</h3><h3 id="陪儿子一起学习钢琴课程"><a href="#陪儿子一起学习钢琴课程" class="headerlink" title="陪儿子一起学习钢琴课程"></a>陪儿子一起学习钢琴课程</h3><h3 id="学完英语流利说：商务英语"><a href="#学完英语流利说：商务英语" class="headerlink" title="学完英语流利说：商务英语"></a>学完英语流利说：商务英语</h3><h3 id="学完-CS155"><a href="#学完-CS155" class="headerlink" title="学完 CS155"></a>学完 CS155</h3><h3 id="使用日程管理-App，做好任务清单、计划管理"><a href="#使用日程管理-App，做好任务清单、计划管理" class="headerlink" title="使用日程管理 App，做好任务清单、计划管理"></a>使用日程管理 App，做好任务清单、计划管理</h3><h3 id="每个月看完两本书"><a href="#每个月看完两本书" class="headerlink" title="每个月看完两本书"></a>每个月看完两本书</h3><ul><li>用思维导图整理读书心得</li></ul><h3 id="每周-每月总结复盘"><a href="#每周-每月总结复盘" class="headerlink" title="每周/每月总结复盘"></a>每周/每月总结复盘</h3><ul><li>计划完成情况</li><li>思考总结</li><li>输出 PPT</li></ul><hr><h2 id="常用-App-年度总结"><a href="#常用-App-年度总结" class="headerlink" title="常用 App 年度总结"></a>常用 App 年度总结</h2><h3 id="音乐"><a href="#音乐" class="headerlink" title="音乐"></a>音乐</h3><p><img src="/2020/12/27/summary-2020/neteasy_music.jpeg" alt></p><h3 id="豆瓣"><a href="#豆瓣" class="headerlink" title="豆瓣"></a>豆瓣</h3><p><img src="/2020/12/27/summary-2020/douban.jpg" alt></p><h3 id="微信读书"><a href="#微信读书" class="headerlink" title="微信读书"></a>微信读书</h3><p><img src="/2020/12/27/summary-2020/weread.png" alt></p><h3 id="理财"><a href="#理财" class="headerlink" title="理财"></a>理财</h3><p><img src="/2020/12/27/summary-2020/alipay.png" alt></p><h3 id="bilibili"><a href="#bilibili" class="headerlink" title="bilibili"></a>bilibili</h3><p><img src="/2020/12/27/summary-2020/bilibili.png" alt></p><h3 id="跑步-1"><a href="#跑步-1" class="headerlink" title="跑步"></a>跑步</h3><p><img src="/2020/12/27/summary-2020/joyrun.png" alt></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;先看看去年立的 flag 的完成情况&lt;/p&gt;
&lt;h3 id=&quot;2019年-flag&quot;&gt;&lt;a href=&quot;#2019年-flag&quot; class=&quot;headerlink&quot; title=&quot;2019年 flag&quot;&gt;&lt;/a&gt;2019年 flag&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;看 2-3 部高分纪录片&lt;ul&gt;
&lt;li&gt;零散地看了《一本好书》、李永乐老师、PaperClip、一席演讲 等&lt;/li&gt;
&lt;li&gt;需要明确要看什么纪录片，并且很好利用碎片化时间&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;/ul&gt;</summary>
    
    
    
    
    <category term="年度总结" scheme="https://ustcqidi.github.io/tags/%E5%B9%B4%E5%BA%A6%E6%80%BB%E7%BB%93/"/>
    
  </entry>
  
  <entry>
    <title>发出一个网络请求有多难</title>
    <link href="https://ustcqidi.github.io/2020/10/18/network-issue/"/>
    <id>https://ustcqidi.github.io/2020/10/18/network-issue/</id>
    <published>2020-10-18T12:51:04.000Z</published>
    <updated>2025-01-04T02:21:58.733Z</updated>
    
    <content type="html"><![CDATA[<p>我们已经习惯各种 App 带来的便利：聊天、订外卖、叫车、刷抖音。其实看是简单的操作比如打开一个网站，发送一个表情，都涉及大量网络请求。完成一次网络请求其实也挺难的，我相信所有用户量大的 App 一定都做了很多应用层面的网络优化。</p><span id="more"></span><h2 id="网络请求流程"><a href="#网络请求流程" class="headerlink" title="网络请求流程"></a>网络请求流程</h2><p>先看一下一个网络请求需要经历哪些流程，现在绝大多数的网站 / App 都是 https, 所以这里只描述 https 请求的流程。</p><p>首先是域名解析，通过域名查询对应的 host IP 地址；然后就是 TCP 连接这个 IP 地址；最后是 TLS 握手建立安全的数据通道，而后就可以收发数据了。</p><p>看上去整个流通也挺简单的，但是这里面每一步都有可能出现问题。</p><h3 id="DNS"><a href="#DNS" class="headerlink" title="DNS"></a>DNS</h3><ul><li>运营商劫持</li><li>域名污染</li><li>本地配置 host</li><li>DNS 服务配置有问题</li></ul><h3 id="TCP"><a href="#TCP" class="headerlink" title="TCP"></a>TCP</h3><ul><li>防火墙限制</li></ul><h3 id="TLS"><a href="#TLS" class="headerlink" title="TLS"></a>TLS</h3><ul><li>SSL Inspector</li><li>自签名证书</li><li>抓包工具</li><li>代理服务器</li></ul><h2 id="Proxy"><a href="#Proxy" class="headerlink" title="Proxy"></a>Proxy</h2><h3 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h3><ul><li>PAC</li></ul><h3 id="认证"><a href="#认证" class="headerlink" title="认证"></a>认证</h3><ul><li>BASIC</li><li>Digest</li><li>NTLM</li><li>Kerbose</li></ul>]]></content>
    
    
    <summary type="html">&lt;p&gt;我们已经习惯各种 App 带来的便利：聊天、订外卖、叫车、刷抖音。其实看是简单的操作比如打开一个网站，发送一个表情，都涉及大量网络请求。完成一次网络请求其实也挺难的，我相信所有用户量大的 App 一定都做了很多应用层面的网络优化。&lt;/p&gt;</summary>
    
    
    
    
    <category term="网络" scheme="https://ustcqidi.github.io/tags/%E7%BD%91%E7%BB%9C/"/>
    
  </entry>
  
  <entry>
    <title>给 curl 提了一个 patch</title>
    <link href="https://ustcqidi.github.io/2020/10/18/curl-patch/"/>
    <id>https://ustcqidi.github.io/2020/10/18/curl-patch/</id>
    <published>2020-10-18T12:16:23.000Z</published>
    <updated>2025-01-04T02:21:58.692Z</updated>
    
    <content type="html"><![CDATA[<p>最近把 curl 升级到了 7.71.1 版本，然后 NTLM 认证又又又又出问题了。问题表现是开启了抓包工具后 NTLM 认证就一直失败，给官方报了一个 Issue，<a href="https://github.com/curl/curl/issues/5911">NTLM authentication fails when using proxy without username and password</a></p><p>然后尝试给官方提了一个 Pull Request，最终被合到 master 分支。<a href="https://github.com/curl/curl/pull/5914">Pull Request</a></p><p>这是我第一次给开源社区贡献代码，还是挺激动的。</p><p>有几点收获这里记录一下：</p><ul><li>发现开源项目问题，主动分析原因，思考解决方法</li><li>如果解决了问题，思考一下能否回馈开源社区，尽量找到 Root Cause，不要用 Workaround</li><li>通常开源项目都有自己的代码风格，提交 Pull Request 时要遵守项目的代码风格、通过各种静态检查。</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;最近把 curl 升级到了 7.71.1 版本，然后 NTLM 认证又又又又出问题了。问题表现是开启了抓包工具后 NTLM 认证就一直失败，给官方报了一个 Issue，&lt;a href=&quot;https://github.com/curl/curl/issues/5911&quot;&gt;NT</summary>
      
    
    
    
    
    <category term="网络" scheme="https://ustcqidi.github.io/tags/%E7%BD%91%E7%BB%9C/"/>
    
    <category term="cURL" scheme="https://ustcqidi.github.io/tags/cURL/"/>
    
  </entry>
  
  <entry>
    <title>libcurl 考古</title>
    <link href="https://ustcqidi.github.io/2020/08/08/curl-history/"/>
    <id>https://ustcqidi.github.io/2020/08/08/curl-history/</id>
    <published>2020-08-08T14:08:49.000Z</published>
    <updated>2025-01-04T02:21:58.688Z</updated>
    
    <content type="html"><![CDATA[<p>晚上在浏览 curl github 上的 tag, 好奇心驱使。我翻到了 curl 的第一个 release tag: curl-6_5</p><span id="more"></span><p><img src="/2020/08/08/curl-history/tag.png" alt></p><p>tag 的创建日期是 2000年5月14日，至今已经20余年了，当时我才读小学，有种穿越时空的奇妙感觉。</p><p>一直想学习一些 curl 的源码，可惜最新版本的代码量太大了，数据结构和调用关系错综复杂无从入手。第一版本应该是只支持了最基础的功能，果断下载。</p><p>相比之下，代码量少了很多。结构也简单明了不少。</p><p>对照着官方的release note，以及commit id，学习大佬怎么一步一步把 curl 做成今天的样子，真有挖到宝藏的感觉。</p><p>这是官方 doc. 里最早的几个版本的 release note</p><p><img src="/2020/08/08/curl-history/releasenote.png" alt></p><h2 id="附录"><a href="#附录" class="headerlink" title="附录"></a>附录</h2><h3 id="RESOURCES-文件记录了一些-RFC-文档"><a href="#RESOURCES-文件记录了一些-RFC-文档" class="headerlink" title="RESOURCES 文件记录了一些 RFC 文档"></a>RESOURCES 文件记录了一些 RFC 文档</h3><ul><li>RFC 959  - Defines how FTP works</li><li>RFC 1738 - Uniform Resource Locators</li><li>RFC 1777 - defines the LDAP protocol</li><li>RFC 1808 - Relative Uniform Resource Locators</li><li><p>RFC 1867 - Form-based File Upload in HTML</p></li><li><p>RFC 1950 - ZLIB Compressed Data Format Specification</p></li><li>RFC 1951 - DEFLATE Compressed Data Format Specification</li><li><p>RFC 1952 - gzip compression format</p></li><li><p>RFC 1959 - LDAP URL syntax</p></li><li>RFC 2045-2049 - Everything you need to know about MIME! (needed for form based upload)</li><li>RFC 2068 - HTTP 1.1 (obsoleted by RFC 2616)</li><li>RFC 2109 - HTTP State Management Mechanism (cookie stuff)</li><li>Netscape’s specification at <a href="http://www.netscape.com/newsref/std/cookie_spec.html">http://www.netscape.com/newsref/std/cookie_spec.html</a></li><li>RFC 2183 - “The Content-Disposition Header Field”</li><li>RFC 2229 - “A Dictionary Server Protocol”</li><li>RFC 2231 - “MIME Parameter Value and Encoded Word Extensions: Character Sets, Languages, and Continuations”</li><li>RFC 2388 - “Returning Values from Forms: multipart/form-data” Use this as an addition to the 1867 </li><li>RFC 2396 - “Uniform Resource Identifiers: Generic Syntax and Semantics” </li><li>RFC 2428 - “FTP Extensions for IPv6 and NATs”</li><li>RFC 2616 - HTTP 1.1</li><li>RFC 2617 - HTTP Authentication</li></ul><h3 id="FEATURES-文件记录了支持的-feature"><a href="#FEATURES-文件记录了支持的-feature" class="headerlink" title="FEATURES 文件记录了支持的 feature"></a>FEATURES 文件记录了支持的 feature</h3><ol><li><p>Misc</p><ul><li>full URL syntax</li><li>custom maximum download time</li><li>custom least download speed acceptable</li><li>multiple URLs</li><li>guesses protocol from host name unless specified</li><li>uses .netrc</li><li>progress bar/time specs while downloading</li><li>PROXY environment variables support</li><li>config file support</li><li>compiles on win32</li></ul></li><li><p>HTTP</p><ul><li>GET</li><li>PUT</li><li>HEAD</li><li>POST</li><li>multipart POST</li><li>authentication</li><li>resume</li><li>follow redirects</li><li>custom HTTP request</li><li>cookie get/send</li><li>custom headers (that can replace internally generated headers)</li><li>custom user-agent string</li><li>custom referer string</li><li>range</li><li>proxy authentication</li><li>time conditions</li><li>via http-proxy</li></ul></li><li><p>HTTPS (*1)</p><ul><li>(all the HTTP features)</li><li>using certificates</li><li>via http-proxy</li></ul></li><li><p>FTP</p><ul><li>download</li><li>authentication</li><li>PORT or PASV</li><li>single file size information (compare to HTTP HEAD)</li><li>‘type=’ URL support</li><li>dir listing</li><li>dir listing names-only</li><li>upload</li><li>upload append</li><li>upload via http-proxy as HTTP PUT</li><li>download resume</li><li>upload resume</li><li>QUOT commands (before and/or after the transfer)</li><li>simple “range” support</li><li>via http-proxy</li></ul></li><li><p>TELNET</p><ul><li>connection negotiation</li><li>stdin/stdout I/O</li></ul></li><li><p>LDAP (*2)</p><ul><li>full LDAP URL support</li></ul></li><li><p>DICT</p><ul><li>extended DICT URL support</li></ul></li><li><p>GOPHER</p><ul><li>GET</li><li>via http-proxy</li></ul></li><li><p>FILE</p><ul><li><p>URL support</p><p>  <em>1 = requires OpenSSL  </em>2 = requires OpenLDAP</p></li></ul></li></ol>]]></content>
    
    
    <summary type="html">&lt;p&gt;晚上在浏览 curl github 上的 tag, 好奇心驱使。我翻到了 curl 的第一个 release tag: curl-6_5&lt;/p&gt;</summary>
    
    
    
    
    <category term="网络" scheme="https://ustcqidi.github.io/tags/%E7%BD%91%E7%BB%9C/"/>
    
    <category term="cURL" scheme="https://ustcqidi.github.io/tags/cURL/"/>
    
  </entry>
  
  <entry>
    <title>我的时间和精力管理</title>
    <link href="https://ustcqidi.github.io/2020/07/09/time-mgr/"/>
    <id>https://ustcqidi.github.io/2020/07/09/time-mgr/</id>
    <published>2020-07-08T23:08:49.000Z</published>
    <updated>2025-01-04T02:21:58.770Z</updated>
    
    <content type="html"><![CDATA[<p>早上跑步时在思考一个问题：如何合理地分配时间和精力，才能高效地完成工作、平衡家庭生活、个人娱乐、健身以及学习。</p><p>其实从考研时开始我就一直在关注时间分配，尝试过各种大家耳熟能详的方法：番茄工作法、四象限管理。</p><span id="more"></span><p>但是简单盘点回顾一下，其实我做的不够好，至少效果不够好：</p><ul><li>工作上每个项目基本是被 push 着走，虽然近期有一些客观原因，但本质上是我自己做的不够好。</li><li>工作上非常缺乏定期思考、总结！目前我的“总结”停留在记录工作事务流水账的层面上。严重缺乏思考，包括专业和业务方面。</li></ul><p>究其原因，可能跟我平时工作习惯很大。合理分配管理精力非常重要，这篇文章盘点总结了一下我工作和生活的时间分配原则，按照计划执行一段时间再看看效果。</p><h3 id="工作事务类型盘点及时间分配"><a href="#工作事务类型盘点及时间分配" class="headerlink" title="工作事务类型盘点及时间分配"></a>工作事务类型盘点及时间分配</h3><h4 id="事务类型"><a href="#事务类型" class="headerlink" title="事务类型"></a>事务类型</h4><ul><li>各种会议，比如项目讨论、技术方案讨论、公共模块日常答疑、troubleshooting 会议</li><li>Ticket</li><li>线上 Crash</li><li>项目日常事务</li><li>总结与学习</li></ul><h4 id="时间分配原则"><a href="#时间分配原则" class="headerlink" title="时间分配原则"></a>时间分配原则</h4><ul><li>上午处理邮件、回复 ticket、开会、技术调研</li><li>下午3点以后IM设置成请勿打扰、非紧急会议不参加</li><li>下午3点以后专注 coding、技术调研</li><li>如没有紧急问题，每周5下午用来学习+总结</li><li>每天安排一个最高优先级事务</li></ul><h3 id="个人娱乐、健身、学习"><a href="#个人娱乐、健身、学习" class="headerlink" title="个人娱乐、健身、学习"></a>个人娱乐、健身、学习</h3><ul><li>每周六打一次羽毛球/游泳</li><li>微信读书 (午休时)</li><li>公开课、演讲 (午休时)</li><li>脱口秀电台 (午休时)</li><li>音乐 (工作背景音乐)</li><li>热剧、电影 (午休时)</li><li>蜻蜓FM听书 (上下班通勤、洗碗时)</li><li>保持早起跑步习惯</li></ul><h3 id="家庭生活"><a href="#家庭生活" class="headerlink" title="家庭生活"></a>家庭生活</h3><ul><li>每晚陪儿子读书</li><li>周六陪儿子上英语课</li><li>周六陪父母吃饭</li></ul>]]></content>
    
    
    <summary type="html">&lt;p&gt;早上跑步时在思考一个问题：如何合理地分配时间和精力，才能高效地完成工作、平衡家庭生活、个人娱乐、健身以及学习。&lt;/p&gt;
&lt;p&gt;其实从考研时开始我就一直在关注时间分配，尝试过各种大家耳熟能详的方法：番茄工作法、四象限管理。&lt;/p&gt;</summary>
    
    
    
    
    <category term="杂记" scheme="https://ustcqidi.github.io/tags/%E6%9D%82%E8%AE%B0/"/>
    
    <category term="工作效率" scheme="https://ustcqidi.github.io/tags/%E5%B7%A5%E4%BD%9C%E6%95%88%E7%8E%87/"/>
    
  </entry>
  
  <entry>
    <title>最近的几件大事</title>
    <link href="https://ustcqidi.github.io/2020/07/07/diary-7-7/"/>
    <id>https://ustcqidi.github.io/2020/07/07/diary-7-7/</id>
    <published>2020-07-07T00:55:43.000Z</published>
    <updated>2025-01-04T02:21:58.692Z</updated>
    
    <content type="html"><![CDATA[<ol><li><p>交首付，办贷款<br>希望股票行权收益能及时到账</p></li><li><p>处理 12 分交通违章<br>花钱真的可使鬼推磨</p></li><li><p>体检<br>2-3 年没体检了，希望一切顺利</p></li></ol><p>PS: 早睡早起、坚持跑步、定期盘点总结工作生活。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;ol&gt;
&lt;li&gt;&lt;p&gt;交首付，办贷款&lt;br&gt;希望股票行权收益能及时到账&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;处理 12 分交通违章&lt;br&gt;花钱真的可使鬼推磨&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;体检&lt;br&gt;2-3 年没体检了，希望一切顺利&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;PS</summary>
      
    
    
    
    
    <category term="杂记" scheme="https://ustcqidi.github.io/tags/%E6%9D%82%E8%AE%B0/"/>
    
  </entry>
  
</feed>
